[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d LoanBook"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wn96"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-F10-2/main[image:https://travis-ci.org/CS2103-AY1819S1-F10-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wn96"
        },
        "content": "https://ci.appveyor.com/project/wn96/main/branch/master[image:https://ci.appveyor.com/api/projects/status/wuxod62at21d9xkn/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wn96"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-F10-2/main?branch\u003dmaster[image:https://img.shields.io/coveralls/github/CS2103-AY1819S1-F10-2/main.svg[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wn96"
        },
        "content": "https://www.codacy.com/app/wn96/main[image:https://img.shields.io/codacy/grade/bf2570da2f954e9c99edce28ff4826df.svg[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wn96"
        },
        "content": "https://github.com/CS2103-AY1819S1-F10-2/main/blob/master/LICENSE[image:https://img.shields.io/badge/license-MIT-blue.svg[License]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* This is a desktop Loan Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* The target users are bicycle rental shop owners."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* The original source of the code is AddressBook - level 4 : https://github.com/se-edu/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "wn96": 5,
      "Kelly9373": 2,
      "-": 27,
      "FongYuan": 2
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"githubId\": \"FongYuan\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"displayName\": \"Lim Fong Yuan\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"authorNames\": [\"Fong Yuan\", \"FongYuan\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"githubId\": \"Kelly9373\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"displayName\": \"Liu Xiaohang\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"authorNames\": [\"Liu Xiaohang\", \"Kelly9373\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"githubId\": \"prokarius\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"displayName\": \"David Kum\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"authorNames\": [\"David Kum\", \"prokarius\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"githubId\": \"wn96\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"displayName\": \"Ang Wei Neng\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"authorNames\": [\"Ang Wei Neng\", \"wn96\", \"weineng\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"githubId\": \"xantho09\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"displayName\": \"Muhammad Irham Rasyidi Bin Zainal\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \"authorNames\": [\"xantho09\", \"Muhammad Irham Rasyidi Bin Zainal\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "mainClassName \u003d \u0027loanbook.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wn96"
        },
        "content": "    archiveName \u003d \u0027loanbook.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            test.include \u0027loanbook/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            test.include \u0027loanbook/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            test.exclude \u0027loanbook/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wn96"
        },
        "content": "        \u0027site-name\u0027: \u0027LoanBook\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wn96"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-F10-2/main.git\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "wn96": 4,
      "-": 239,
      "FongYuan": 4
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wn96"
        },
        "content": "LoanBook was developed by https://github.com/CS2103-AY1819S1-F10-2/[Team F10-2]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wn96"
        },
        "content": "\u003d\u003d\u003d Ang Wei Neng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "image::wn96.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wn96"
        },
        "content": "{empty}[https://www.weineng.io[homepage]] [https://github.com/wn96[github]] [\u003c\u003cweineng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Responsibilities: Integration + Git expert"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Liu Xiaohang"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "image::kelly9373.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "{empty}[https://github.com/Kelly9373[github]] [\u003c\u003cXiaohang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Responsibilities: Storage + Documentation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Lim Fong Yuan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "image::fongyuan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "{empty}[https://github.com/FongYuan[github]] [\u003c\u003cfongyuan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Responsibilities: Testing + Deliverables and deadlines + Scheduling and tracking + Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xantho09"
        },
        "content": "\u003d\u003d\u003d Muhammad Irham Rasyidi Bin Zainal"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xantho09"
        },
        "content": "image::xantho09.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xantho09"
        },
        "content": "{empty}[http://github.com/xantho09[github]] [\u003c\u003cirham#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d David Kum"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prokarius"
        },
        "content": "image::prokarius.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prokarius"
        },
        "content": "{empty}[http://github.com/prokarius[github]] [\u003c\u003cprokarius#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Responsibilities: Logic Components"
      }
    ],
    "authorContributionMap": {
      "wn96": 3,
      "Kelly9373": 10,
      "prokarius": 4,
      "-": 34,
      "xantho09": 3
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wn96"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-F10-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wn96"
        },
        "content": "* *Email us* : You can also reach us at `weineng [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "wn96": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d LoanBook - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wn96"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-F10-2/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "By: `Team F10-2`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ". Make sure the correct JDK version is set up for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`. A window titled \u0027Project Structure for New Projects\u0027 will pop up"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ".. Under the \"Project SDK\" heading, select the correct JDK version (JDK 9 or later)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "... If the correct version does not appear in the drop-down list, click `New...` \u003e `JDK`, then select the directory folder of the JDK, then click `OK`. +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "For Windows, the default installation directory would be `C:\\Program Files\\Java\\jdk-[version-number]`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ".. Click `OK` to accept the settings and close the window."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ". Locate the `build.gradle` file in this project\u0027s root directory on your computer and select it. Click `OK`. A window titled \u0027Import Project from Gradle\u0027 will pop up"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ". Click `OK` to accept the default settings. Gradle will now start building your project. Wait a short while for it to complete (it will say `main: sync finished` in IntelliJ\u0027s Build tab  when it is done)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ". Open link:{repoURL}/src/main/java/loanbook/storage/XmlAdaptedLoan.java[`XmlAdaptedLoan.java`] and link:{repoURL}/src/main/java/loanbook/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wn96"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wn96"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/loanbook/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/loanbook/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ". Run the `loanbook.MainApp` and try a few commands"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "When you are ready to start coding, you may move on to \u003c\u003cDesign-Architecture\u003e\u003e to get some sense of the overall design."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/loanbook/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "image::SDforDeleteLoan.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Note how the `Model` simply raises a `LoanBookChangedEvent` when the Loan Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "image::SDforDeleteLoanEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "*API* : link:{repoURL}/src/main/java/loanbook/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `LoanListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/loanbook/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "link:{repoURL}/src/main/java/loanbook/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ".  `Logic` uses the `LoanBookParser` class to parse the user command."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a loan) and/or raise events."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "image::DeleteLoanSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "*API* : link:{repoURL}/src/main/java/loanbook/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* stores the Loan Book data."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cLoan\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "*API* : link:{repoURL}/src/main/java/loanbook/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* can save the Loan Book data in xml format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Classes used by multiple components are in the `loanbook.commons` package."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedLoanBook`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "It extends `LoanBook` with an undo/redo history, stored internally as a `loanBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* `VersionedLoanBook#commit()` -- Saves the current loan book state in its history."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* `VersionedLoanBook#undo()` -- Restores the previous loan book state from its history."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* `VersionedLoanBook#redo()` -- Restores a previously undone loan book state from its history."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitLoanBook()`, `Model#undoLoanBook()` and `Model#redoLoanBook()` respectively."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedLoanBook` will be initialized with the initial loan book state, and the `currentStatePointer` pointing to that single loan book state."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th loan in the loan book. The `delete` command calls `Model#commitLoanBook()`, causing the modified state of the loan book after the `delete 5` command executes to be saved in the `loanBookStateList`, and the `currentStatePointer` is shifted to the newly inserted loan book state."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new loan. The `add` command also calls `Model#commitLoanBook()`, causing another modified loan book state to be saved into the `loanBookStateList`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "If a command fails its execution, it will not call `Model#commitLoanBook()`, so the loan book state will not be saved into the `loanBookStateList`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Step 4. The user now decides that adding the loan was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoLoanBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous loan book state, and restores the loan book to that state."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial loan book state, then there are no previous loan book states to restore. The `undo` command uses `Model#canUndoLoanBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoLoanBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the loan book to that state."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "If the `currentStatePointer` is at index `loanBookStateList.size() - 1`, pointing to the latest loan book state, then there are no undone loan book states to restore. The `redo` command uses `Model#canRedoLoanBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the loan book, such as `list`, will usually not call `Model#commitLoanBook()`, `Model#undoLoanBook()` or `Model#redoLoanBook()`. Thus, the `loanBookStateList` remains unchanged."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitLoanBook()`. Since the `currentStatePointer` is not pointing at the end of the `loanBookStateList`, all loan book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire loan book."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the loan being deleted)."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of loan book states."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedLoanBook`."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wn96"
        },
        "content": "// tag::adminauthentication[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wn96"
        },
        "content": "\u003d\u003d\u003d Admin Authentication"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wn96"
        },
        "content": "Before critical actions such as deleting a loan can be performed, admin authentication"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wn96"
        },
        "content": "should be required. This ensures that only authorized users are able to perform critical actions."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wn96"
        },
        "content": "This is done by requiring a password before performing a critical action."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wn96"
        },
        "content": "* Current Implementation *"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wn96"
        },
        "content": "There are three stages in this implementation:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003d\u003d\u003d\u003d Allowing the `delete` command to accept a password"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wn96"
        },
        "content": "1. To allow `delete` command to accept a password, we set a stub password of `a12345` and require all `delete` command to take in a password argument."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wn96"
        },
        "content": "* When password is wrong, we do not perform the deletion of the loans."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wn96"
        },
        "content": "* Only when password matches with stub password will the loan be deleted."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wn96"
        },
        "content": "2. Existing tests were edited to include and check for a valid password before deletion."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wn96"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wn96"
        },
        "content": "The default password for a new app is `a12345`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wn96"
        },
        "content": "The following sequence diagram shows how the new `delete` operation works."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wn96"
        },
        "content": "image::deleteLoanWithPass.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003d\u003d\u003d\u003d Allow changing of master password"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wn96"
        },
        "content": "Given below is an example usage scenario and how the `setpass` mechanism behaves at each step."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wn96"
        },
        "content": "Step 1. The user launches the application for the first time. `UserPref` file will initialise the password as `a12345`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wn96"
        },
        "content": "Step 2. The user executes `setpass a12345 newP4sS` command to change the password to `newP4sS`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wn96"
        },
        "content": "Step 3. `Password` class will encrypt the password, and call Model#setPass, that changes the password of the application in `UserPref`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wn96"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wn96"
        },
        "content": "If the current password input is wrong, it will not call Model#setPass, so the UserPref state will not be saved."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wn96"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wn96"
        },
        "content": "If the current password input the same as the new password input, it will not call Model#setPass, so the UserPref state will not be saved."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wn96"
        },
        "content": "Step 4. Password in `UserPref` is set to new password input."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wn96"
        },
        "content": "The following sequence diagram shows how the `setpass` operation works:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wn96"
        },
        "content": "image::setPasswordLogic.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wn96"
        },
        "content": "image::setPasswordModel.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003d\u003d\u003d\u003d Encrypt current password for security"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wn96"
        },
        "content": "To ensure that others are unable to retrieve the app\u0027s password from the preference.json, we encrypt the password before storing. Decryption of password can only be done by the `Password` class."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wn96"
        },
        "content": "This is currently done by appending `-encrypt` to the password, and removing it when"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wn96"
        },
        "content": "decrypting. For version 2.0, we plan to utilise existing libraries to encrypt and"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wn96"
        },
        "content": "decrypt our stored password."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wn96"
        },
        "content": "// end::userconfirmation[]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d Return a Loan feature"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "prokarius"
        },
        "content": "A LoanBook application that only allows users to do loans without being able to return them would not serve its purpose. When you take out a loan, it should automatically come with the feature of being returnable. This is the functionality for that."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Returning a loan is done by setting the corresponding status of the loan to `LoanStatus.RETURNED`. Other than setting the enum to be returned, the cost of the loan will also be calculated and displayed to the user."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "prokarius"
        },
        "content": "The steps that have to be done by LoanBook is as follows:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Check the start and end time of the loan to ensure that the loan period is valid."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Store the current time as the return time of the loan."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Change the enum of `LoanStatus` to become `LoanStatus.RETURNED`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Calculate the cost of the loan and display it in the GUI as a suggestion for the user."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "prokarius"
        },
        "content": "These steps would change the given `Loan` object, and update the properties of the `Loan` object. The appropriate values stored within the `Loan` object would therefore change accordingly."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Given below is an example usage scenerio and how the internals of the Loan would behave:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "prokarius"
        },
        "content": "**Step 1.** The user would have to do a search for which loan they would like to return. This will pull up a list of loans from which the user would be able to select the correct loan."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "prokarius"
        },
        "content": "**Step 2.** Using the current system time as the `endTime`, the duration of the loan will be calculated. Should the duration ever be negative, an error message will be thrown. This is because such a scenario would not ever be possible in the LoanBook."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "prokarius"
        },
        "content": "**Step 3.** The user decides to return the current loan (in the case of the above image, the user wants to return loan at index 3, as selected). User will therefore key in `return i/3`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "prokarius"
        },
        "content": "The LoanBook will save the current time into the `LoanTime endTime` field. This would be done by calling the constructor `LoanTime()`. Also, the loanStatus field would also be updated from `ONGOING` to `RETURNED`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "prokarius"
        },
        "content": "image::return-loan-loan2.png[]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Note that originally the loan has a `null` value for end time. Note that the `endTime` and `loanStatus` values has been updated."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "prokarius"
        },
        "content": "If the loan has already been returned or deleted, a corresponding error message will notify you that you cannot return a loan that is not ongoing. The message will also display the current status of the loan for troubleshooting. This check happens during this step."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "prokarius"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "prokarius"
        },
        "content": "**Step 4.** The function now calculates the cost of the loan. This price would be based on the amount of time the loan was active for, as well as the loanRate that was set, by multiplying the time with the rate."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Although the time saved is to the millisecond, the time that is multiplied when we are getting the cost is rounded down to the nearest minute. In a sense, this is \"pro-rating\" the cost, and making it more discrete."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "prokarius"
        },
        "content": "The result is then displayed into the GUI for the user as the cost price of the loan."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "prokarius"
        },
        "content": "It is possible for the LoanBook to have a loan that lasts for 0 minutes. This is because there may be some weird edge case where an object is loaned for less than a minute, which gets prorated down."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "prokarius"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Using an enum vs changing the location of the loan"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* **Alternative 1 (current choice):** To create an enum that will store the status of the linked list."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Pros: Easy to implement the return a loan feature, and do not need to create new data storage features."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Cons: When using the `summary` function, it will take a longer amount of time, as the LoanBook would have to do a check at every step to ensure the correct data is appended to the correct place."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Alternative 2: Create new ArrayLists of `Loans` for each possible status of the `Loan` objects."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Pros: Computing the `summary` of the LoanBook would be much easier, and quicker."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Cons: `return` functionality would run much slower, as there will be empty slots in the ArrayList after shifting the Loan objects around. Searching for loans would also be much more difficult, as the results from the various Loan ArrayLists has to be appended together."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d Summary Feature"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "prokarius"
        },
        "content": "In order to allow the user to use the LoanBook effectively as an auditing tool, they must be able to get a summary of all the loans that they have made. This summary should ideally give them an idea of the statistics of each of their transactions at a glance."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Getting the summary of all the loans is simply done by looping through all the stored loans before and aggregating the statistics of all the loans."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Currently, the `summary` command displays to the user the following statistics:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Total number of ongoing loans"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Total number of loans ever taken out"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Total amount of time all bikes have been loaned for"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Total revenue from the loan service"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "prokarius"
        },
        "content": "This would give a very handy summary page as well as a printable audit page for the bicycle shop owners."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Given below is an example usage scenario and how the internals of the LoanBook behaves:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "prokarius"
        },
        "content": "**Step 1.** The user simply has to type the `summary` keyword into the CLI."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "prokarius"
        },
        "content": "**Step 2.** The LoanBook proceeds to loop through all the loans and aggregate the statistics of the loans."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "prokarius"
        },
        "content": "**Step 3.** The LoanBook updates the display with the aggregated statistics, and this can be screenshotted by the user as a summary page."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Getting the summary"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* **Alternative 1 (current choice):** Looping through the entire list of loans to get the summary of the content"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Pros: Easy to implement, and do not need to create new data storage features."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Cons: Looping through all loans will take more time, as the LoanBook would have to check every loan and recalculate."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Alternative 2: Use a cache to store previously calculated values of the summaries."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Pros: Quicker response time to the users."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Cons: Much harder to implement, cache might break if user edits past loans."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d Future features"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "prokarius"
        },
        "content": "We plan to include a feature which allows users to summarize the LoanBook based on certain parameters. For example, in future implementations, the user will be able to filter the statistics based on the identity of a bicycle."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "prokarius"
        },
        "content": "These are the proposed features you would be able to search based on:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Bicycle"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Time period"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Person who took out the loan"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "prokarius"
        },
        "content": "As well, having to recalculate all the loans would be a bad idea when the LoanBook contains many loans. A proposed solution would be to cache the results of the main summary method, so that the LoanBook would only have to recalculate the numbers based on loans that have not been added to the final tally."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Another idea would be to display all the loans in a printable table, when the summary feature is called. Perhaps this would generate a pdf file which shows all the list of loans that the LoanBook is keeping track of. Users can then take use this as a more stringent auditing tool."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003d\u003d\u003d Bicycle Management"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "As bicycles have a lot of properties, statuses and actions associated with them, they are represented in the code base as a dedicated `Bike` class."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Each `LoanBook` will have its own list of `Bike` s, representing all the bicycles that a bicycle shop owner has at their disposal. For the most part, the list of bicycles will be maintained in the same way as the list of loans."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Every bicycle will have the following members:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* `name`: A name that uniquely identifies the bicycle, e.g. the bicycle\u0027s serial number."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* `status`: The bicycle\u0027s current status that represents where it is or what it is doing, e.g. `Available`, `Loaned Out`, `On Display`, `Under Repair`."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* `loanHistory`: A list of past loans associated with this bicycle, sorted chronologically."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* `loanReserves`: A list of future loans (i.e. reservations) associated with this bicycle, sorted chronologically."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* Traits that characterize the bicycle, such as `brand`, `model`, `top speed`, `wheel size`, `weight`, `material` etc."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "The new structure of the Loan Book is demonstrated in the class diagram below:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "image::BicycleManagementClassDiagram.png[width\u003d\"720\"]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Why does the bicycle track loans using two lists, instead of collating them into one big list? Because each list has a specific category of loans and it is more common to encounter situations that deal with only one of the lists (e.g. checking transaction history, or checking for clashes with reservations), rather than both."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Every `Loan` will have a reference to exactly one `Bike`: the bicycle that is loaned out. Conversely, every `Bike` has two lists of references of `Loan` s, which track the bicycle\u0027s loan history and future reservations."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "This makes the `LoanBook` \u0027s list of loans a little harder to manage, due to the extra references. However, we have chosen to implement it anyway as referencing a bicycle\u0027s history is a very useful and frequently used operation. To manage the deletion of loans, the loan will be dereferenced from the Bike it references before it gets deleted. The sequence diagram below demonstrates this process:"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "image::DeleteLoanSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Due to the dependency of `Loan` s on `Bike` s, any bicycle that has been loaned out at least once will never be deleted from the system, merely archived and labelled `Decommissioned`. The `Bike` can still be deleted completely if all of the `Loan` s associated with it are deleted (i.e. invalidated) first."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Using this framework, it is now more efficient to implement and use a set of mini-features and operations to facilitate bicycle management, as detailed in the following sections:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003d\u003d\u003d\u003d Visible bicycle statuses"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "The current availability of bicycles are tracked by LoanBook. Bicycles can thus be filtered by whether they are available or not, and the available ones are readily visible in the UI."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003d\u003d\u003d\u003d Invalid loans"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Loaning out a particular bicycle during the time which it is unavailable or has already been reserved will be denied. This prevents accidents in loaning out bicycles."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* When attempting to loan out a bicycle, the associated bicycle is retrieved from the system."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "The loan will be rejected if no bicycle is found that matches the bicycle name provided."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* If the loan will take effect immediately, the bicycle\u0027s status is checked. If the bicycle is unavailable, the loan is rejected, and the bicycle\u0027s status is reported to the user."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* If the loan is a reservation, i.e. it schedules a loan for the future, the bicycle\u0027s future reservations are checked. LoanBook will attempt to insert the reservation into the list of existing reservations. If the reservation clashes with the one directly before or after it, the loan is rejected, and the clash is reported to the user."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003d\u003d\u003d\u003d Bicycles for particular needs"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "The list of bicycles can be filtered using the same algorithm to filter the list of loans in order to find bicycles with particular properties, to suit particular customer\u0027s needs or activities."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Internal representation of bicycles"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* **Alternative 1 (current choice):** Have a dedicated `Bike` class."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "** Pros: OO design. Easier to track status of bicycles. Bicycles can support more properties and features."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "** Cons: Complex internal representation. Additional memory used for tracking Bikes."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* **Alternative 2:** Identify bikes by their names used in the Loans."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "** Pros: Simpler internal representation. Less data to manage internally or in storage."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "** Cons: Data on bikes have to be algorithmically searched for. Bicycles are assumed to exist and there is no verification for mistyped bicycle names. More difficult to implement bike-specific features."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Hide private information"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Users must provide some important and personal information when adding a loan, e.g. `Nric`, so it is our responsibility to protect their privacy."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "As a result, we have added a new feature to hide the private information from the Window. +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Example: The customer\u0027s `Nric` as stored in the database is `Nric: G1234567U`, but our `LoanCard` will only show `Nric: Gxxxxx67U`."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "image::LoanListPanelView.png[]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Hidden private information is facilitated by an interface called `Censor`. It is implemented by classes `Nric`, `Phone` and `Email`."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "When showing a new loan, it will do the following operations:"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `LoanCard#LoanCard()` -- the constructor will assign values to each of the labels shown in the LoanCard."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `Nric#getCensored()` -- censor the Nric value and hide the first five digital numbers. Then it returns the censored String."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `Nric#doCensoring(int length)` -- Take in the length of the Nric String and return the censored part (\"x\" part) according to the length."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `Phone#getCensored()` -- censor the phone number and hide the first five digital numbers. Then it returns the censored String."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `Phone#doCensoring(int length)` -- Take in the length of the Phone String and return the censored part (\"x\" part) according to the length."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `Email#getCensored()` -- censor the email address and hide every characters except the last two characters in the local-part and the domain."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `Email#doCensoring(int length)` -- Take in the length of the Email String and return the censored part (\"x\" part) according to the length."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Given below is an example usage scenario and how this mechanism behaves at each step."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "**Step1.** The user adds a new loan to the LoanBook. A new `LoanCard` object will be created. +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "The `LoanCard` object will contain information on the loan: `LoanID`, `BikeID`, `Name`, `Nric`, `Phone`, `Email`, `LoanRate` and `LoanTime`."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "**Step2.** Assign the value of each of the components to their corresponding labels. +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "For example: `name.setText(loan.getName().value);` will directly assign the name String of this loan to the `name` label. +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "However, the values of `Nric`, `Phone` and `Email` need censoring before assigning their values, so they will call their own `getCensored()` method in their class. +"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "`getCensored()` in each of these class will call their corresponding `doCensoring(int)` method. Then combine the censored part and remain part and return. +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "For example: `phone.setText(loan.getPhone().getCensored().value);` will censor the value of the phone String of this loan and then assign the censored value to the `phone` label."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "The following sequence diagram shows how this operation works:"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "image::HideInfoSequenceDiagrams.png[]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "**Aspect: How to execute getCensored() and doCensoring(int)**"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* **Alternative 1 (current choice)**: each class implements from `Censor` interface."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* **Alternative 2**: `Loan` class implements from `Censor` interface."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Pros: Maybe easy to understand."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Cons: The method might be bulky."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d\u003d How to see the hidden information"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "The censored data are only hidden from the window, not changed in the database. The `BrowserPanel` on the bottom right of the window will still show all the information including the hidden information."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Send Reminder Email feature"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "The email sending mechanism is supported by the https://docs.oracle.com/javaee/7/api/javax/mail/package-summary.html[`JavaMail`] library. This feature is composed of three commands: `checkemail`, `setemail` and `remind`."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `checkemail` command: display the email address that the user has set to send emails from. The app will censor the email address."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "If user has not set an email, the email address will be a string `\"default\"` and the app show a \"You have not set your email yet!\" message."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `setemail` command: set the email address used for sending reminders to the customers."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Only gmail is accepted by the app."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `remind` command: automatically generate an email containing some core information about the loan, and send it to the corresponding customer from user\u0027s email. This command will use the `JavaMail` library."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "The email will contain the `Name`, `BikeId`, `LoanStartTime` and `LoanRate` of the loan."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Given below is an example usage scenario and how the reminder email mechanism behaves at each step."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*Step 1.* The user launches the application for the first time. The user\u0027s email address is string `\"default\"` by default."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*Step 2.* The user executes `checkemail`. The following sequence diagram shows how `checkemail` works:"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "image::CheckEmailSequenceDiagram.png[]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "The command executes `Model#getMyEmail()`, which calls `UserPrefs#getDefaultEmail()` and returns user\u0027s email stored in `UserPref`. The app checks if user\u0027s email equals to `\"default\"`. In this case, they are equal, so it throws a `CommandException`."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*Step 3.* The user executes `setemail OLDEMAIL NEWEMAIL`. This command does a few checks first:"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. If `OLDEMAIL` is not equal to either `\"default\"` or the previously set email, then a `CommandException` is thrown, as the validation of the old email fails."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. Otherwise, the app then checks if `OLDEMAIL` and `NEWEMAIL` are equal. If so, then a `CommandException` is thrown, to warn the user that they are setting the same email as last time."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. Otherwise, `SetEmailCommand#isValidGmail(NEWEMAIL)` is called to check if `NEWEMAIL` is a valid gmail. If not, a `CommandException` is thrown to warn the user that they are setting the same email as last time."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*Step 4.* The user forgets what email he has set before, so he executes `checkemail` again. The procedure is the same as in *Step 2*. However, the app detects that user\u0027s email is not `\"default\"` this time, so it creates an `Email(userEmail)` object and executes `Email#getCensored()`. Then, the function returns a `CommandResult` with a success message and the censored user email."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*Step 5.* The user sends a reminder email to a customer by executing `remind x/EMAILPASSWORD n/NAME b/BIKEID`. This command implements the following operations:"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "a. Get a list of `Loans` from the `LoanBook` class and execute `RemindCommand#getLoan(list, NAME, BIKE)` to check if there is a `loan` that contains both this `NAME` and `BIKE`."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "b. If it returns a non-null `loan`, then check its `LoanStatus`."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "c. If its `LoanStatus` is `LoanStatus.ONGOING`, create a `SendReminder(model, EMAILPASSWORD, loan)` object and execute `SendReminder#send()` to send email. +"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "The `SendReminder#send()` method calls `SendReminder#createReminderEmail(session, userEmail)` to create the content of the email, connects user\u0027s email using `EMAILPASSWORD` and finally send the email."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "If the user cannot remember the customer\u0027s `NAME` or the loaned `BIKE`, he can use the `find [NAME] [BIKE]` command to search for the target loan."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "For Steps (a) and (b), if the next step cannot be executed, a `CommandException` with corresponding failure message will be thrown."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "If it throws a `CommandException` with authentication failed message in step (c), please check if user\u0027s email and password are correct. If they are, please make sure that the `Less secure apps` setting of user\u0027s email is enabled. If it is not, enable it and refresh the page."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*Aspect: use user\u0027s personal email vs share an immutable common email*"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* *Alternative 1 (current choice):* Use a user-specified email."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** The user has a choice of what email address to use."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** The user needs to type in the correct password if they want to send a reminder email, which ensures the security and privacy of the email."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** The user needs to enable the `Less secure apps` setting, which could be a security concern."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* *Alternative 2:* Use a common email provided by the app."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** The user does not need to set their own email when sending reminder emails, reducing hassle when setting up."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** The user does not need to type in a password when sending a reminder email."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** The common email is less secure, as its password can be found within the program."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** The password of the common email can be changed by malicious users."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** The email might get overloaded."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Customers might receive spam emails, as the `remind` command does not require a password."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d\u003d Future considerations"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "We plan to add a feature that can automatically send an e-receipt to the customer after `return` ing a loan."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "The e-receipt will contain the `Name`, `BikeID`, `LoanStartTime`, `LoanEndTime` and `TotalCost` of the loan."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d [Proposed] Improved `delete` functionality"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "prokarius"
        },
        "content": "When the user deletes a loan from the LoanBook, it deletes the correct loan, then commits the result into memory. What this entails is that the entire XML file gets overwritten when each delete command is being called."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed implementation:"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "prokarius"
        },
        "content": "From above, there is already a `LoanStatus` that has been implemented. What this does is that it allows the loan to be marked as deleted by setting the enum to the appropriate value. This would result in the LoanBook not needing to recommit every change."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "prokarius"
        },
        "content": "From here, when the user decides to close the LoanBook, it will then loop through all the loans and filter out the ones which have not been deleted. These are the loans that would be kept and saved in the LoanBook."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "prokarius"
        },
        "content": "**Aspect: Deleting a loan**"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* **Alternative 1 (current choice)**: Remove each loan as they are deleted"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Cons: Large time taken for memory operations as reading and writing to the data is required."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Alternative 2 (proposed implementation): Use an enum to implement lazy deletion."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Pros: Much more time efficient due to lazy deletion"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Cons: Implementation is harder, and changing to this implementation would affect the undo and redo features."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Alternative 3: Fix the LoanBook storage manager so that it does not rewrite the entire XML file after each delete operation."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Pros: All operations are now lazy. Much better performance of the application because commit operations do not need to change the large XML file."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Cons: Large refactoring work required. May potentially affect the timeline of development of the other functions."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `loanbook.ui` package."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "e.g. `loanbook.commons.StringUtilTest`"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "e.g. `loanbook.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "e.g. `loanbook.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "prokarius"
        },
        "content": "The tests within the `add` command parsers do not take into account the feedback string from within the display. This is because of the time sensitive nature of the `add` command. It does not take in a specific `LoanTime` when the loan is created and populates the current system time into the `Loan`. Therefore, the strings that is returned for each command is time dependant. Hence it is impossible to do a string matching on the returned display string and a hard coded value."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "prokarius"
        },
        "content": "In this case, we commented out the check for equality of the string from the `add` command in the GUI against the expected hard coded string."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "prokarius"
        },
        "content": "However we do not need to test the equality of the displayed strings to ensure that the `add` command is working properly. We can simply check that the size of the list of `Loans` in the LoanBook has increased by 1, as well as to ensure that the `Loan` that was added into the LoanBook has the same base property as the default `Loan` that was added."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "prokarius"
        },
        "content": "An alternative would be to use a regex to do string pattern matching on the added `Loan`. This can be combined with getting the current system time of the tests to check that the display strings match, and the saved `Loans` are correctly added. However, this modification would take time to develop and to ensure that it is correct. As such, such developments would be left to be completed in future releases of LoanBook."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/loanbook/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "A project often depends on third-party libraries. For example, Loan Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* rents bicycles as a business in Singapore"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "*Value proposition*: manage bicycle loans faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my bicycles"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|register my bicycles into the app"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|keep track of my bicycles within the app"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my bicycles"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|edit details for my bicycles within the app"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|update the system with the latest bicycle statuses (e.g. got damaged, repaired, changed name or ID)"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my bicycles"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|remove bicycles from the app"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|reflect the decommissioning of bicycles in the app"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my bicycles"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|track the features of my bicycles (e.g. wheel size, gears, has a bell)"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|search for particular bicycles or types of bicycles better, especially when serving customers"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my bicycles"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|mark a bicycle with a repair end date"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|I can be reminded by the app on when to collect my bike from the repairman"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my loans"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|initiate new loans into the app"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|keep track of my loans within the app"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my loans"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|edit a loan\u0027s details"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|correct a typo or adapt to a customer\u0027s change of mind"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my loans"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|register the completion of a loan (i.e. return of the bike) in the system"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|update the system (make the bike available again, receive payment etc.)"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my loans"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|cancel a loan"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|update the system in case the loan is invalidated (e.g. the customer changes their mind)"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my loans"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|be automatically notified and given details if the same customer tries to rent two bikes simultaneously"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|not loan out another bicycle to a customer who has not returned their previous bike"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my loans"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|be automatically notified and given details if two customers try to loan the same bike simultaneously"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|not loan out an already loaned bike"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my bicycles and loans"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|view a list of all bicycles or loans"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|get a big picture of my current state"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my bicycles and loans"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|choose to view the full details of a particular bicycle or loan"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|get details about a particular bicycle or loan as needed or desired"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my bicycle paraphernalia"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|tag loans that loan additional items (e.g. helmets, attachable headlights)"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|keep track of which transactions concern them"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my loans"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|tag loans that loan additional items (e.g. helmets, attachable headlights)"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|keep track of which transactions concern my paraphernalia"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to accommodate customer demands"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|register rentals in advance and reserve bicycles"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|be reminded of reservations, and not accidentally loan the bicycle out thus becoming unable to meet the reservation"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my loans"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|see at a glance what loans are overdue"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|automatically remind people who are still in possession of my bicycles to return them"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my loans"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|get an automatic reminder when a loan is overdue"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|contact the customer to tell them that their time is up"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner that has to deal with an overdue loan"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|view the contact details of bicycle loaners"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|contact them to check on their (and my bicycle\u0027s) status"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|view past loans of my bicycles"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|analyze my own history or present records for whatever purpose (accounting, investigation, legal etc.)"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|view loan activity over a specific period of time (e.g. Jun to Aug 2018)"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|analyze my own history for a focussed period of time"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to optimize my business"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|see which bicycles are the least popular to be rented"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|investigate them for issues or possibly decommission them"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who is proficient with a CLI"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|use a CLI for all operations within the app"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|give commands faster and with less error"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to meet customer demands promptly"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|readily view a list of available bicycles"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|make recommendations to customers to serve them faster"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my bicycles and loans"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|have my list of bicycles or loans sorted (by name, date etc.)"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|search for a particular entry much more easily"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my bicycles and loans"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|filter my list of bicycles or loans with a keyword"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|search for a particular entry much more easily"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my bicycles and loans"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|view only a subset of my bikes or loans with entries in a particular range (e.g. date, loan rate)"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|search for a particular entry much more easily"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to make returning a bike easy"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|automatically calculate the correct amount of money based on the time they loaned the bike for"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|I don\u0027t have to calculate the cost manually, and thus be faster with less mistakes"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my bicycles"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|add tags to bicycles"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|categorize and later search for them more easily"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to manage my bicycles and loans"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|undo and redo recent changes in the app"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|quickly recover in the event of a command mistake"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to expand my service capabilities"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|access the same data on different machines simultaneously"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|manage multiple service counters efficiently and accurately"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to expand my service capabilities"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|hook the app up with the national database"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|automatically retrieve some customer details (e.g. name, gender) when I type in their NRIC"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who wants to expand my service capabilities"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|integrate the app with an NRIC barcode scanner"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|automate entering a customer’s details"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who respects my customer\u0027s privacy"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|partially or fully hide some of the customers’ \u003c\u003cprivate-contact-detail,personal data\u003e\u003e (e.g. NRIC, phone)"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|minimize the chance of leaking those details out to third parties"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who is concerned about the data\u0027s security"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|encrypt the app’s data"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|ensure no one can access or modify it with third-party software"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who is concerned about the data\u0027s security"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|set a username and password for accessing the app"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|lock unknown parties out from the app"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* *`"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who is concerned about the data\u0027s security"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|prompt the user (myself) for a confirmation or a password before I delete entries"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|prevent accidental or hasty deletions of data"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|bicycle rental shop owner who is concerned about the data\u0027s security"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|back-up the app\u0027s data"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|recover quickly in the case of data corruption or just general data unavailability"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|new or inexperienced user"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|readily access the Help page for the app"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|have a quick and comprehensive reference on how to get started and do things"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|new or inexperienced user"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|see command usage instructions whenever I mistype"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "|correct myself on the spot"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "prokarius"
        },
        "content": "(For all use cases below, the *System* is the `LoanBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003d\u003d\u003d Use case: Delete loan"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "1.  User requests to list loans."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "2.  LoanBook shows a list of loans."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "3.  User requests to delete a loan in the list by specifying a list index."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "4.  LoanBook prompts user for a password."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "5.  User enters their password."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "6.  LoanBook deletes the loan."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "7.\tLoanBook displays a prompt to the user indicating success."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** 3a1. LoanBook shows an error message."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d Use case: Add loan into loan book"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "prokarius"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "1.  User requests to add a loan with the specific parameters into the LoanBook."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "2.  LoanBook adds the loan."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "3.\tLoanBook displays a prompt to the user indicating success."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "prokarius"
        },
        "content": "+"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "prokarius"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* 1a. The user input is not of the correct format."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "prokarius"
        },
        "content": "+"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** 1a1. LoanBook shows an error message giving the user an example command, as well as correct format of the command."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "prokarius"
        },
        "content": "+"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* 1b. Any one of the inputs fails their respective validation checks."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "prokarius"
        },
        "content": "+"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "** 1b1. LoanBook shows an error message telling the user how to rectify their command."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "prokarius"
        },
        "content": "+"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d Use case: Mark a loan as returned in the LoanBook"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "1.  User requests to search for a loan with a specific name or tag."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "2.  LoanBook shows a list of loans that fulfills the condition."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "3.  User requests to return a specific loan from the list by specifying a `LoanID`."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "4.  LoanBook marks the loan as returned."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "5.  LoanBook prompts the user to charge the customer a certain amount of money, based on the prevailing rates and rental times in the loan book."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* 2a1. LoanBook feedbacks to the user that no loans fulfilling the condition were found."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* 3a. The given LoanID is invalid."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "prokarius"
        },
        "content": "+"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** 3a1. LoanBook shows an error message."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "prokarius"
        },
        "content": "+"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* 3b. The loan at the given LoanID has been returned."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** 3b1. LoanBook shows an error message, stating the time which the loan has been returned."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d Use case: Reset the entire loanbook"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "prokarius"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "1.  User requests to reset the loanbook."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "2.  LoanBook prompts the user for their password."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "3.  User enters the correct password."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "4.  LoanBook clears its entire history of loans."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "prokarius"
        },
        "content": "+"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "prokarius"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* 3a. The user inputs an incorrect password."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "prokarius"
        },
        "content": "+"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "** 3a1. LoanBook shows an error message telling the user that the password that they entered is incorrect."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "prokarius"
        },
        "content": "+"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d Use case: Give a summary of all transactions"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "prokarius"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "1.  User requests for a summary of all transactions."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "prokarius"
        },
        "content": "2.  LoanBook gives a summary of all the transactions that that had happened."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "prokarius"
        },
        "content": "+"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ".  Should be able to hold up to 1000 loans without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003d\u003d\u003d Deleting a loan"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ". Deleting a loan while all loans are listed"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ".. Prerequisites: List all loans using the `list` command. Multiple loans in the list."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "   Expected: No loan is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d Return a loan functionality"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Prerequisites: List all loans using the list command. Ensure there are multiple loans in the list."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "prokarius"
        },
        "content": ". Returning a valid loan"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "prokarius"
        },
        "content": ".. Choose a loan that has not been returned. These loans are marked with the ONGOING tag. Find the index number of it and run `return i/\u003cINDEX\u003e`. +"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "prokarius"
        },
        "content": "   Expected: The loan is returned successfully. The display message details that the loan has been deleted, and gives a suggestion for the cost price of the duration of the loan."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "prokarius"
        },
        "content": ".. Choose another ongoing loan from the list and run `return i/\u003cINDEX\u003e`. +"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "prokarius"
        },
        "content": "   Expected: The loan is returned successfully as well. The display message details that the loan has been deleted, and gives a suggestion for the cost price of the duration of the loan."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "prokarius"
        },
        "content": ". Negative tests:"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "prokarius"
        },
        "content": ".. Test case: `return i/0` +"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "prokarius"
        },
        "content": "   Expected: No loan is returned. Error details shown in the status message, the message should say \"the specified index is invalid\" in this case. Status bar remains the same."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "prokarius"
        },
        "content": ".. Other incorrect `return` commands to try:"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "prokarius"
        },
        "content": "... `return`"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "prokarius"
        },
        "content": "... `return i/x` (where `x` is larger than the list size)"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "prokarius"
        },
        "content": "... `return i/aaa` (Where `aaa` is a string)"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "prokarius"
        },
        "content": "... `return i/y` (where `y` is the index of a loan that is not `ONGOING`). +"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d Summary functionality"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Use the `summary` command on various sizes of the LoanBook to test this functionality"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "prokarius"
        },
        "content": ". Create an empty LoanBook and run the `summary` command. +"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Expected: The summary should report the following:"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total loans: 0"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Loans in progress: 0"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Returned loans: 0"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total product loan time: 0 minutes"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total revenue: $0.00"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "prokarius"
        },
        "content": ". Add 1 loan with a rate of $30/hr. Run the `summary` command. +"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Expected: The displayed page should report the following:"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total loans: 1"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Loans in progress: 1"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Returned loans: 0"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total product loan time: 0 minutes"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total revenue: $0.00"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "prokarius"
        },
        "content": ". Add 3 more loans with rates $120/hr. Run the `summary` command. +"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Expected: The displayed page should report the following:"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total loans: 4"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Loans in progress: 4"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Returned loans: 0"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total product loan time: 0 minutes"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total revenue: $0.00"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "prokarius"
        },
        "content": ". Return the first loan that you have added from above after exactly 1 minute, and run the `summary` command. +"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Expected: The displayed page should report the following:"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total loans: 4"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Loans in progress: 3"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Returned loans: 1"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total product loan time: 1 minutes"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total revenue: $0.50"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "prokarius"
        },
        "content": ". Return 2 of the 3 loans that you have added from above after exactly 1 and 2 minutes from when you added them, respectively. Run the `summary` command. +"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Expected: The displayed page should report the following:"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total loans: 4"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Loans in progress: 1"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Returned loans: 3"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total product loan time: 4 minutes"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "prokarius"
        },
        "content": "** Total revenue: $6.50"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Sending Reminder Emails"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Prerequisites: Make sure the system is connected to the internet. The email must be gmail and its `Less secure apps` option is enabled."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ". Send a reminder email successfully. Please follow these steps:"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `add` a loan with a valid customer\u0027s email (but you own it of course)."
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* Execute the `checkemail` command. Then use the `setemail` command to set the sender\u0027s email."
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* After that, execute `remind x/correctpassword n/Name b/BikeId`."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Expected: Receive a success message \"Email sent!\" on the screen. A reminder email should have been sent from the sender\u0027s email (check the Sent folder). The same email should also be in the inbox of the customer\u0027s email account that you have set."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ". Negative tests:"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. Test case: `setemail \\WRONG_OLD_EMAIL@gmail.com \\NEW_EMAIL@gmail.com` +"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Expected: Failure message \"The old email address is wrong!\" will show. User\u0027s email is not changed."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. Test case: `setemail \\YOUR_EMAIL@gmail.com \\YOUR_EMAIL@gmail.com` +"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Expected: Failure message \"The old email and the new email cannot be the same!\" will show. User\u0027s email is not changed."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. Test case: `setemail \\OLD_EMAIL@gmail.com \\INVALID_NEW_EMAIL@outlook.com` +"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Expected: Failure message \"Your new email address is invalid! It must be a valid gmail!\" will show. User\u0027s email is not changed."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. Test case: `setemail \\OLD_EMAIL@gmail.com \\INVALID_NEW_EMAIL@gmail.com@gmail.com` +"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Expected: Failure message \"Your new email address is invalid! It must be a valid gmail!\" will show. User\u0027s email is not changed."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. Test case: `remind x/CORRECTPASSWORD n/NAME b/MISMATCHED_BIKE` +"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Expected: Failure message \"No loan contains both `NAME` and `MISMATCHED_BIKE`!\" will show. The email is not sent."
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. Test case: `remind x/CORRECTPASSWORD n/MISMATCHED_NAME b/BIKE` +"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Expected: Failure message \"No loan contains both `MISMATCHED_NAME` and `BIKE`!\" will show. The email is not sent."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. Test case: `remind x/CORRECTPASSWORD n/RETURNED_NAME b/RETURNED_BIKE` +"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Expected: Failure message \"That loan has already been returned!\" will show. The email is not sent."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. Test case: `remind x/CORRECTPASSWORD n/DELETED_NAME n/DELETED_BIKE` +"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Expected: Failure message \"That loan has been deleted!\" will show. The email is not sent."
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. Test case: `remind x/WRONGPASSWORD n/NAME b/BIKE` +"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Expected: Failure message \"Connection to your email failed! The password is wrong or you did not enable the `less secure app` option in your google account setting before you use remind command. Please refer to the User Guide!\" will show. The email is not sent."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. Test case: Make sure your email is set, disable its `less secure apps` setting and refresh the setting page. Execute `remind x/CORRECTPASSWORD n/NAME b/BIKE` +"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Expected: Failure message \"Connection to your email failed! The password is wrong or you did not enable `less secure app` in your google account setting before you use remind command. Please refer to the User Guide!\" will show. The email is not sent."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".. Other incorrect commands to try: `setemail`, `setemail x` (where x can be any string), `remind`, `remind x y z` (no prefix, x, y and z can be any string)."
      }
    ],
    "authorContributionMap": {
      "wn96": 53,
      "Kelly9373": 178,
      "prokarius": 260,
      "-": 610,
      "FongYuan": 355
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e uses events to communicate with components without needing a direct coupling. Also note how the link:{repoURL}/src/main/java/loanbook/commons/core/index/EventsCenter.java[`EventsCenter.java`] acts as an event dispatcher to facilitate communication between event creators and event consumers."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/loanbook/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the AddressBook app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add more assertions to AddressBook as you see fit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Add more logging to AddressBook as you see fit."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Analyze the AddressBook code/design to identify,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as ControlsFx. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "The link:{repoURL}/src/test/java/loanbook/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/loanbook/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Consider the link:{repoURL}/src/test/java/loanbook/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Test methods `prefsReadSave()` and `addressBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/loanbook/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/loanbook/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/loanbook/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/loanbook/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern* : The \u003c\u003cDeveloperGuide#events-driven-nature-of-the-design, event driven mechanism\u003e\u003e used by this code base employs the Observer pattern. For example, objects that are interested in events need to have the `@Subscribe` annotation in the class (this is similar to implementing an `\\\u003c\u003cObserver\u003e\u003e` interface) and register with the `EventsCenter`. When something noteworthy happens, an event is raised and the `EventsCenter` notifies all relevant subscribers. Unlike in the Observer pattern in which the `\\\u003c\u003cObservable\u003e\u003e` class is notifying all `\\\u003c\u003cObserver\u003e\u003e` objects, here the `\\\u003c\u003cObservable\u003e\u003e` classes simply raises an event and the `EventsCenter` takes care of the notifications."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/loanbook/ui/UiPart.java[`UiPart`] (e.g. `LoanListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "-": 256,
      "FongYuan": 10
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d LoanBook - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ":toc: left"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ":toc-title: UserGuide"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-F10-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "By: `Team F10-2`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wn96"
        },
        "content": "Have you ever seen your clients waiting angrily for 15 minutes before finally getting their rental bikes? Introducing Forever A-Loan, a lightweight Command Line Interface (CLI) application that revolutionizes the way bike loans are logged. Forever A-Loan promises to drastically decrease the time taken for bike rental shop owners to manage their inventories by leveraging on state of the art inventory management algorithms and the absence of a clunky Graphical User Interface (GUI) that hinders fast typists. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".  Download the latest `LoanBook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".  Run the .jar file. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ".  Type the command in the command box and press kbd:[ENTER] to execute it. +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[ENTER] will open the help window."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* *`list`* : List the status of the loanbook"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* **`add`**`p/John hp/12345678 e/john@abc.com r/3 o/Bicycle-007` : Loans Bicycle-007 to John at a rate of $3 per hour"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* **`delete`**`3` : deletes the 3rd loan shown in the current list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* *`reset`* : Reset the loanbook"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add o/OBJECT_NAME`, `OBJECT_NAME` is a parameter which can be used as `add o/Bicycle`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Provides a list of all commands together with a basic description, how-to-use and example usage for each command. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prokarius"
        },
        "content": "This will cause a pop up window to appear, containing a copy of this User Guide."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prokarius"
        },
        "content": "This is not the only way to get help! If you key in the commands with the wrong format, you will get a prompt in the display box which will give you a brief description of the command. It will also tell you how to use the command correctly."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Adding a loan: `add`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Adds a loan to the loan book with the following parameters, and displays the transaction along with a LOAN_ID to keep track of the loan. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Format: `add p/PERSON_NAME hp/PERSON_PHONE_NO e/PERSON_EMAIL r/RATE o/OBJECT_IDENTITY`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "NUMBER_LOANED and LOAN_OUT_PERIOD must be a positive integer"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "RATE is in dollars per hour."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "PERSON_PHONE_NO and PERSON_EMAIL should not be blank."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `add p/John hp/97626753 e/johnw@abc.com r/5 o/Bicycle-007`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `add p/James Tan hp/86661352 e/alabaaoe@xyz.com r/144 o/Bicycle-007`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prokarius"
        },
        "content": "The best part about this is you do not even need to key in the time that you created this loan! LoanBook does the timing for you! Simple isn\u0027t it?"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Listing all loans : `list`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Shows a list of all loans in the LoanBook. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Editing a loan : `edit`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "In case a wrong entry is keyed in, or the customer changes their mind, this command allows details of a loan entry to be edited. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Format: `edit i/LOAN_INDEX [p/PERSON_NAME] [hp/PERSON_PHONE_NO] [e/PERSON_EMAIL] [r/RATE] [o/OBJECT_IDENTITY]`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Edits the loan at the specified `LOAN_INDEX`. This LOAN_INDEX refers to the LOAN_INDEX number shown in the displayed loan list. The LOAN_INDEX *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "* When editing tags, the existing tags of the loan will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* `edit i/11 o/Bicycle-017` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "prokarius"
        },
        "content": "For the loan at index 11, changes the loaned object from whatever it was before to Bicycle-017."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* `edit i/9 p/James Tan hp/86661352 e/alabaaoe@xyz.com r/144` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "prokarius"
        },
        "content": "For the loan at index 9, changes the customer to James Tan, who has the specified contact details, to the rate of $144 per hour."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "prokarius"
        },
        "content": "We do not allow editing of the loan\u0027s start time or the return time because we want you to be able to use our application as an auditing tool. We hope that this can then simplify the management of your business."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Locating loans by key words: `search`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Returns a loan based on parameters of LOAN_INDEX, PERSON_NAME or OBJECT_IDENTITY. +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Format: `search [i/LOAN_INDEX] [p/PERSON_NAME] [o/OBJECT_IDENTITY]`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* Loans matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `search i/11037` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Searches for the loan with LOAN_INDEX 11037"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `search p/James Tan` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Searches for loans made by James Tan"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `search p/John Doe o/Bicycle-007` +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Searches for loans made by John Doe where the item loaned out is Bicycle-007"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Deleting the chosen loan from the loan book : `delete`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Delete the loan from the loan book. If you want to delete one loan, use `delete i/LOAN_INDEX x/CURRENT_PASSWORD`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wn96"
        },
        "content": "Due to `delete` modifying transectional summery, it is a critical command and hence elevation is required hence the password field. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Format: `delete i/LOAN_INDEX x/CURRENT_PASSWORD`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Deletes the loan at the specified `i/LOAN_INDEX`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wn96"
        },
        "content": "* Note that this does not reset `LOAN_ID`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wn96"
        },
        "content": "* Deletion will not occur if `CURRENT_PASSWORD` is incorrect."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wn96"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wn96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wn96"
        },
        "content": "The default password for the app is `a12345`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wn96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wn96"
        },
        "content": "* `delete i/11037 x/a12345` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Deletes the loan with that has been indexed at position 11037."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wn96"
        },
        "content": "\u003d\u003d\u003d Changing the password of the app: `setpass`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wn96"
        },
        "content": "Change the current password of the app to `NEW_PASSWORD`. This ensures that critical commands such as `delete` and `reset` may be performed by authorized personnels only. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wn96"
        },
        "content": "Format: `setpass CURRENT_PASSWORD NEW_PASSWORD`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wn96"
        },
        "content": "* Set the password of the app to `NEW_PASSWORD`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wn96"
        },
        "content": "* Password change will not occur if `CURRENT_PASSWORD` is incorrect."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wn96"
        },
        "content": "* `setpass a12345 n3wP4sS` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wn96"
        },
        "content": "Set the password of the app to `n3wP4sS`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Returning a loan : `return`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "prokarius"
        },
        "content": "What\u0027s the use of a LoanBook if you are unable to return the loans that you have? This is how you can do that! In fact, we see your pains trying to calculate the amount payable on a calculator, so we decided to help you out by doing all the number crunching for you."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "prokarius"
        },
        "content": "This command marks a loan as returned based on LOAN_INDEX and automatically prints out the amount payable. The amount payable will be prorated and rounded down to the nearest minute. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "prokarius"
        },
        "content": "We choose to do this because when we get down to seconds, the difference in the earnings you will get is going to be on the order of fraction of cents. We hope that by doing this, your business would not seem to be very petty about the money."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Also, this would be good for your business, as customers will not feel that they have been ripped off the cost of renting a bike for an extra minute just because you took 5 seconds to log their return details! :)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Do note that you will have to list out all the loans in order, or search for a particular loan that you would like to return. From there, you need to key in the index number of the loan as a parameter into this command."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Format: `return i/LOAN_INDEX`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Do be careful to note that it is the loan INDEX that you are keying into the program. Please do not key in the LoanID instead!"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "prokarius"
        },
        "content": "This command is currently not undoable. Please be careful to double check."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "prokarius"
        },
        "content": "We are working on fixing this issue! Do look forward to seeing this new functionality in the next release of LoanBook, version 2.0!"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `return i/11037` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Marks the loan with LOAN_INDEX 11037 as returned. Also automatically prints out the amount payable based on loan time and rate."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Hard reset the entire loan book : `reset`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Removes all the loans from the loan book and resets the LOAN_ID counter. +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Format: `reset`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "prokarius"
        },
        "content": "The difference between deleting all the loans and hard resetting the LoanBook is that when a loan is delete, you will still be able to search for it. However, the statistics of deleted loans do not appear in the `summary` command."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "prokarius"
        },
        "content": "**Hard resetting the LoanBook will remove ALL loans! Do this ar your own peril.**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Summarize all the transactions : `summary`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "prokarius"
        },
        "content": "Do you want to find out at a glance how much money your business has collected? Or maybe out of all the bicycles you have, how many are currently loaned out? Here\u0027s the command for you."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "prokarius"
        },
        "content": "This feature shows the total number of loans that are done and in progress. It also summarizes the loan status of each item, the number of times an object was loaned before."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "prokarius"
        },
        "content": "The `summary` function would display the statistics of all your loans in the display box on the right of the application. There, you will find the following statistics:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Total number of ongoing loans"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Total number of loans ever taken out"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Total amount of time all bikes have been loaned for"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Total revenue from the loan service"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Format: `summary`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "prokarius"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "prokarius"
        },
        "content": "The summary feature may take a while to run, especially when you have many loans that you have made in the past. Please allow about a second for it to process."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Check your email : `checkemail`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Checks whether you have set your email or not, and displays the censored email address if you have set it before. +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Format: `checkemail`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Set your email : `setemail`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Sets the email address to send reminder emails from. +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Format: `setemail OLDEMAIL NEWEMAIL`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `OLDEMAIL` is `default` if you have not set an email yet."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `OLDEMAIL` must be the same as the one you set last time."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `NEWEMAIL` cannot the same as `OLDEMAIL`."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `NEWEMAIL` must be a valid gmail."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Only gmail is accepted!"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `setemail default \\new_email@gmail.com`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `setemail \\old_email@gmail.com \\new_email@gmail.com`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d send reminder email : `remind`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Sends a reminder email to the customer. +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Format: `remind x/EMAILPASSWORD n/NAME b/BIKE`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `NAME` and `BIKE` must be from the same `ONGOING` loan."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `EMAILPASSWORD` must be correct."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*[IMPORTANT] Before using this command, please go to* https://www.google.com/settings/security/lesssecureapps[Less Secure Apps] *, enable it and refresh the Settings page!*"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `remind x/123456 n/Alex b/Bike001`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* `remind x/nscjhbdhv n/Peter Lee b/NewBike`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d\u003d Non-functional features :"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* Aliases to allow users to use the CLI with less keystrokes."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* Chainable commands. I.e. allow adding and deleting of items asynchronously."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** `add_items i/bicycle q/5 delete_items motorbike q/7`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* Auto complete"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Populate recently loaned items/users, depending on the input. i.e. add i/ should show a dropdown on the last 5 items used. User can type add i/5 to select the 5th LRU item."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** typing `del` followed by tab auto completes to `delete`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* Send reminder email to the borrower after a day of borrowing reminding them to return the bike."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "prokarius"
        },
        "content": "* Login authentication to ensure that unauthorised people do not delete the loans which they are not supposed to. Require password when deleting."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "////"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "////"
      }
    ],
    "authorContributionMap": {
      "wn96": 17,
      "Kelly9373": 94,
      "prokarius": 84,
      "-": 192,
      "FongYuan": 1
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Runs all tests in the `loanbook.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "Runs all non-GUI tests in the `loanbook`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "FongYuan": 2
    }
  },
  {
    "path": "docs/team/Xiaohang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d Liu Xiaohang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d PROJECT: LoanBook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "LoanBook is a desktop address book application used for managing inventories. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d Summary of contributions(haven\u0027t edited yet)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "---"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 84
    }
  },
  {
    "path": "docs/team/fongyuan.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "Lim Fong Yuan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d PROJECT: LoanBook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "---"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 84
    }
  },
  {
    "path": "docs/team/weineng.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wn96"
        },
        "content": "\u003d Ang Wei Neng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wn96"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wn96"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wn96"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wn96"
        },
        "content": "\u003d\u003d PROJECT: LoanBook"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wn96"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wn96"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wn96"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wn96"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wn96"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wn96"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wn96"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wn96"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wn96"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wn96"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wn96"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wn96"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wn96"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wn96"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wn96"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wn96"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wn96"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wn96"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wn96"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wn96"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wn96"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wn96"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wn96"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wn96"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wn96"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wn96"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wn96"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wn96"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wn96"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wn96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wn96"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wn96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wn96"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wn96"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wn96"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wn96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wn96"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wn96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wn96"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wn96"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wn96"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wn96"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wn96"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "wn96": 72
    }
  },
  {
    "path": "src/main/java/loanbook/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "FongYuan": 3
    }
  },
  {
    "path": "src/main/java/loanbook/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.storage.LoanBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.storage.XmlLoanBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing LoanBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBookStorage loanBookStorage \u003d new XmlLoanBookStorage(userPrefs.getLoanBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        storage \u003d new StorageManager(loanBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s loan book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * The data from the sample loan book will be used instead if {@code storage}\u0027s loan book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * or an empty loan book will be used instead if errors occur when reading {@code storage}\u0027s loan book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Optional\u003cReadOnlyLoanBook\u003e loanBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        ReadOnlyLoanBook initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            loanBookOptional \u003d storage.readLoanBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            if (!loanBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample LoanBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            initialData \u003d loanBookOptional.orElseGet(SampleDataUtil::getSampleLoanBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty LoanBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            initialData \u003d new LoanBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty LoanBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            initialData \u003d new LoanBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty LoanBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        logger.info(\"Starting LoanBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Loan Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 19,
      "-": 164,
      "FongYuan": 25
    }
  },
  {
    "path": "src/main/java/loanbook/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private String appTitle \u003d \"Loanbook App\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "xantho09": 1,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/commons/core/EventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.EventBus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCenter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static EventsCenter instance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EventBus eventBus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EventsCenter() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus \u003d new EventBus();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EventsCenter getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            instance \u003d new EventsCenter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.register(handler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.post(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowWidth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowHeight() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(windowWidth, o.windowWidth)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String LOG_FILE \u003d \"loanbook.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "-": 125,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_INVALID_LOAN_DISPLAYED_INDEX \u003d \"The loan index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_LOANS_LISTED_OVERVIEW \u003d \"%1$d loans listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static final String MESSAGE_INVALID_PASSWORD \u003d \"The password provided is incorrect!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static final String MESSAGE_INVALID_OLD_PASS \u003d \"The old password entered is incorrect!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static final String MESSAGE_SAME_AS_CURRENT_PASSWORD \u003d \"The password provided is same as before!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 3,
      "-": 9,
      "FongYuan": 3
    }
  },
  {
    "path": "src/main/java/loanbook/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message creation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/commons/events/model/LoanBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "/** Indicates the LoanBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class LoanBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public final ReadOnlyLoanBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public LoanBookChangedEvent(ReadOnlyLoanBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return \"number of loans \" + data.getLoanList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 16,
      "FongYuan": 3
    }
  },
  {
    "path": "src/main/java/loanbook/commons/events/storage/DataSavingExceptionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates an exception during a file saving"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataSavingExceptionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Exception exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataSavingExceptionEvent(Exception exception) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/commons/events/ui/BikeListPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Represents a selection change in the Bike List Panel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class BikeListPanelSelectionChangedEvent extends ListPanelSelectionChangedEvent\u003cBike\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public BikeListPanelSelectionChangedEvent(Bike newSelection) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(newSelection);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 14
    }
  },
  {
    "path": "src/main/java/loanbook/commons/events/ui/BikeListShowEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Represents a request to change the List Panel to view bikes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class BikeListShowEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 14
    }
  },
  {
    "path": "src/main/java/loanbook/commons/events/ui/ExitAppRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request for App termination"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitAppRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Indicates a request to jump to the list of loans"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "FongYuan": 4
    }
  },
  {
    "path": "src/main/java/loanbook/commons/events/ui/ListPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Represents a selection change in the List Panel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class ListPanelSelectionChangedEvent\u003cT\u003e extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final T newSelection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ListPanelSelectionChangedEvent(T newSelection) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public T getNewSelection() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 24
    }
  },
  {
    "path": "src/main/java/loanbook/commons/events/ui/LoanListPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Represents a selection change in the Loan List Panel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class LoanListPanelSelectionChangedEvent extends ListPanelSelectionChangedEvent\u003cLoan\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanListPanelSelectionChangedEvent(Loan newSelection) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(newSelection);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 14
    }
  },
  {
    "path": "src/main/java/loanbook/commons/events/ui/LoanListShowEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Represents a request to change the List Panel to view loans."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class LoanListShowEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 14
    }
  },
  {
    "path": "src/main/java/loanbook/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewResultAvailableEvent(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/commons/events/ui/ShowHelpRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ShowHelpRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "FongYuan": 3
    }
  },
  {
    "path": "src/main/java/loanbook/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 140,
      "FongYuan": 3
    }
  },
  {
    "path": "src/main/java/loanbook/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/commons/util/XmlUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Helps with reading from and writing to XML files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the xml data in the file as an object of the specified type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file           Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classToConvert The class corresponding to the xml data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if the file is empty or does not have the correct format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T getDataFromFile(Path file, Class\u003cT\u003e classToConvert)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(classToConvert);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!FileUtil.isFileExists(file)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Unmarshaller um \u003d context.createUnmarshaller();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((T) um.unmarshal(file.toFile()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the data in the file in xml format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *             Cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if there is an error during converting the data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               into xml and writing to the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveDataToFile(Path file, T data) throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Marshaller m \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        m.marshal(data, file.toFile());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/logic/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of bikes */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    ObservableList\u003cBike\u003e getFilteredBikeList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of loans */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    ObservableList\u003cLoan\u003e getFilteredLoanList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "FongYuan": 11
    }
  },
  {
    "path": "src/main/java/loanbook/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.LoanBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final LoanBookParser loanBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBookParser \u003d new LoanBookParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            Command command \u003d loanBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ObservableList\u003cBike\u003e getFilteredBikeList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return model.getFilteredBikeList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ObservableList\u003cLoan\u003e getFilteredLoanList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return model.getFilteredLoanList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 3,
      "-": 37,
      "FongYuan": 18
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/AddBikeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Adds a bike to the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class AddBikeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addbike\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a bike to the loan book. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        + PREFIX_NAME + \"NAME\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        + PREFIX_NAME + \"Bike001\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New bike added: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BIKE \u003d \"A bike with the same name already exists in the loan book\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final Bike toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Creates an AddBikeCommand to add the specified {@code Bike}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public AddBikeCommand(Bike bike) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(bike);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        toAdd \u003d bike;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (model.hasBike(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BIKE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.addBike(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.commitLoanBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            || (other instanceof AddBikeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddBikeCommand) other).toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 56
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_BIKE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_LOANRATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Adds a loan to the loan book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a loan to the loan book. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            + PREFIX_NRIC + \"NRIC \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            + PREFIX_BIKE + \"BIKE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            + PREFIX_LOANRATE + \"LOANRATE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            + PREFIX_NRIC + \"T0248272F \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            + PREFIX_BIKE + \"Bike001 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            + PREFIX_LOANRATE + \"3.5 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New loan added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LOAN \u003d \"This loan already exists in the loan book\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_BIKE_NOT_FOUND \u003d \"No bike with that name exists within the loan book\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final Loan toAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Loan}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public AddCommand(Loan loan) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(loan);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        toAdd \u003d loan;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (model.hasLoan(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Optional\u003cBike\u003e actualBike \u003d model.getBike(toAdd.getBike().getName().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!actualBike.isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new CommandException(MESSAGE_BIKE_NOT_FOUND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan actualLoan \u003d new Loan(toAdd, actualBike.get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.addLoan(actualLoan);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        model.commitLoanBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, actualLoan));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 10,
      "-": 43,
      "FongYuan": 32
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Clears the loans and resets the loan ID in the loan book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Loan book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.resetLoans();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        model.commitLoanBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 2,
      "-": 17,
      "FongYuan": 5
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "FongYuan": 4
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Deletes a loan identified using it\u0027s displayed index from the loan book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            + \": Deletes the loan identified by the index number used in the displayed loan list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wn96"
        },
        "content": "            + \"Requires a password for verification.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            + \"Parameters: \" + PREFIX_INDEX + \"INDEX (must be a positive integer) \" + PREFIX_PASSWORD + \"PASSWORD\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wn96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" i/1 x/a12345\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_DELETE_LOAN_SUCCESS \u003d \"Deleted Loan: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private final Password targetPassword;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public DeleteCommand(Index targetIndex, Password pass) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wn96"
        },
        "content": "        targetPassword \u003d pass;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cLoan\u003e lastShownList \u003d model.getFilteredLoanList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wn96"
        },
        "content": "        if (!Password.isSamePassword(model.getPass(), targetPassword)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wn96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PASSWORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wn96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loanToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.deleteLoan(loanToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        model.commitLoanBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_LOAN_SUCCESS, loanToDelete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wn96"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wn96"
        },
        "content": "                \u0026\u0026 targetPassword.equals(((DeleteCommand) other).targetPassword)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 12,
      "Kelly9373": 2,
      "-": 35,
      "FongYuan": 18
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_BIKE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_LOANRATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.model.Model.PREDICATE_SHOW_ALL_LOANS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanRate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanStatus;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Nric;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Edits the details of an existing loan in the loan book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the loan identified \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            + \"by the index number used in the displayed loan list. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            + \"[\" + PREFIX_NRIC + \"NRIC] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            + \"[\" + PREFIX_BIKE + \"BIKE] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            + \"[\" + PREFIX_LOANRATE + \"LOANRATE] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_EDIT_LOAN_SUCCESS \u003d \"Edited Loan: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LOAN \u003d \"This loan already exists in the loan book.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final EditLoanDescriptor editLoanDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param index of the loan in the filtered loan list to edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param editLoanDescriptor details to edit the loan with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public EditCommand(Index index, EditLoanDescriptor editLoanDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(editLoanDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.editLoanDescriptor \u003d new EditLoanDescriptor(editLoanDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cLoan\u003e lastShownList \u003d model.getFilteredLoanList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loanToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan editedLoan \u003d createEditedLoan(loanToEdit, editLoanDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!loanToEdit.isSame(editedLoan) \u0026\u0026 model.hasLoan(editedLoan)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.updateLoan(loanToEdit, editedLoan);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.updateFilteredLoanList(PREDICATE_SHOW_ALL_LOANS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        model.commitLoanBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_LOAN_SUCCESS, editedLoan));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Creates and returns a {@code Loan} with the details of {@code loanToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * edited with {@code editLoanDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static Loan createEditedLoan(Loan loanToEdit, EditLoanDescriptor editLoanDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assert loanToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Name updatedName \u003d editLoanDescriptor.getName().orElse(loanToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Nric updatedNric \u003d editLoanDescriptor.getNric().orElse(loanToEdit.getNric());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Phone updatedPhone \u003d editLoanDescriptor.getPhone().orElse(loanToEdit.getPhone());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Email updatedEmail \u003d editLoanDescriptor.getEmail().orElse(loanToEdit.getEmail());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Bike updatedBike \u003d editLoanDescriptor.getBike().orElse(loanToEdit.getBike());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanRate updatedRate \u003d editLoanDescriptor.getLoanRate().orElse(loanToEdit.getLoanRate());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime updatedStartTime \u003d editLoanDescriptor.getLoanStartTime().orElse(loanToEdit.getLoanStartTime());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime updatedEndTime \u003d editLoanDescriptor.getLoanEndTime().orElse(loanToEdit.getLoanEndTime());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editLoanDescriptor.getTags().orElse(loanToEdit.getTags());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanStatus updatedLoanStatus \u003d editLoanDescriptor.getLoanStatus().orElse(loanToEdit.getLoanStatus());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return new Loan(updatedName,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                updatedNric,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                updatedPhone,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                updatedEmail,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                updatedBike,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                updatedRate,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                updatedStartTime,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                updatedEndTime,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                updatedLoanStatus,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                updatedTags"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        );"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 editLoanDescriptor.equals(e.editLoanDescriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Stores the details to edit the loan with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * corresponding field value of the loan."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static class EditLoanDescriptor {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        private Bike bike;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        private LoanRate rate;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        private LoanTime startTime;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        private LoanTime endTime;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        private LoanStatus loanStatus;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public EditLoanDescriptor() {}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public EditLoanDescriptor(EditLoanDescriptor toCopy) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            setBike(toCopy.bike);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            setLoanRate(toCopy.rate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            setLoanStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            setLoanEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            setLoanStatus(toCopy.loanStatus);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wn96"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        public void setBike(Bike bike) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            this.bike \u003d bike;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        public Optional\u003cBike\u003e getBike() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return Optional.ofNullable(bike);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        public void setLoanRate(LoanRate rate) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            this.rate \u003d rate;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        public Optional\u003cLoanRate\u003e getLoanRate() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return Optional.ofNullable(rate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        public void setLoanStartTime(LoanTime time) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            this.startTime \u003d time;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        public Optional\u003cLoanTime\u003e getLoanStartTime() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        public void setLoanEndTime(LoanTime time) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            this.endTime \u003d time;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        public Optional\u003cLoanTime\u003e getLoanEndTime() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        public void setLoanStatus(LoanStatus loanStatus) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            this.loanStatus \u003d loanStatus;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        public Optional\u003cLoanStatus\u003e getLoanStatus() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            return Optional.ofNullable(loanStatus);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            if (!(other instanceof EditLoanDescriptor)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            EditLoanDescriptor e \u003d (EditLoanDescriptor) other;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                    \u0026\u0026 getNric().equals(e.getNric())"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                    \u0026\u0026 getBike().equals(e.getBike())"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                    \u0026\u0026 getLoanRate().equals(e.getLoanRate())"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 1,
      "Kelly9373": 52,
      "prokarius": 34,
      "-": 157,
      "FongYuan": 59
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Loan Book as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "-": 17,
      "FongYuan": 5
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Finds and lists all loans in loan book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all loans whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.updateFilteredLoanList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                String.format(Messages.MESSAGE_LOANS_LISTED_OVERVIEW, model.getFilteredLoanList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "-": 34,
      "FongYuan": 8
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "FongYuan": 5
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "FongYuan": 3
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/ListBikesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.model.Model.PREDICATE_SHOW_ALL_BIKES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.BikeListShowEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Lists all bikes in the loan book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class ListBikesCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listbikes\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all bikes\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.updateFilteredBikeList(PREDICATE_SHOW_ALL_BIKES);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EventsCenter.getInstance().post(new BikeListShowEvent());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 27
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.model.Model.PREDICATE_SHOW_ALL_LOANS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.LoanListShowEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Lists all loans in the loan book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all loans\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.updateFilteredLoanList(PREDICATE_SHOW_ALL_LOANS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EventsCenter.getInstance().post(new LoanListShowEvent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "-": 18,
      "FongYuan": 9
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.model.Model.PREDICATE_SHOW_ALL_LOANS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Reverts the {@code model}\u0027s loan book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (!model.canRedoLoanBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        model.redoLoanBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.updateFilteredLoanList(PREDICATE_SHOW_ALL_LOANS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 3,
      "-": 22,
      "FongYuan": 6
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Selects a loan identified using it\u0027s displayed index from the loan book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            + \": Selects the loan identified by the index number used in the displayed loan list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_SELECT_LOAN_SUCCESS \u003d \"Selected Loan: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cLoan\u003e filteredLoanList \u003d model.getFilteredLoanList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredLoanList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_LOAN_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "-": 41,
      "FongYuan": 15
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/SetPasswordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wn96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Password;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wn96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wn96"
        },
        "content": " * Set password to loan book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wn96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wn96"
        },
        "content": "public class SetPasswordCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setpass\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wn96"
        },
        "content": "            + \": Change the password of the loanbook.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wn96"
        },
        "content": "            + \"Parameters: OLDPASS NEWPASS\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wn96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" a12345 12345678\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static final String MESSAGE_CHANGE_PASSWORD_SUCCESS \u003d \"Password successfully changed!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private Password oldPassInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private Password newPassInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public SetPasswordCommand(Password oldPassInput, Password newPassInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wn96"
        },
        "content": "        requireNonNull(oldPassInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wn96"
        },
        "content": "        requireNonNull(newPassInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wn96"
        },
        "content": "        this.oldPassInput \u003d oldPassInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wn96"
        },
        "content": "        this.newPassInput \u003d newPassInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wn96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wn96"
        },
        "content": "        if (!Password.isSamePassword(model.getPass(), oldPassInput)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wn96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_OLD_PASS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wn96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wn96"
        },
        "content": "        if (Password.isSamePassword(model.getPass(), newPassInput)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wn96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_SAME_AS_CURRENT_PASSWORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wn96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wn96"
        },
        "content": "        model.setPass(newPassInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return new CommandResult(MESSAGE_CHANGE_PASSWORD_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wn96"
        },
        "content": "                || (other instanceof SetPasswordCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wn96"
        },
        "content": "                \u0026\u0026 newPassInput.equals(((SetPasswordCommand) other).newPassInput)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wn96"
        },
        "content": "                \u0026\u0026 oldPassInput.equals(((SetPasswordCommand) other).oldPassInput)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 49,
      "FongYuan": 6
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.model.Model.PREDICATE_SHOW_ALL_LOANS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Reverts the {@code model}\u0027s loan book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (!model.canUndoLoanBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        model.undoLoanBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.updateFilteredLoanList(PREDICATE_SHOW_ALL_LOANS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 3,
      "-": 22,
      "FongYuan": 6
    }
  },
  {
    "path": "src/main/java/loanbook/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/AddBikeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.AddBikeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Parses input arguments and creates a new AddBikeCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class AddBikeCommandParser implements Parser\u003cAddBikeCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBikeCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * and returns an AddBikeCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public AddBikeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBikeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike bike \u003d new Bike(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new AddBikeCommand(bike);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 47
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_BIKE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_LOANRATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanRate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Nric;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        PREFIX_NAME,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        PREFIX_NRIC,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        PREFIX_PHONE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        PREFIX_EMAIL,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        PREFIX_BIKE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        PREFIX_LOANRATE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (!arePrefixesPresent(argMultimap,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                PREFIX_NAME,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                PREFIX_NRIC,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                PREFIX_PHONE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                PREFIX_EMAIL,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                PREFIX_BIKE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                PREFIX_LOANRATE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Bike bike \u003d ParserUtil.parseBike(argMultimap.getValue(PREFIX_BIKE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanRate rate \u003d ParserUtil.parseLoanRate(argMultimap.getValue(PREFIX_LOANRATE).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Loan loan \u003d new Loan(name, nric, phone, email, bike, rate, tagList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new AddCommand(loan);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 1,
      "Kelly9373": 17,
      "prokarius": 1,
      "-": 40,
      "FongYuan": 20
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 147,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"x/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final Prefix PREFIX_BIKE \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final Prefix PREFIX_LOANRATE \u003d new Prefix(\"lr/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 2,
      "Kelly9373": 3,
      "-": 13,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wn96"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wn96"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wn96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wn96"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wn96"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wn96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wn96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return new DeleteCommand(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get()),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wn96"
        },
        "content": "                ParserUtil.parsePass(argMultimap.getValue(PREFIX_PASSWORD).get()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 17,
      "-": 18,
      "FongYuan": 6
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_BIKE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_LOANRATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.EditCommand.EditLoanDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wn96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        PREFIX_BIKE, PREFIX_LOANRATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditLoanDescriptor editLoanDescriptor \u003d new EditLoanDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            editLoanDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            editLoanDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            editLoanDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            editLoanDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BIKE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            editLoanDescriptor.setBike(ParserUtil.parseBike(argMultimap.getValue(PREFIX_BIKE).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOANRATE).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            editLoanDescriptor.setLoanRate(ParserUtil.parseLoanRate(argMultimap.getValue(PREFIX_LOANRATE).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editLoanDescriptor::setTags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!editLoanDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new EditCommand(index, editLoanDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 1,
      "Kelly9373": 6,
      "prokarius": 1,
      "-": 62,
      "FongYuan": 21
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "FongYuan": 5
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/LoanBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.AddBikeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ListBikesCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.SetPasswordCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class LoanBookParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        case AddBikeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return new AddBikeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wn96"
        },
        "content": "        case SetPasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wn96"
        },
        "content": "            return new SetPasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        case ListBikesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return new ListBikesCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 3,
      "Kelly9373": 1,
      "-": 74,
      "FongYuan": 26
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "FongYuan": 3
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanRate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Nric;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Parses a {@code String nric} into a {@code Nric}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @throws ParseException if the given {@code nric} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static Nric parseNric(String nric) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        requireNonNull(nric);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String trimmedNric \u003d nric.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wn96"
        },
        "content": "        if (!Nric.isValidNric(trimmedNric)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            throw new ParseException(Nric.MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return new Nric(trimmedNric);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * Parses a {@code String password} into a {@code Password}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * @throws ParseException if the given {@code Password} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static Password parsePass(String pass) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wn96"
        },
        "content": "        requireNonNull(pass);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String trimmedPass \u003d pass.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wn96"
        },
        "content": "        if (!Password.isValidPass(trimmedPass)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wn96"
        },
        "content": "            throw new ParseException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return new Password(trimmedPass);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Parses a {@code String bike} into a {@code Bike}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @throws ParseException if the given {@code bike} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static Bike parseBike(String bike) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        requireNonNull(bike);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String trimmedBike \u003d bike.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (!Name.isValidName(trimmedBike)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // return a dummy Bike object that contains the real bike\u0027s name. This will be converted to an actual"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // existing Bike in AddCommand.execute()."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return new Bike(new Name(trimmedBike));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Parses a {@code String rate} into a {@code LoanRate}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @throws ParseException if the given {@code rate} is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static LoanRate parseLoanRate(String rate) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        requireNonNull(rate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String trimmedLoanRate \u003d rate.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (!LoanRate.isValidRate(trimmedLoanRate)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            throw new ParseException(LoanRate.MESSAGE_LOANRATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return new LoanRate(trimmedLoanRate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Parses a {@code String time} into a {@code LoanTime}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static LoanTime parseLoanTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String trimmedLoanTime \u003d time.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (!LoanTime.isValidLoanTime(trimmedLoanTime)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            throw new ParseException(LoanTime.MESSAGE_LOANTIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return new LoanTime(trimmedLoanTime);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 9,
      "Kelly9373": 59,
      "-": 107,
      "FongYuan": 15
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "FongYuan": 5
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/SetPasswordCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.SetPasswordCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Password;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wn96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wn96"
        },
        "content": " * Parses input arguments and creates a new SetPasswordCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wn96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wn96"
        },
        "content": "public class SetPasswordCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wn96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public SetPasswordCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String[] parts \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wn96"
        },
        "content": "        if (parts.length !\u003d 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wn96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wn96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String oldPass \u003d parts[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String newPass \u003d parts[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wn96"
        },
        "content": "        if (!Password.isValidPass(newPass)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wn96"
        },
        "content": "            throw new ParseException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wn96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Password oldPassInput \u003d new Password(oldPass);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Password newPassInput \u003d new Password(newPass);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return new SetPasswordCommand(oldPassInput, newPassInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 31,
      "FongYuan": 5
    }
  },
  {
    "path": "src/main/java/loanbook/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/model/LoanBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static java.util.Objects.hash;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.UniqueBikeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanIdManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.UniqueLoanList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Wraps all data (bikes and loans) at the loanbook level."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Duplicates are not allowed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class LoanBook implements ReadOnlyLoanBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final UniqueBikeList bikes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final UniqueLoanList loans;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private final LoanIdManager loanIdManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        bikes \u003d new UniqueBikeList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loans \u003d new UniqueLoanList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        loanIdManager \u003d new LoanIdManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Creates an LoanBook using the Bikes and Loans in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public LoanBook(ReadOnlyLoanBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        replaceData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Replaces the contents of the bike list with {@code bikes}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code bikes} must not contain duplicate bikes."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setBikes(List\u003cBike\u003e bikes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.bikes.setAll(bikes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Replaces the contents of the loan list with {@code loans}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code loans} must not contain duplicate loans."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setLoans(List\u003cLoan\u003e loans) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.loans.setAll(loans);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Replaces the state of this LoanBooks\u0027s Loan ID Manager with the specified manager."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void setLoanIdManager(LoanIdManager loanIdManager) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        this.loanIdManager.setFromExistingManager(loanIdManager);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Replaces the existing data of this {@code LoanBook} with {@code newData}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void replaceData(ReadOnlyLoanBook newData) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        setBikes(newData.getBikeList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        setLoans(newData.getLoanList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        setLoanIdManager(newData.getLoanIdManager());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    //// bike-level operations"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns true if a bike with the same identity as {@code bike} exists in the loan book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean hasBike(Bike bike) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(bike);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return bikes.contains(bike);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns a bike in the list whose name matches {@code bikeName}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public Optional\u003cBike\u003e getBike(String bikeName) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return bikes.getBike(bikeName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Adds a bike to the loan book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * The bike must not already exist in the loan book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void addBike(Bike p) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        bikes.add(p);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Replaces the given bike {@code target} in the list with {@code editedBike}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code target} must exist in the loan book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * The bike identity of {@code editedBike} must not be the same as another existing bike in the loan book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void updateBike(Bike target, Bike editedBike) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(editedBike);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        bikes.set(target, editedBike);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Removes {@code key} from this {@code LoanBook}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code key} must exist in the loan book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void removeBike(Bike key) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        bikes.remove(key);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    //// loan-level operations"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns true if a loan with the same identity as {@code loan} exists in the loan book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean hasLoan(Loan loan) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(loan);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return loans.contains(loan);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Adds a loan to the loan book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * The loan must not already exist in the loan book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void addLoan(Loan p) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loans.add(p);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Replaces the given loan {@code target} in the list with {@code editedLoan}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code target} must exist in the loan book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * The loan identity of {@code editedLoan} must not be the same as another existing loan in the loan book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void updateLoan(Loan target, Loan editedLoan) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(editedLoan);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loans.set(target, editedLoan);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Removes {@code key} from this {@code LoanBook}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code key} must exist in the loan book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void removeLoan(Loan key) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loans.remove(key);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    //// Loan ID methods"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Gets the next available Loan ID."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public LoanId getNextAvailableLoanId() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return loanIdManager.getNextAvailableLoanId();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Checks if there is a next available Loan ID."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return true if there exists a next available loan ID."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public boolean hasNextAvailableLoanId() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return loanIdManager.hasNextAvailableLoanId();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Resets the Loan ID Manager."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void resetId() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.loanIdManager.reset();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return loans.asUnmodifiableObservableList().size() + \" loans, \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "             + bikes.asUnmodifiableObservableList().size() + \" bikes, \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "             + \"LoanIdManager: \" + loanIdManager.toString();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ObservableList\u003cBike\u003e getBikeList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return bikes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ObservableList\u003cLoan\u003e getLoanList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return loans.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public LoanIdManager getLoanIdManager() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return new LoanIdManager(loanIdManager.getLastUsedLoanId());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return true; // short circuit if same object"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!(other instanceof LoanBook)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        LoanBook otherLoanBook \u003d (LoanBook) other;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return loans.equals(otherLoanBook.loans)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 bikes.equals(otherLoanBook.bikes)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 loanIdManager.equals(otherLoanBook.loanIdManager);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // Use Objects.hash()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return hash(bikes, loans, loanIdManager);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 17,
      "-": 67,
      "xantho09": 33,
      "FongYuan": 114
    }
  },
  {
    "path": "src/main/java/loanbook/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    Predicate\u003cBike\u003e PREDICATE_SHOW_ALL_BIKES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    Predicate\u003cLoan\u003e PREDICATE_SHOW_ALL_LOANS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    void replaceData(ReadOnlyLoanBook newData);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /** Returns the LoanBook */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    ReadOnlyLoanBook getLoanBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns true if a bike with the same identity as {@code bike} exists in the loan book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    boolean hasBike(Bike bike);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns a bike in the list whose name matches {@code bikeName}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    Optional\u003cBike\u003e getBike(String bikeName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Adds the given bike."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code bike} must not already exist in the loan book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    void addBike(Bike bike);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Deletes the given bike."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * The bike must exist in the loan book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    void deleteBike(Bike target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Replaces the given bike {@code target} with {@code editedBike}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code target} must exist in the loan book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * The bike identity of {@code editedBike} must not be the same as another existing bike in the loan book."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    void updateBike(Bike target, Bike editedBike);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered bike list */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    ObservableList\u003cBike\u003e getFilteredBikeList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Replaces the contents of the bike list with {@code bikes}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code bikes} must not contain duplicate bikes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    void setBikes(List\u003cBike\u003e bikes);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Updates the filter of the filtered bike list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    void updateFilteredBikeList(Predicate\u003cBike\u003e predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns true if a loan with the same identity as {@code loan} exists in the loan book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    boolean hasLoan(Loan loan);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * Set password for the App"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wn96"
        },
        "content": "    void setPass(Password pass);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * Get hashed password for the App"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wn96"
        },
        "content": "    String getPass();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Get next available Loan ID."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    LoanId getNextAvailableId();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Checks if there exists a next available Loan ID."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    boolean hasNextAvailableId();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Resets the Loan ID Manager."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    void resetId();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Adds the given loan."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code loan} must not already exist in the loan book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    void addLoan(Loan loan);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Deletes the given loan."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * The loan must exist in the loan book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    void deleteLoan(Loan target);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Replaces the given loan {@code target} with {@code editedLoan}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code target} must exist in the loan book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * The loan identity of {@code editedLoan} must not be the same as another existing loan in the loan book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    void updateLoan(Loan target, Loan editedLoan);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Replaces the contents of the loan list with {@code loans}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code loans} must not contain duplicate loans."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    void setLoans(List\u003cLoan\u003e loans);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Clears the loan list and resets the loan ID."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    void resetLoans();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered loan list */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    ObservableList\u003cLoan\u003e getFilteredLoanList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Updates the filter of the filtered loan list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    void updateFilteredLoanList(Predicate\u003cLoan\u003e predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns true if the model has previous loan book states to restore."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    boolean canUndoLoanBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns true if the model has undone loan book states to restore."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    boolean canRedoLoanBook();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Restores the model\u0027s loan book to its previous state."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    void undoLoanBook();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Restores the model\u0027s loan book to its previously undone state."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    void redoLoanBook();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Saves the current loan book state for undo/redo."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    void commitLoanBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 10,
      "Kelly9373": 22,
      "-": 46,
      "xantho09": 10,
      "FongYuan": 76
    }
  },
  {
    "path": "src/main/java/loanbook/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.model.LoanBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Represents the in-memory model of the loan book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final VersionedLoanBook versionedLoanBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final FilteredList\u003cBike\u003e filteredBikes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final FilteredList\u003cLoan\u003e filteredLoans;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private final UserPrefs preference;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Initializes a ModelManager with the given loanBook and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public ModelManager(ReadOnlyLoanBook loanBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        requireAllNonNull(loanBook, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        logger.fine(\"Initializing with loan book: \" + loanBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook \u003d new VersionedLoanBook(loanBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        filteredBikes \u003d new FilteredList\u003c\u003e(versionedLoanBook.getBikeList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        filteredLoans \u003d new FilteredList\u003c\u003e(versionedLoanBook.getLoanList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wn96"
        },
        "content": "        preference \u003d userPrefs;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        this(new LoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void replaceData(ReadOnlyLoanBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        versionedLoanBook.replaceData(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        indicateLoanBookChanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public ReadOnlyLoanBook getLoanBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return versionedLoanBook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private void indicateLoanBookChanged() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        raise(new LoanBookChangedEvent(versionedLoanBook));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Bike List Accessors and Mutators \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean hasBike(Bike bike) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(bike);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return versionedLoanBook.hasBike(bike);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public Optional\u003cBike\u003e getBike(String bikeName) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return versionedLoanBook.getBike(bikeName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void addBike(Bike bike) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.addBike(bike);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        indicateLoanBookChanged();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void deleteBike(Bike target) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.removeBike(target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        indicateLoanBookChanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void updateBike(Bike target, Bike editedBike) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireAllNonNull(target, editedBike);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.updateBike(target, editedBike);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        indicateLoanBookChanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setBikes(List\u003cBike\u003e bikes) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        versionedLoanBook.setBikes(bikes);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        indicateLoanBookChanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Bike List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Bike} backed by the internal list of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code versionedLoanBook}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ObservableList\u003cBike\u003e getFilteredBikeList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredBikes);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void updateFilteredBikeList(Predicate\u003cBike\u003e predicate) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        filteredBikes.setPredicate(predicate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Loan List Accessors and Mutators \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean hasLoan(Loan loan) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(loan);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return versionedLoanBook.hasLoan(loan);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void addLoan(Loan loan) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.addLoan(loan);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        updateFilteredLoanList(PREDICATE_SHOW_ALL_LOANS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        indicateLoanBookChanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void deleteLoan(Loan target) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.removeLoan(target);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        indicateLoanBookChanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setLoans(List\u003cLoan\u003e loans) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        versionedLoanBook.setLoans(loans);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        indicateLoanBookChanged();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Clears the loan list and resets the loan ID."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void resetLoans() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        setLoans(Collections.emptyList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        resetId();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // Change has already been indicated in the above commands"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void updateLoan(Loan target, Loan editedLoan) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireAllNonNull(target, editedLoan);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.updateLoan(target, editedLoan);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        indicateLoanBookChanged();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Loan List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Loan} backed by the internal list of"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code versionedLoanBook}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ObservableList\u003cLoan\u003e getFilteredLoanList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredLoans);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void updateFilteredLoanList(Predicate\u003cLoan\u003e predicate) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        filteredLoans.setPredicate(predicate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Loan ID Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public LoanId getNextAvailableId() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId output \u003d versionedLoanBook.getNextAvailableLoanId();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        indicateLoanBookChanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public boolean hasNextAvailableId() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return versionedLoanBook.hasNextAvailableLoanId();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void resetId() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        versionedLoanBook.resetId();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        indicateLoanBookChanged();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public boolean canUndoLoanBook() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return versionedLoanBook.canUndo();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public boolean canRedoLoanBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return versionedLoanBook.canRedo();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void undoLoanBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.undo();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        indicateLoanBookChanged();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void redoLoanBook() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.redo();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        indicateLoanBookChanged();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void commitLoanBook() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.commit();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Password \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setPass(Password pass) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        preference.setPass(pass);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public String getPass() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return preference.getPass();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return versionedLoanBook.equals(other.versionedLoanBook)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 filteredBikes.equals(other.filteredBikes)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 filteredLoans.equals(other.filteredLoans);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 8,
      "Kelly9373": 44,
      "-": 92,
      "xantho09": 15,
      "FongYuan": 109
    }
  },
  {
    "path": "src/main/java/loanbook/model/Password.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wn96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wn96"
        },
        "content": " * Model a password object, performs hash encryption and decryption."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wn96"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wn96"
        },
        "content": "public class Password {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wn96"
        },
        "content": "            \"Password should be alphanumeric of at least 6 characters and up to 10 characters.\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public Password(String pass) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wn96"
        },
        "content": "        password \u003d Password.encrypt(pass);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * Check if hashed currentPassword and hashed oldPassInput is same when decrypted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * @param currentPass The current password that was previously set."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * @param oldPassInput Input to check if it is same as current password."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * @return Boolean of whether input matches with current password."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static boolean isSamePassword(String currentPass, Password oldPassInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String curr \u003d Password.decrypt(currentPass);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String toCheck \u003d oldPassInput.decrypt();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return curr.equals(toCheck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * Returns true if a given string is a valid password"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static boolean isValidPass(String objString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return objString.matches(\"^[a-zA-Z0-9]{6,10}$\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private static String decrypt(String pass) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return pass.substring(0, pass.length() - \"-encrypt\".length());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private String decrypt() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return password.substring(0, password.length() - \"-encrypt\".length());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private static String encrypt(String pass) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return pass + \"-encrypt\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * For saving to database"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * @return Hashed String"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public String hashedPassword() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wn96"
        },
        "content": "                || (other instanceof Password // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wn96"
        },
        "content": "                \u0026\u0026 decrypt(password).equals(((Password) other).decrypt())); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 62,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/model/ReadOnlyLoanBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanIdManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Unmodifiable view of an loan book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public interface ReadOnlyLoanBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns an unmodifiable view of the bikes list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * This list will not contain any duplicate bikes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    ObservableList\u003cBike\u003e getBikeList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns an unmodifiable view of the loans list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * This list will not contain any duplicate loans."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    ObservableList\u003cLoan\u003e getLoanList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Returns a copy of the Loan ID Manager."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * // TODO: Change this to an unmodifiable view"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    LoanIdManager getLoanIdManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 2,
      "-": 10,
      "xantho09": 6,
      "FongYuan": 13
    }
  },
  {
    "path": "src/main/java/loanbook/model/UniqueList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * A list that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * An item is considered unique by comparing using {@code T#isSame(T)}. As such, adding and updating of"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * items uses T#isSame(T) for equality so as to ensure that the item being added or updated is"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * unique in terms of identity in the UniqueList. However, the removal of an item uses T#equals(Object) so"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * as to ensure that the item with exactly the same fields will be removed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * @param \u003cT\u003e The type of item in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * @see T#isSame(T)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public abstract class UniqueList\u003cT extends UniqueListItem\u003cT\u003e\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Throws an exception signifying that a duplicate item has been detected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected abstract void throwDuplicateException() throws RuntimeException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Throws an exception signifying that a specified item cannot be found."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected abstract void throwNotFoundException() throws RuntimeException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns true if the list contains an equivalent item as the given argument."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Adds an item to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * The item must not already exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throwDuplicateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Replaces the item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * The {@code editedItem} must not be identical to another existing item in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void set(T target, T editedItem) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throwNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!target.isSame(editedItem) \u0026\u0026 contains(editedItem)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throwDuplicateException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        internalList.set(index, editedItem);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Removes the equivalent item from the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * The item must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throwNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Replaces the current list of items with the replacement."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param replacement A new list of items."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setAll(UniqueList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Replaces the contents of this list with {@code items}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setAll(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireAllNonNull(items);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!itemsAreUnique(items)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throwDuplicateException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        internalList.setAll(items);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return true; // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return false; // null objects are not equal to this object (which is non-null)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // Returns true if both objects are of the same class and holding the same value"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return other.getClass() \u003d\u003d this.getClass()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u0026\u0026 this.internalList.equals(((UniqueList) other).internalList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns true if {@code items} contains only unique items."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected boolean itemsAreUnique(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size() - 1; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                if (items.get(i).isSame(items.get(j))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 154
    }
  },
  {
    "path": "src/main/java/loanbook/model/UniqueListItem.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * An item that a {@code UniqueList} can implement."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * @param \u003cT\u003e The item type."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public interface UniqueListItem\u003cT extends UniqueListItem\u003cT\u003e\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Checks if both items are weakly identical. A UniqueList should not have two weakly identical items."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * \"Weakly identical\" is opposed to {@code equals()} because we may not want items to be exactly the same"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * to be considered unique."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param other The other item to compare against this item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @return true iff both items are weakly identical."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    boolean isSame(T other);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 18
    }
  },
  {
    "path": "src/main/java/loanbook/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Path loanBookFilePath \u003d Paths.get(\"data\" , \"loanbook.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wn96"
        },
        "content": "        password \u003d (new Password(\"a12345\")).hashedPassword(); // Default password is set to a12345"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public Path getLoanBookFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return loanBookFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void setLoanBookFilePath(Path loanBookFilePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        this.loanBookFilePath \u003d loanBookFilePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public void setPass(Password pass) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wn96"
        },
        "content": "        password \u003d pass.hashedPassword();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public String getPass() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wn96"
        },
        "content": "                \u0026\u0026 Objects.equals(password, o.password)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 Objects.equals(loanBookFilePath, o.loanBookFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return Objects.hash(guiSettings, loanBookFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wn96"
        },
        "content": "        sb.append(\"Password : \" + password);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + loanBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 10,
      "Kelly9373": 8,
      "-": 61,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/model/VersionedLoanBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * {@code LoanBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class VersionedLoanBook extends LoanBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final List\u003cReadOnlyLoanBook\u003e loanBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public VersionedLoanBook(ReadOnlyLoanBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBookStateList.add(new LoanBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Saves a copy of the current {@code LoanBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBookStateList.add(new LoanBook(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBookStateList.subList(currentStatePointer + 1, loanBookStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Restores the loan book to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        replaceData(loanBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Restores the loan book to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        replaceData(loanBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns true if {@code undo()} has loan book states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns true if {@code redo()} has loan book states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return currentStatePointer \u003c loanBookStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (!(other instanceof VersionedLoanBook)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook otherVersionedLoanBook \u003d (VersionedLoanBook) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return super.equals(otherVersionedLoanBook)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 loanBookStateList.equals(otherVersionedLoanBook.loanBookStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedLoanBook.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            super(\"Current state pointer at start of loanBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            super(\"Current state pointer at end of loanBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 106,
      "FongYuan": 3
    }
  },
  {
    "path": "src/main/java/loanbook/model/bike/Bike.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.bike;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UniqueListItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Represents a Bike in the loan book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class Bike implements UniqueListItem\u003cBike\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * The name of the Bike also doubles as its ID, i.e. it should be unique as it is used to identify this bike."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * For now, borrow the Name class from Loan. It can be its own separate class once the difference matters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final BikeStatus status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public Bike(Name name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.status \u003d BikeStatus.AVAILABLE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public BikeStatus getStatus() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean isAvailable() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return this.getStatus().equals(BikeStatus.AVAILABLE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns true iff both bikes have the same name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean isSame(Bike other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u0026\u0026 other.getName().equals(this.getName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns true if both bikes have the same identity and data fields."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * This defines a stronger notion of equality between two bikes."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!(other instanceof Bike)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike otherBike \u003d (Bike) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return otherBike.getName().equals(getName())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u0026\u0026 otherBike.getStatus().equals(getStatus());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return Objects.hash(name, status);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .append(\" Status: \").append(getStatus());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 93
    }
  },
  {
    "path": "src/main/java/loanbook/model/bike/BikeStatus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.bike;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Represents the status of a bike in the loan book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public enum BikeStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    AVAILABLE {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return \"Available\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    LOANED_OUT {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return \"Loaned Out\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 17
    }
  },
  {
    "path": "src/main/java/loanbook/model/bike/UniqueBikeList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.bike;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UniqueList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.exceptions.BikeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.exceptions.DuplicateBikeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * A UniqueList of bikes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class UniqueBikeList extends UniqueList\u003cBike\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected void throwDuplicateException() throws DuplicateBikeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new DuplicateBikeException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected void throwNotFoundException() throws BikeNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new BikeNotFoundException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns a bike in the list whose name matches the given name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param bikeName The name of the bike to search for."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @return An Optional Bike whose name matches the given name, or Optional.empty() if no match is found."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public Optional\u003cBike\u003e getBike(String bikeName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(bikeName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                .filter(bike -\u003e bike.getName().value.equals(bikeName))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FongYuan": 37
    }
  },
  {
    "path": "src/main/java/loanbook/model/bike/exceptions/BikeNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.bike.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Signals that the operation is unable to find the specified bike."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class BikeNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 6
    }
  },
  {
    "path": "src/main/java/loanbook/model/bike/exceptions/DuplicateBikeException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.bike.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Signals that the operation will result in duplicate Bikes (Bikes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class DuplicateBikeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public DuplicateBikeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(\"Operation would result in duplicate bikes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 11
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/Censor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * The API of Censor."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public interface Censor {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns the censored String."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public String getCensored();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Return censored part"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @param length the length of the censored part"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public String doCensoring(int length);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 17,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/DataField.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Represents a generic field that is directly describable as a string (called an objString)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * T: The type of the underlying value this DataField has."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Guarantees: immutable; is valid as per the isValid function passed to the constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public abstract class DataField\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Subclasses should have:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * - {@code static final String MESSAGE_CONSTRAINTS \u003d [string];}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *      A message to the user describing how a valid objString should be formatted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * - {@code public static boolean isValid(String objString) {...}}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *      Returns true iff the given objString is valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * - The constructor only needs to be of this format:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *     - arguments: {@code String objString}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *     - {@code { super(MESSAGE_CONSTRAINTS, [CLASS-NAME]::isValid, parser, objString); }}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *         - The parser converts the given objString into an object of type {@code T}, e.g. {@code Integer.parseInt}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *         - The parser must be guaranteed to work (i.e. output a valid value) on a valid objString"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public final T value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Constructs a {@code LoanField}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param msgConstraints A message to the user describing how a valid objString should be formatted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param validityPred A predicate to check if the given objString is valid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *                     Should typically be {@code [CLASS-NAME]::isValid}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param parser A function to convert the given objString to a value of type T."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param objString A non-null and valid string describing the value."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public DataField("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String msgConstraints,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Predicate\u003cString\u003e validityPred,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Function\u003cString, T\u003e parser,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String objString) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        requireNonNull(objString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        checkArgument(validityPred.test(objString), msgConstraints);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.value \u003d parser.apply(objString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return true; // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return false; // null objects are not equal to this object (which is non-null)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // Returns true if both objects are of the same class and holding the same value"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return other.getClass() \u003d\u003d this.getClass()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u0026\u0026 this.value.equals(((DataField) other).value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 73
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Represents a Loan\u0027s email in the loan book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class Email extends DataField\u003cString\u003e implements Censor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(MESSAGE_EMAIL_CONSTRAINTS, Email::isValidEmail, Function.identity(), email);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static boolean isValidEmail(String objString) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return objString.matches(LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public String getCensored() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        int index \u003d this.value.indexOf(\u0027@\u0027);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String censorPart \u003d doCensoring(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (censorPart.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return this.value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return this.value.charAt(0) + censorPart + this.value.substring(index - 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public String doCensoring(int length) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (length \u003c\u003d 3) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            StringBuffer sb \u003d new StringBuffer();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            for (int i \u003d 0; i \u003c length - 3; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                sb.append(\u0027x\u0027);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 20,
      "-": 41,
      "FongYuan": 7
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/Loan.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UniqueListItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.exceptions.SameLoanStatusException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Represents a Loan in the loan book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class Loan implements UniqueListItem\u003cLoan\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final Bike bike;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    //TODO: add LoanId filed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    //private final LoanId id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final LoanRate rate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private final LoanTime startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private final LoanTime endTime; // Note that endTime can be null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private LoanStatus loanStatus;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Every field except endTime must be present and not null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public Loan(Name name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Nric nric,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Phone phone,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Email email,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Bike bike,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                LoanRate rate,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                LoanTime startTime,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                LoanTime endTime,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                LoanStatus loanStatus,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wn96"
        },
        "content": "        requireAllNonNull(name, nric, phone, email, bike, rate, startTime, loanStatus, tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.bike \u003d bike;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.rate \u003d rate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.loanStatus \u003d loanStatus;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Constructor for adding a loan on the spot."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public Loan(Name name,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                Nric nric,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                Phone phone,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                Email email,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                Bike bike,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                LoanRate rate,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // Initialise the loan to be ongoing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wn96"
        },
        "content": "        this(name, nric, phone, email, bike, rate,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                new LoanTime(), null, LoanStatus.ONGOING, tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Constructor when you know the start and end times."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * If you know the end time, then the loan would be returned."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Every field except endTime must be present and not null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public Loan(Name name,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                Nric nric,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                Phone phone,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                Email email,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                Bike bike,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                LoanRate rate,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                LoanTime startTime,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                LoanTime endTime,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wn96"
        },
        "content": "        this(name, nric, phone, email, bike, rate,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                startTime, endTime, LoanStatus.RETURNED, tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Copies over an existing Loan and edits the Bike, for AddCommand."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public Loan(Loan other, Bike bike) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this(other.name,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            other.nric,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            other.phone,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            other.email,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            bike,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            other.rate,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            other.startTime,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            other.endTime,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            other.loanStatus,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            other.tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public LoanStatus getLoanStatus() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return loanStatus;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public Bike getBike() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return bike;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public LoanRate getLoanRate() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return rate;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public LoanTime getLoanStartTime() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public LoanTime getLoanEndTime() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Change the loan status to the newStatus as provided."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Throws SameLoanStatusException if the newStatus is the same as the previous status."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * @param newStatus"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * @return true if the function managed to complete."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * @throws SameLoanStatusException"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public boolean changeLoanStatus(LoanStatus newStatus) throws SameLoanStatusException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        if (loanStatus.equals(newStatus)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            throw new SameLoanStatusException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            loanStatus \u003d newStatus;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns true if both loans of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean isSame(Loan other) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 other.getName().equals(getName())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 other.getNric().equals(getNric())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 other.getBike().equals(getBike())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 (other.getEmail().equals(getEmail()) || other.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                || other.getLoanRate().equals(getLoanRate()) || other.getLoanStartTime().equals(getLoanStartTime()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns true if both loans have the same identity and data fields."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * This defines a stronger notion of equality between two loans."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!(other instanceof Loan)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan otherLoan \u003d (Loan) other;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return otherLoan.getName().equals(getName())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 otherLoan.getNric().equals(getNric())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 otherLoan.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 otherLoan.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                \u0026\u0026 otherLoan.getLoanStatus().equals(getLoanStatus())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 otherLoan.getBike().equals(getBike())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 otherLoan.getLoanRate().equals(getLoanRate())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 otherLoan.getTags().equals(getTags());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return Objects.hash(name, nric, phone, email, bike, rate, startTime, endTime, loanStatus, tags);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                .append(\" Nric: \")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .append(getLoanStatus())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                .append(\" Bike: \")"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                .append(getBike())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                .append(\" LoanRate: \")"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                .append(getLoanRate())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .append(\" LoanStartTime: \")"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .append(getLoanStartTime())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .append(\" LoanEndTime: \")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .append(getLoanEndTime())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 4,
      "Kelly9373": 38,
      "prokarius": 77,
      "-": 81,
      "FongYuan": 51
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/LoanId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xantho09"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Represents a Loan\u0027s ID in the loan book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xantho09"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLoanId(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xantho09"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xantho09"
        },
        "content": "public class LoanId extends DataField\u003cInteger\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public static final String MESSAGE_LOANID_CONSTRAINTS \u003d \"Loan ID must be a non-negative integer with at least 1 \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            + \"digit and no more than 9 digits.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /** A pattern that specifies \"between 1 to 9 digits\". */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[0-9]{1,9}\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final int MINIMUM_ID \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final int MAXIMUM_ID \u003d 999999999;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Constructs a {@code LoanId}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @param loanId A valid Loan ID."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public LoanId(String loanId) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(MESSAGE_LOANID_CONSTRAINTS, LoanId::isValidLoanId, Integer::parseInt, loanId);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Creates a new Loan ID from an integer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @param value The value of the Loan ID."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return A LoanID object with the specified integer as the value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public static LoanId fromInt(int value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return new LoanId(Integer.toString(value));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Checks if a given string is a valid Loan ID."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * A valid Loan ID is a non-negative integer with between 1 to 9 digits inclusive."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @param objString The string to test."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return true if the specified string is a valid Loan ID."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public static boolean isValidLoanId(String objString) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return objString.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Checks if a given integer is a valid Loan ID."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * A valid Loan ID is a non-negative integer with between 1 to 9 digits inclusive."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @param value The integer to test."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return true if the specified integer is a valid Loan ID."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public static boolean isValidLoanId(int value) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return MINIMUM_ID \u003c\u003d value \u0026\u0026 value \u003c\u003d MAXIMUM_ID;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Checks if this Loan ID is the maximum possible Loan ID."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return true if this Loan ID is the maximum possible Loan ID."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public boolean isMaximumId() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return value \u003d\u003d MAXIMUM_ID;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xantho09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "xantho09": 61,
      "FongYuan": 4
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/LoanIdManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xantho09"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xantho09"
        },
        "content": " * The LoanIdManager class keeps track of the running Loan ID and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xantho09"
        },
        "content": " * provides the next available ID when a new Loan is created."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xantho09"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xantho09"
        },
        "content": "public class LoanIdManager {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /** Represents the lack of a last used ID value. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final int NO_LAST_USED_ID_VALUE \u003d -1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /** The first Loan ID to create. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final int INITIAL_ID_VALUE \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private int lastUsedIdValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private LoanId lastUsedLoanId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Constructs a {@code LoanIdManager} that provides running Loan IDs starting from {@code INITIAL_ID_VALUE}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public LoanIdManager() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.reset();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Constructs a {@code LoanIdManager} that provides running Loan IDs starting after"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * the specified last used Loan ID."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @param lastUsedLoanId The last used Loan ID."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public LoanIdManager(LoanId lastUsedLoanId) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        setFromLoanId(lastUsedLoanId);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Resets the Loan ID Manager."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        lastUsedIdValue \u003d NO_LAST_USED_ID_VALUE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        lastUsedLoanId \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Sets the current state of this Loan ID Manager to match the state of the specified existing manager."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void setFromExistingManager(LoanIdManager existingManager) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        setFromLoanId(existingManager.getLastUsedLoanId());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Checks if this Loan ID Manager has a next available Loan ID."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return true if this Loan ID Manager has a next available Loan ID."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public boolean hasNextAvailableLoanId() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return lastUsedIdValue \u003c LoanId.MAXIMUM_ID;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Returns the next available Loan ID."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return The next available Loan ID."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public LoanId getNextAvailableLoanId() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!hasNextAvailableLoanId()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            throw new IllegalStateException(\"No more available Loan IDs\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Increment the running id value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        incrementLastUsedIdValue();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Create the output Loan ID"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId output \u003d LoanId.fromInt(lastUsedIdValue);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        lastUsedLoanId \u003d output;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Gets the last used Loan ID, if it exists."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return The last used Loan ID if it exists, null otherwise."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public LoanId getLastUsedLoanId() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return lastUsedLoanId;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Increment the last used ID value."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private void incrementLastUsedIdValue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        switch (lastUsedIdValue) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        case NO_LAST_USED_ID_VALUE:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // Set the value to the first possible Loan ID value."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            lastUsedIdValue \u003d INITIAL_ID_VALUE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        case LoanId.MAXIMUM_ID:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            throw new IllegalStateException(\"Attempt to increment the last used ID value when it has reached the \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xantho09"
        },
        "content": "                    + \"maximum possible value\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // Increment the integer value."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            ++lastUsedIdValue;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Set the current state of this Loan ID Manager from the specified last used Loan ID."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private void setFromLoanId(LoanId lastUsedLoanId) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        if (lastUsedLoanId \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            this.reset();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        } else if (lastUsedLoanId.isMaximumId()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            this.lastUsedLoanId \u003d lastUsedLoanId;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            lastUsedIdValue \u003d LoanId.MAXIMUM_ID;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        this.lastUsedLoanId \u003d lastUsedLoanId;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        lastUsedIdValue \u003d lastUsedLoanId.value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!(other instanceof LoanIdManager)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        LoanIdManager otherManager \u003d (LoanIdManager) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (this.lastUsedIdValue !\u003d otherManager.lastUsedIdValue) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // If the lastUsedIdValue is equal, all the fields should be equal."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (this.lastUsedLoanId \u003d\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            assert otherManager.lastUsedLoanId \u003d\u003d null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            assert this.lastUsedLoanId.equals(otherManager.lastUsedLoanId);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return \"(LastID: \" + lastUsedIdValue + \")\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xantho09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xantho09": 107,
      "FongYuan": 47
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/LoanRate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Represents a Loan\u0027s rate in the loan book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRate}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class LoanRate extends DataField\u003cDouble\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String MESSAGE_LOANRATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \"Rate should be not less than 0 and have at most 2 decimal places.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Constructs a {@code LoanRate}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @param rate A valid rate."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public LoanRate(String rate) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(MESSAGE_LOANRATE_CONSTRAINTS, LoanRate::isValidRate, Double::parseDouble, rate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns true if a given string is a valid rate."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static boolean isValidRate(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return test.matches(\"^(([1-9]\\\\d*|0)|(([0]\\\\.\\\\d{1,2}|[1-9][0-9]*\\\\.\\\\d{1,2})))$\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 23,
      "FongYuan": 4
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/LoanStatus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prokarius"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prokarius"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prokarius"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prokarius"
        },
        "content": " * Represents a LoanStatus in the LoanBook."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prokarius"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prokarius"
        },
        "content": "public enum LoanStatus {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    ONGOING {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            return \"Ongoing\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    },"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    RETURNED {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            return \"Returned\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    DELETED {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            return \"Deleted\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static final String MESSAGE_LOANSTATUS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            \"LoanStatuses can only take values \u0027ONGOING\u0027, \u0027RETURNED\u0027, or \u0027DELETED\u0027\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private static final Set\u003cString\u003e values \u003d new HashSet\u003c\u003e(LoanStatus.values().length);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        for (LoanStatus ls : LoanStatus.values()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            values.add(ls.name());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static boolean isValidLoanStatus(String string) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return values.contains(string);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prokarius"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prokarius": 39,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/LoanTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prokarius"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prokarius"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prokarius"
        },
        "content": " * Represents a timeStamp in the loan book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prokarius"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prokarius"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xantho09"
        },
        "content": "public class LoanTime extends DataField\u003cInstant\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static final String MESSAGE_LOANTIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            \"LoanTime specified has to be either in the format \u0027YYYY-MM-DD HH:mm\u0027 or \u0027HH:mm\u0027. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xantho09"
        },
        "content": "                    + \"HH should be in 24 hour format\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * 2 versions of the regex:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * A long version where a date is specified"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Format: YYYY-MM-DD HH:mm"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * A short version where only the time is specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Format HH:MM"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static final String LONG_LOANTIME_VALIDATION_REGEX \u003d \"^\\\\d{4}-\\\\d{2}-\\\\d{2} +\\\\d{2}:\\\\d{2}\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static final String SHORT_LOANTIME_VALIDATION_REGEX \u003d \"^\\\\d{2}:\\\\d{2}\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    // Default patterns for Date and Time"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final String DEFAULT_DATE_PATTERN \u003d \"uuuu-MM-dd\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final String DEFAULT_TIME_PATTERN \u003d \"HH:mm\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    // Formatters for Date and Time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final DateTimeFormatter DEFAULT_DATE_FORMATTER \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            .ofPattern(DEFAULT_DATE_PATTERN)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final DateTimeFormatter DEFAULT_TIME_FORMATTER \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            .ofPattern(DEFAULT_TIME_PATTERN)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    // Default pattern for DateTime"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final String DEFAULT_DATETIME_PATTERN \u003d \"uuuu-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Constructs a {@code LoanTime} with value set at current time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public LoanTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        super(MESSAGE_LOANTIME_CONSTRAINTS, emptyString -\u003e true, emptyString -\u003e Instant.now(), \"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Constructs an {@code LoanTime} by parsing the specified string."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @param loanTime A string to be parsed into a LoanTime"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public LoanTime(String loanTime) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(MESSAGE_LOANTIME_CONSTRAINTS, LoanTime::isValidLoanTime, LoanTime::parseInstant, loanTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Checks if a given string can be parsed into a valid LoanTime instance."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @param objString the string to test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return true if the string can be parsed into a valid LoanTime instance"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public static boolean isValidLoanTime(String objString) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // First, check if the format is correct."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        if (!isValidLongLoanTimeFormat(objString) \u0026\u0026 !isValidShortLoanTimeFormat(objString)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Next, try and check for each case."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        if (isValidLongLoanTimeFormat(objString)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // The string contains the Date and Time."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            String[] dateData \u003d objString.split(\" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assert dateData.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            String loanDateString \u003d dateData[0];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            String loanTimeString \u003d dateData[1];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // Check if the Date and Time are valid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return isValidDate(loanDateString) \u0026\u0026 isValidTime(loanTimeString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // The string only contains the Time. Check if the Time is valid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return isValidTime(objString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Checks if a given string is a valid long LoanTime."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @param test The string to test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return true if the string is a valid long LoanTime"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static boolean isValidLongLoanTimeFormat(String test) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return test.matches(LONG_LOANTIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Checks if a given string is a valid short LoanTime."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @param test The string to test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return true if the string is a valid short LoanTime"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static boolean isValidShortLoanTimeFormat(String test) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return test.matches(SHORT_LOANTIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Checks if a given string is a valid Date."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @param test The string to test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return true if the string is a valid Date"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            DEFAULT_DATE_FORMATTER.parse(test);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Checks if a given string is a valid Time."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @param test The string to test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return true if the string is a valid Time"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        String[] timeData \u003d test.split(\":\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assert timeData.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return (Integer.parseInt(timeData[0]) \u003c 24) \u0026\u0026 (Integer.parseInt(timeData[1]) \u003c 60);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Returns the difference in time given one other LoanTime object."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * This will be returned as a long of number of minutes."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Function returns 0 if the specified other LoanTime is before the current LoanTime."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * @param otherTime LoanTime object to be compared to."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public long loanTimeDifferenceMinutes(LoanTime otherTime) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return loanTimeDifferenceMinutes(this, otherTime);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Returns the difference in time given two LoanTime objects."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * This will be returned as a long of number of minutes."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Function returns 0 if the specified other LoanTime is before the current LoanTime."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * @param currentTime LoanTime object to signify start of time interval."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * @param otherTime   LoanTime object to signify end of time interval."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static long loanTimeDifferenceMinutes(LoanTime currentTime, LoanTime otherTime) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        long timeDifference \u003d Duration.between(currentTime.value, otherTime.value).toMinutes();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return (timeDifference \u003e\u003d 0) ? timeDifference : 0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Parses the specified string into an {@link Instant}. This method will use the current System"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * time zone during the parsing process."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @param objString The string to parse"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @return The parsed {@link Instant}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static Instant parseInstant(String objString) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // If the string is not valid, throw an exception."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        if (!isValidLoanTime(objString)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_LOANTIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Prepare the Date and Time fields."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LocalDate loanLocalDate;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LocalTime loanLocalTime;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Consider both cases."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        if (isValidLongLoanTimeFormat(objString)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // Split by spaces to separate the Date and Time strings"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            String[] dateData \u003d objString.split(\" \");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assert dateData.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // Obtain the Date and Time strings"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            String loanDateString \u003d dateData[0];"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            String loanTimeString \u003d dateData[1];"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // Parse the Date and Time strings."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            loanLocalDate \u003d LocalDate.parse(loanDateString, DEFAULT_DATE_FORMATTER);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            loanLocalTime \u003d LocalTime.parse(loanTimeString, DEFAULT_TIME_FORMATTER);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // If the string does not match the LongLoanTimeFormat,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // then it should match the ShortLoanTimeFormat."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assert isValidShortLoanTimeFormat(objString);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // The date used shall be today\u0027s date."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            loanLocalDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // Parse the Time string."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            loanLocalTime \u003d LocalTime.parse(objString, DEFAULT_TIME_FORMATTER);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Set the Time Zone as the System default time zone."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        ZonedDateTime loanZonedDateTime \u003d ZonedDateTime.of(loanLocalDate, loanLocalTime, ZoneId.systemDefault());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Convert the ZonedDateTime into an Instant."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return Instant.from(loanZonedDateTime);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Returns the YYYY-MM-DD, HH:MM representation of the stored LoanTime."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * The format returned is \"YYYY-MM-DD HH:MM\"."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Create a DateTimeFormatter to format the Instant."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xantho09"
        },
        "content": "                .ofPattern(DEFAULT_DATETIME_PATTERN) // Set the pattern to be the default pattern."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xantho09"
        },
        "content": "                .withZone(ZoneId.systemDefault()); // Set the time zone as the current time zone"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return dateTimeFormatter.format(value);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        if (!(other instanceof LoanTime)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return this.value.getEpochSecond() \u003d\u003d ((LoanTime) other).value.getEpochSecond();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "prokarius"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prokarius": 107,
      "xantho09": 135,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Represents a Loan\u0027s name in the loan book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class Name extends DataField\u003cString\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(MESSAGE_NAME_CONSTRAINTS, Name::isValidName, Function.identity(), name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static boolean isValidName(String objString) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "         * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return objString.matches(\"[\\\\p{Alnum}][\\\\p{Alnum} ]*\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 2,
      "-": 23,
      "FongYuan": 9
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Tests that a {@code Loan}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cLoan\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean test(Loan loan) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(loan.getName().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "FongYuan": 6
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/Nric.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wn96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wn96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wn96"
        },
        "content": " * Class that stores the NRIC of a person."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wn96"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class Nric implements Censor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static final String MESSAGE_NRIC_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wn96"
        },
        "content": "            \"NRIC should be Singapore issued. It may be blank. \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static final String NRIC_VALIDATION_REGEX \u003d \"^[ST]\\\\d{7}[A-JZ]|[FG]\\\\d{7}[K-NPQRTUWX]$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public final String nric;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * Constructs a {@code Nric}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wn96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * @param ic A valid nric."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public Nric(String ic) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wn96"
        },
        "content": "        requireNonNull(ic);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wn96"
        },
        "content": "        ic \u003d ic.toUpperCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wn96"
        },
        "content": "        checkArgument(isValidNric(ic), MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wn96"
        },
        "content": "        nric \u003d ic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * Returns true if a given string is a valid nric."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * Precondition: test is not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public static boolean isValidNric(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String ic \u003d test.toUpperCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wn96"
        },
        "content": "        if (!ic.matches(NRIC_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wn96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wn96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String prefix \u003d String.valueOf(ic.charAt(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String checksum \u003d String.valueOf(ic.charAt(8));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String digits \u003d ic.substring(1, 8);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wn96"
        },
        "content": "        int[] weights \u003d {2, 7, 6, 5, 4, 3, 2};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wn96"
        },
        "content": "        int sum \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // Generate checksum"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wn96"
        },
        "content": "        for (int i \u003d 0; i \u003c digits.length(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wn96"
        },
        "content": "            sum +\u003d Integer.parseInt(String.valueOf(digits.charAt(i))) * weights[i];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wn96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // Add 4 to IC issued in 21th century. This rule was designed by the Singapore government."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wn96"
        },
        "content": "        if (\"G\".equals(prefix) || \"T\".equals(prefix)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wn96"
        },
        "content": "            sum +\u003d 4;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wn96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wn96"
        },
        "content": "        if (\"S\".equals(prefix) || \"T\".equals(prefix)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wn96"
        },
        "content": "            String[] nricCheckDigits \u003d {\"J\", \"Z\", \"I\", \"H\", \"G\", \"F\", \"E\", \"D\", \"C\", \"B\", \"A\"};"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wn96"
        },
        "content": "            return nricCheckDigits[sum % 11].equals(checksum);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wn96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wn96"
        },
        "content": "            String[] finCheckDigits \u003d {\"X\", \"W\", \"U\", \"T\", \"R\", \"Q\", \"P\", \"N\", \"M\", \"L\", \"K\"};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wn96"
        },
        "content": "            return finCheckDigits[sum % 11].equals(checksum);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wn96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wn96"
        },
        "content": "                || (other instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wn96"
        },
        "content": "                \u0026\u0026 nric.equals(((Nric) other).nric)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return nric.hashCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public String getCensored() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String censorPart \u003d doCensoring(this.nric.length() - 4);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return this.nric.charAt(0) + censorPart + this.nric.substring(6);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public String doCensoring(int length) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        StringBuffer sb \u003d new StringBuffer();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            sb.append(\u0027x\u0027);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 80,
      "Kelly9373": 16,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Represents a Loan\u0027s phone number in the loan book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class Phone extends DataField\u003cString\u003e implements Censor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(MESSAGE_PHONE_CONSTRAINTS, Phone::isValidPhone, Function.identity(), phone);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static boolean isValidPhone(String objString) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return objString.matches(\"\\\\d{3,}\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public String getCensored() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String censorPart \u003d doCensoring(this.value.length());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (censorPart.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return this.value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return this.value.charAt(0) + censorPart + this.value.substring(this.value.length() - 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public String doCensoring(int length) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            StringBuffer sb \u003d new StringBuffer();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            for (int i \u003d 0; i \u003c length - 3; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                sb.append(\u0027x\u0027);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 24,
      "-": 22,
      "FongYuan": 6
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/UniqueLoanList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UniqueList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.exceptions.DuplicateLoanException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.exceptions.LoanNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * A UniqueList of loans."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class UniqueLoanList extends UniqueList\u003cLoan\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected void throwDuplicateException() throws DuplicateLoanException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new DuplicateLoanException();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected void throwNotFoundException() throws LoanNotFoundException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new LoanNotFoundException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 19
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/exceptions/DuplicateLoanException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Signals that the operation will result in duplicate Loans (Loans are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class DuplicateLoanException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public DuplicateLoanException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(\"Operation would result in duplicate loans\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 11
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/exceptions/LoanNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Signals that the operation is unable to find the specified loan."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class LoanNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 6
    }
  },
  {
    "path": "src/main/java/loanbook/model/loan/exceptions/SameLoanStatusException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prokarius"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prokarius"
        },
        "content": " * Signals that the operation will result in duplicate Loans (Loans are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prokarius"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prokarius"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prokarius"
        },
        "content": "public class SameLoanStatusException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public SameLoanStatusException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        super(\"Current loan has the same loan status!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prokarius"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prokarius": 10,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.DataField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Represents a Tag in the loan book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class Tag extends DataField\u003cString\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final Predicate\u003cString\u003e VALIDITY_PREDICATE \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        test -\u003e test.matches(\"\\\\p{Alnum}+\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(MESSAGE_TAG_CONSTRAINTS, VALIDITY_PREDICATE, Function.identity(), tagName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static boolean isValidTagName(String objString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return VALIDITY_PREDICATE.test(objString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return \u0027[\u0027 + value + \u0027]\u0027;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "-": 29,
      "FongYuan": 12
    }
  },
  {
    "path": "src/main/java/loanbook/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanRate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Contains utility methods for populating {@code LoanBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static Loan[] getSampleLoans() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new Loan[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            new Loan(new Name(\"Alex Yeoh\"), new Nric(\"S9013904E\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wn96"
        },
        "content": "                    new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                    new Bike(new Name(\"Bike001\")), new LoanRate(\"12.9\"), new LoanTime(\"2010-12-25 04:09\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                    new LoanTime(\"2010-12-25 05:09\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            new Loan(new Name(\"Bernice Yu\"), new Nric(\"T0213176A\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wn96"
        },
        "content": "                    new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                    new Bike(new Name(\"Bike002\")), new LoanRate(\"1.95\"), new LoanTime(\"2010-12-25 14:09\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                    new LoanTime(\"2010-12-26 08:34\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            new Loan(new Name(\"Charlotte Oliveiro\"), new Nric(\"F9576390K\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wn96"
        },
        "content": "                    new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                    new Bike(new Name(\"Silver Surfer\")), new LoanRate(\"3.90\"), new LoanTime(\"04:55\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                    new LoanTime(\"09:42\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            new Loan(new Name(\"David Li\"), new Nric(\"G0846554T\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wn96"
        },
        "content": "                    new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                    new Bike(new Name(\"Blue Ocean\")), new LoanRate(\"33\"), new LoanTime(\"12:21\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                    new LoanTime(\"19:21\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            new Loan(new Name(\"Irfan Ibrahim\"), new Nric(\"S8830104H\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wn96"
        },
        "content": "                    new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                    new Bike(new Name(\"Bike013\")), new LoanRate(\"6.7\"), new LoanTime(\"2018-01-30 15:10\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                    new LoanTime(\"2018-01-31 15:10\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            new Loan(new Name(\"Roy Balakrishnan\"), new Nric(\"S7588900C\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wn96"
        },
        "content": "                    new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                    new Bike(new Name(\"Bike099\")), new LoanRate(\"3.95\"), new LoanTime(\"2018-10-20 20:10\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                    new LoanTime(\"2018-01-30 11:17\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static ReadOnlyLoanBook getSampleLoanBook() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBook sampleAb \u003d new LoanBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        for (Loan sampleLoan : getSampleLoans()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            sampleAb.addLoan(sampleLoan);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 6,
      "Kelly9373": 15,
      "prokarius": 6,
      "-": 26,
      "FongYuan": 16
    }
  },
  {
    "path": "src/main/java/loanbook/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "FongYuan": 4
    }
  },
  {
    "path": "src/main/java/loanbook/storage/LoanBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Represents a storage for {@link LoanBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public interface LoanBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    Path getLoanBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns LoanBook data as a {@link ReadOnlyLoanBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    Optional\u003cReadOnlyLoanBook\u003e readLoanBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see #getLoanBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    Optional\u003cReadOnlyLoanBook\u003e readLoanBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Saves the given {@link ReadOnlyLoanBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @param loanBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    void saveLoanBook(ReadOnlyLoanBook loanBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see #saveLoanBook(ReadOnlyLoanBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    void saveLoanBook(ReadOnlyLoanBook loanBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 42,
      "FongYuan": 4
    }
  },
  {
    "path": "src/main/java/loanbook/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.model.LoanBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public interface Storage extends LoanBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    Path getLoanBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    Optional\u003cReadOnlyLoanBook\u003e readLoanBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    void saveLoanBook(ReadOnlyLoanBook loanBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Saves the current version of the Loan Book to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    void handleLoanBookChangedEvent(LoanBookChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 6,
      "-": 27,
      "FongYuan": 6
    }
  },
  {
    "path": "src/main/java/loanbook/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.model.LoanBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Manages storage of LoanBook data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private LoanBookStorage loanBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public StorageManager(LoanBookStorage loanBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        this.loanBookStorage \u003d loanBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LoanBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public Path getLoanBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return loanBookStorage.getLoanBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public Optional\u003cReadOnlyLoanBook\u003e readLoanBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return readLoanBook(loanBookStorage.getLoanBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public Optional\u003cReadOnlyLoanBook\u003e readLoanBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return loanBookStorage.readLoanBook(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void saveLoanBook(ReadOnlyLoanBook loanBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        saveLoanBook(loanBook, loanBookStorage.getLoanBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void saveLoanBook(ReadOnlyLoanBook loanBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBookStorage.saveLoanBook(loanBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void handleLoanBookChangedEvent(LoanBookChangedEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            saveLoanBook(event.data);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 17,
      "-": 68,
      "FongYuan": 8
    }
  },
  {
    "path": "src/main/java/loanbook/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Represents a storage for {@link loanbook.model.UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Saves the given {@link loanbook.model.UserPrefs} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "FongYuan": 5
    }
  },
  {
    "path": "src/main/java/loanbook/storage/XmlAdaptedBike.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * JAXB-friendly version of the Bike."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class XmlAdaptedBike {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Bike\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Constructs an XmlAdaptedBike."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public XmlAdaptedBike() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Constructs an {@code XmlAdaptedBike} with the given bike details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public XmlAdaptedBike(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Converts a given Bike into this class for JAXB use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedBike"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public XmlAdaptedBike(Bike source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        name \u003d source.getName().value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Throws an {@code IllegalValueException} if {@code name} does not exist or is not valid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void checkNameValid() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Converts this jaxb-friendly adapted bike object into the model\u0027s Bike object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted bike"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public Bike toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        checkNameValid();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new Bike(modelName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!(other instanceof XmlAdaptedBike)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlAdaptedBike otherBike \u003d (XmlAdaptedBike) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return Objects.equals(name, otherBike.name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 82
    }
  },
  {
    "path": "src/main/java/loanbook/storage/XmlAdaptedLoan.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanRate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Nric;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * JAXB-friendly version of the Loan."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class XmlAdaptedLoan {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Loan\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private String nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private String loanStatus;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private String bike;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private String rate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Constructs an XmlAdaptedLoan."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public XmlAdaptedLoan() {}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Constructs an {@code XmlAdaptedLoan} with the given loan details."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public XmlAdaptedLoan(String name,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                          String nric,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                          String phone,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                          String email,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                          String bike,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                          String rate,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String startTime,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String endTime,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String loanStatus,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                          List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        this.bike \u003d bike;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        this.rate \u003d rate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.loanStatus \u003d loanStatus;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.loanStatus \u003d loanStatus;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Constructs an {@code XmlAdaptedLoan} with the given loan details."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * This constructor is called if no loanStatus is given"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public XmlAdaptedLoan(String name,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String nric,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String phone,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String email,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String bike,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String rate,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String time,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wn96"
        },
        "content": "        this(name, nric, phone, email, bike, rate, time, \"ONGOING\", tagged);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Constructs an {@code XmlAdaptedLoan} with the given loan details."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * This constructor is called if no loanStatus is given"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public XmlAdaptedLoan(String name,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String nric,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String phone,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String email,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String bike,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String rate,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String startTime,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          String endTime,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                          List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wn96"
        },
        "content": "        this(name, nric, phone, email, bike, rate, startTime, endTime, \"ONGOING\", tagged);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Converts a given Loan into this class for JAXB use."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedLoan"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public XmlAdaptedLoan(Loan source) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        name \u003d source.getName().value;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        nric \u003d source.getNric().nric;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        bike \u003d source.getBike().getName().value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        rate \u003d source.getLoanRate().toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        startTime \u003d source.getLoanStartTime().toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        endTime \u003d source.getLoanEndTime() \u003d\u003d null ? null : source.getLoanEndTime().toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        loanStatus \u003d source.getLoanStatus().name();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Throws an {@code IllegalValueException} if {@code field} does not exist or is not valid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param field The data field of the Loan class to check for."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param fieldClass The class which the data field should belong to."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param isValid A predicate to check if {@code field} is valid."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param msgConstraints A message to display to the user if {@code field} is not valid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void checkFieldValid("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            String field,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            Class fieldClass,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            Predicate\u003cString\u003e isValid,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            String msgConstraints) throws IllegalValueException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (field \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, fieldClass.getSimpleName()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!isValid.test(field)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new IllegalValueException(msgConstraints);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Throws an {@code IllegalValueException} if {@code startTime} does not exist or is not valid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private void checkLoanStartTimeValid() throws IllegalValueException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                    LoanTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        if (!LoanTime.isValidLoanTime(startTime)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            throw new IllegalValueException(LoanTime.MESSAGE_LOANTIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Throws an {@code IllegalValueException} if {@code endTime} does not exist or is not valid."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private void checkLoanEndTimeValid() throws IllegalValueException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            return; // Because endTime can be null"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        if (!LoanTime.isValidLoanTime(endTime)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            throw new IllegalValueException(LoanTime.MESSAGE_LOANTIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Converts this jaxb-friendly adapted loan object into the model\u0027s Loan object."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted loan"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public Loan toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        final List\u003cTag\u003e loanTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            loanTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        checkFieldValid(name, Name.class, Name::isValidName, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        checkFieldValid(nric, Nric.class, Nric::isValidNric, Nric.MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        final Nric modelNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        checkFieldValid(phone, Phone.class, Phone::isValidPhone, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        checkFieldValid(email, Email.class, Email::isValidEmail, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        checkFieldValid(loanStatus, LoanStatus.class, LoanStatus::isValidLoanStatus,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            LoanStatus.MESSAGE_LOANSTATUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        final LoanStatus modelLoanStatus \u003d LoanStatus.valueOf(loanStatus);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        checkFieldValid(bike, Bike.class, Name::isValidName, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        final Bike modelBike \u003d new Bike(new Name(bike));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        checkFieldValid(rate, LoanRate.class, LoanRate::isValidRate, LoanRate.MESSAGE_LOANRATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        final LoanRate modelRate \u003d new LoanRate(rate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        checkLoanStartTimeValid();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        final LoanTime modelStartTime \u003d new LoanTime(startTime);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        checkLoanEndTimeValid();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        final LoanTime modelEndTime \u003d endTime \u003d\u003d null ? null : new LoanTime(endTime);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(loanTags);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return new Loan(modelName,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                modelNric,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                modelPhone,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                modelEmail,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                modelBike,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                modelRate,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                modelStartTime,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                modelEndTime,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                modelLoanStatus,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                modelTags"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        );"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!(other instanceof XmlAdaptedLoan)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlAdaptedLoan otherLoan \u003d (XmlAdaptedLoan) other;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return Objects.equals(name, otherLoan.name)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 Objects.equals(nric, otherLoan.nric)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherLoan.phone)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherLoan.email)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 Objects.equals(bike, otherLoan.bike)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 Objects.equals(rate, otherLoan.rate)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                \u0026\u0026 Objects.equals(startTime, otherLoan.startTime)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                \u0026\u0026 Objects.equals(endTime, otherLoan.endTime)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 tagged.equals(otherLoan.tagged);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 2,
      "Kelly9373": 40,
      "prokarius": 84,
      "-": 67,
      "FongYuan": 71
    }
  },
  {
    "path": "src/main/java/loanbook/storage/XmlAdaptedLoanId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xantho09"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xantho09"
        },
        "content": " * JAXB-friendly adapted version of the LoanId."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xantho09"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xantho09"
        },
        "content": "public class XmlAdaptedLoanId {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private int loanId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Constructs an XmlAdaptedLoanId."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public XmlAdaptedLoanId() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Constructs an {@code XmlAdaptedLoanId} with the given loan ID as a String."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @param loanId The specified Loan ID as a string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public XmlAdaptedLoanId(int loanId) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        this.loanId \u003d loanId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public XmlAdaptedLoanId(LoanId source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        loanId \u003d source.value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Converts this JAXB-friendly adapted Loan ID object into the model\u0027s LoanId object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Loan ID."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public LoanId toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        if (!LoanId.isValidLoanId(loanId)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            throw new IllegalValueException(LoanId.MESSAGE_LOANID_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return LoanId.fromInt(loanId);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        if (!(other instanceof XmlAdaptedLoanId)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        return loanId \u003d\u003d (((XmlAdaptedLoanId) other).loanId);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xantho09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xantho09": 57,
      "FongYuan": 3
    }
  },
  {
    "path": "src/main/java/loanbook/storage/XmlAdaptedLoanIdManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanIdManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xantho09"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xantho09"
        },
        "content": " * JAXB-friendly adapted version of the LoanIdManager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xantho09"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xantho09"
        },
        "content": "public class XmlAdaptedLoanIdManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private XmlAdaptedLoanId lastUsedLoanId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Constructs an XmlAdaptedLoanIdManager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public XmlAdaptedLoanIdManager() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Constructs an {@code XmlAdaptedLoanIdManager} with the given last used Loan ID."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public XmlAdaptedLoanIdManager(XmlAdaptedLoanId lastUsedLoanId) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        this.lastUsedLoanId \u003d lastUsedLoanId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Constructs an {@code XmlAdaptedLoanIdManager} from the given Loan ID Manager for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Future changes to the specified LoanIdManager will not affect this instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public XmlAdaptedLoanIdManager(LoanIdManager source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId lastUsedLoanIdModel \u003d source.getLastUsedLoanId();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        if (lastUsedLoanIdModel \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // If the source LoanIdManager has no last used Loan ID,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // this instance will also have no last used Loan ID."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            lastUsedLoanId \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // Otherwise, convert the last used Loan ID into an"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // XmlAdaptedLoanId object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            lastUsedLoanId \u003d new XmlAdaptedLoanId(lastUsedLoanIdModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * Converts this JAXB-friendly adapted Loan ID Manager object into the model\u0027s LoanIdManager object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated during the conversion"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xantho09"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public LoanIdManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        if (lastUsedLoanId \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return new LoanIdManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return new LoanIdManager(lastUsedLoanId.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        if (!(other instanceof XmlAdaptedLoanIdManager)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        if (lastUsedLoanId \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return ((XmlAdaptedLoanIdManager) other).lastUsedLoanId \u003d\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return lastUsedLoanId.equals(((XmlAdaptedLoanIdManager) other).lastUsedLoanId);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xantho09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xantho09": 72,
      "FongYuan": 4
    }
  },
  {
    "path": "src/main/java/loanbook/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        tagName \u003d source.value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted loan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "FongYuan": 5
    }
  },
  {
    "path": "src/main/java/loanbook/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Stores loanbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Saves the given loanbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableLoanBook loanBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            XmlUtil.saveDataToFile(file, loanBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns loan book in the file or an empty loan book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static XmlSerializableLoanBook loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableLoanBook.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 7,
      "-": 29,
      "FongYuan": 3
    }
  },
  {
    "path": "src/main/java/loanbook/storage/XmlLoanBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * A class to access LoanBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class XmlLoanBookStorage implements LoanBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlLoanBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public XmlLoanBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public Path getLoanBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public Optional\u003cReadOnlyLoanBook\u003e readLoanBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return readLoanBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Similar to {@link #readLoanBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public Optional\u003cReadOnlyLoanBook\u003e readLoanBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            logger.info(\"LoanBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlSerializableLoanBook xmlLoanBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return Optional.of(xmlLoanBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void saveLoanBook(ReadOnlyLoanBook loanBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        saveLoanBook(loanBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Similar to {@link #saveLoanBook(ReadOnlyLoanBook)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void saveLoanBook(ReadOnlyLoanBook loanBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        requireNonNull(loanBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableLoanBook(loanBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 18,
      "-": 56,
      "FongYuan": 6
    }
  },
  {
    "path": "src/main/java/loanbook/storage/XmlSerializableLoanBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * An Immutable LoanBook that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "@XmlRootElement(name \u003d \"loanbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class XmlSerializableLoanBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BIKE \u003d \"Bikes list contains duplicate bike(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LOAN \u003d \"Loans list contains duplicate loan(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private List\u003cXmlAdaptedBike\u003e bikes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private List\u003cXmlAdaptedLoan\u003e loans;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private XmlAdaptedLoanIdManager loanIdManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Creates an empty XmlSerializableLoanBook."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public XmlSerializableLoanBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        bikes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        loanIdManager \u003d new XmlAdaptedLoanIdManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public XmlSerializableLoanBook(ReadOnlyLoanBook src) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        bikes.addAll(src.getBikeList().stream().map(XmlAdaptedBike::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loans.addAll(src.getLoanList().stream().map(XmlAdaptedLoan::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        loanIdManager \u003d new XmlAdaptedLoanIdManager(src.getLoanIdManager());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Converts this loanbook into the model\u0027s {@code LoanBook} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code XmlAdaptedBike} or {@code XmlAdaptedLoan}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public LoanBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBook loanBook \u003d new LoanBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        for (XmlAdaptedBike p : bikes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            Bike bike \u003d p.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            if (loanBook.hasBike(bike)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BIKE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            loanBook.addBike(bike);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        for (XmlAdaptedLoan p : loans) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            Loan loan \u003d p.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            if (loanBook.hasLoan(loan)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            loanBook.addLoan(loan);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        loanBook.setLoanIdManager(loanIdManager.toModelType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return loanBook;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        if (!(other instanceof XmlSerializableLoanBook)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlSerializableLoanBook otherXmlLoanBook \u003d (XmlSerializableLoanBook) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return bikes.equals(otherXmlLoanBook.bikes)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u0026\u0026 loans.equals(otherXmlLoanBook.loans)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u0026\u0026 loanIdManager.equals(otherXmlLoanBook.loanIdManager);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 13,
      "-": 43,
      "xantho09": 6,
      "FongYuan": 31
    }
  },
  {
    "path": "src/main/java/loanbook/ui/BikeCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * An UI component that displays information of a {@code Bike}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class BikeCard extends ListCard\u003cBike\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final String FXML \u003d \"BikeCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public BikeCard(Bike bike, int displayedIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(FXML, bike, displayedIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        name.setText(bike.getName().value);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 21
    }
  },
  {
    "path": "src/main/java/loanbook/ui/BikeListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.BikeListPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Panel containing the list of bikes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class BikeListPanel extends ListPanel\u003cBike\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public BikeListPanel(ObservableList\u003cBike\u003e bikeList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(BikeListPanel.class, bikeList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected void setSelectionChangeEvent(Bike oldValue, Bike newValue) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        logger.fine(\"Selection in bike list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        raise(new BikeListPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected BikeCard getNewCard(Bike bike, int displayedIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new BikeCard(bike, displayedIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 26
    }
  },
  {
    "path": "src/main/java/loanbook/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.LoanListPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void loadLoanPage(Loan loan) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + loan.getName().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void handleLoanListPanelSelectionChangedEvent(LoanListPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loadLoanPage(event.getNewSelection());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "FongYuan": 9
    }
  },
  {
    "path": "src/main/java/loanbook/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 143,
      "FongYuan": 8
    }
  },
  {
    "path": "src/main/java/loanbook/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "FongYuan": 2
    }
  },
  {
    "path": "src/main/java/loanbook/ui/ListCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * A UI component that displays information of an object of type {@code T}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public abstract class ListCard\u003cT\u003e extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public final T item;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ListCard(String fxmlFile, T item, int displayedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(fxmlFile);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        id.setText(Integer.toString(displayedIndex));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return true; // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return false; // null objects are not equal to this object (which is non-null)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (other.getClass() !\u003d this.getClass()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return false; // These objects are not of the same type"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // returns true iff both ListCards have the same ID and refer to the same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ListCard card \u003d (ListCard) other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FongYuan": 53
    }
  },
  {
    "path": "src/main/java/loanbook/ui/ListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Panel containing a list of items."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public abstract class ListPanel\u003cT\u003e extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Since all list panels occupy the same space and have the same formatting, They all share one FXML file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected final Logger logger;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected ListView\u003cT\u003e listView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ListPanel(Class thisClass, ObservableList\u003cT\u003e list) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        logger \u003d LogsCenter.getLogger(thisClass);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        setConnections(list);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void setConnections(ObservableList\u003cT\u003e list) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        listView.setItems(list);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        listView.setCellFactory(listView -\u003e new ListViewCell());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected abstract void setSelectionChangeEvent(T oldValue, T newValue);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        listView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                    setSelectionChangeEvent(oldValue, newValue);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Scrolls to the {@code ListCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            listView.scrollTo(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            listView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected abstract ListCard\u003cT\u003e getNewCard(T item, int displayedIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code T} object using a {@code ListCard\u003cT\u003e}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    class ListViewCell extends ListCell\u003cT\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        protected void updateItem(T item, boolean empty) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                ListCard\u003cT\u003e card \u003d getNewCard(item, getIndex() + 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                setGraphic(card.getRoot());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 90
    }
  },
  {
    "path": "src/main/java/loanbook/ui/LoanCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * An UI component that displays information of a {@code Loan}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class LoanCard extends ListCard\u003cLoan\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final String FXML \u003d \"LoanListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wn96"
        },
        "content": "        {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Label nric;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Label bike;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Label rate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanCard(Loan loan, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(FXML, loan, displayedIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        name.setText(loan.getName().value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        nric.setText(loan.getNric().getCensored());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        phone.setText(loan.getPhone().getCensored());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        email.setText(loan.getEmail().getCensored());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        bike.setText(loan.getBike().getName().value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        rate.setText(loan.getLoanRate().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        startTime.setText(loan.getLoanStartTime().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        // TODO Set the endtime to display correctly here"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        endTime.setText(\"PLACEHOLDER\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wn96"
        },
        "content": "        initTags(loan);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Creates the tag labels for {@code loan}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private void initTags(Loan loan) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wn96"
        },
        "content": "        loan.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wn96"
        },
        "content": "            Label tagLabel \u003d new Label(tag.value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wn96"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.value));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wn96"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wn96"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 22,
      "Kelly9373": 12,
      "prokarius": 6,
      "-": 20,
      "FongYuan": 9
    }
  },
  {
    "path": "src/main/java/loanbook/ui/LoanListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.LoanListPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Panel containing the list of loans."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class LoanListPanel extends ListPanel\u003cLoan\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanListPanel(ObservableList\u003cLoan\u003e loanList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(LoanListPanel.class, loanList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected void setSelectionChangeEvent(Loan oldValue, Loan newValue) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        logger.fine(\"Selection in loan list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        raise(new LoanListPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected LoanCard getNewCard(Loan loan, int displayedIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new LoanCard(loan, displayedIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 27
    }
  },
  {
    "path": "src/main/java/loanbook/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.BikeListShowEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.LoanListShowEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private ListPanel listPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private BikeListPanel bikeListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private LoanListPanel loanListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void showBikeList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        listPanel \u003d bikeListPanel;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        listPanelPlaceholder.getChildren().setAll(bikeListPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void showLoanList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        listPanel \u003d loanListPanel;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        listPanelPlaceholder.getChildren().setAll(loanListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        bikeListPanel \u003d new BikeListPanel(logic.getFilteredBikeList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loanListPanel \u003d new LoanListPanel(logic.getFilteredLoanList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getLoanBookFilePath());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ListPanel getListPanel() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return listPanel;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void handleBikeListShowEvent(BikeListShowEvent event) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showBikeList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void handleLoanListShowEvent(LoanListShowEvent event) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanList();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "-": 188,
      "FongYuan": 40
    }
  },
  {
    "path": "src/main/java/loanbook/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "FongYuan": 3
    }
  },
  {
    "path": "src/main/java/loanbook/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.model.LoanBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void handleLoanBookChangedEvent(LoanBookChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "-": 79,
      "FongYuan": 3
    }
  },
  {
    "path": "src/main/java/loanbook/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Stops the UI. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/java/loanbook/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "FongYuan": 9
    }
  },
  {
    "path": "src/main/java/loanbook/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 102,
      "FongYuan": 4
    }
  },
  {
    "path": "src/main/resources/view/BikeCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                        \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\". \"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                                \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                            \u003c/font\u003e\u003c/Text\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 51
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "#filterField, #loanListPanel, #loanWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wn96"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wn96"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wn96"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wn96"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wn96"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wn96"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wn96"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wn96"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wn96"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wn96"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "wn96"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 50,
      "-": 350,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/resources/view/ListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "  \u003cListView fx:id\u003d\"listView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "FongYuan": 1
    }
  },
  {
    "path": "src/main/resources/view/LoanListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                  \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Loan ID: \"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                     \u003c/font\u003e\u003c/Text\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "               \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Bike: \" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003cLabel fx:id\u003d\"bike\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bike\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "               \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Loaned to: \" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "           \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003cTextFlow prefHeight\u003d\"0.0\" prefWidth\u003d\"130.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "               \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"  \u0026gt; Nric: \" wrappingWidth\u003d\"120.21043395996094\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "               \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "               \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"  \u0026gt; Phone: \" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xantho09"
        },
        "content": "               \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "               \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"  \u0026gt; Email: \" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xantho09"
        },
        "content": "               \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prokarius"
        },
        "content": "               \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Start Time:  \" wrappingWidth\u003d\"27.21875\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTime\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prokarius"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cTextFlow\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Return Time:  \" wrappingWidth\u003d\"27.21875\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endTime\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003cTextFlow prefHeight\u003d\"17.0\" prefWidth\u003d\"130.0\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "               \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"With rate: \" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003cLabel fx:id\u003d\"rate\" prefHeight\u003d\"17.0\" prefWidth\u003d\"33.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$rate\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "               \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"/hr\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 57,
      "prokarius": 8,
      "-": 29,
      "xantho09": 2
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "          \u003cVBox fx:id\u003d\"loanList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "  \"loanBookFilePath\" : \"loanbook.xml\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "  \"loanBookFilePath\" : \"loanbook.xml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlLoanBookStorageTest/invalidAndValidLoanLoanBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003cloanbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c!-- Valid Loan --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c!-- Loan with invalid phone field --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003c/loanbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 2,
      "-": 7,
      "FongYuan": 6
    }
  },
  {
    "path": "src/test/data/XmlLoanBookStorageTest/invalidLoanLoanBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003cloanbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c!-- Loan with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003c/loanbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 2,
      "-": 5,
      "FongYuan": 3
    }
  },
  {
    "path": "src/test/data/XmlSerializableLoanBookTest/duplicateBikeLoanBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003cloanbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cbikes\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cname\u003eBAcKStREET\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/bikes\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c!-- Loan with same identity as BAcKStREET --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cbikes\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cname\u003eBAcKStREET\u003c/name\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/bikes\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c/loanbook\u003e"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 13
    }
  },
  {
    "path": "src/test/data/XmlSerializableLoanBookTest/duplicateLoanLoanBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003cloanbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric\u003eS7508201J\u003c/nric\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cbike\u003eBIKE001\u003c/bike\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate\u003e19.0\u003c/rate\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime\u003e2018-05-20 12:00\u003c/startTime\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime\u003e2018-05-20 22:00\u003c/endTime\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c!-- Loan with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric\u003eS7508201J\u003c/nric\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cbike\u003eBIKE001\u003c/bike\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate\u003e20.0\u003c/rate\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime\u003e12:00\u003c/startTime\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime\u003e22:00\u003c/endTime\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003c/loanbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 8,
      "prokarius": 6,
      "-": 13,
      "FongYuan": 5
    }
  },
  {
    "path": "src/test/data/XmlSerializableLoanBookTest/invalidBikeLoanBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003cloanbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c!-- Loan with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cname\u003e@uh%oh$\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c/loanbook\u003e"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 7
    }
  },
  {
    "path": "src/test/data/XmlSerializableLoanBookTest/invalidLoanIdManagerLoanBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xantho09"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xantho09"
        },
        "content": "\u003cloanbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    \u003c!-- It- It\u0027s over 9 digiiits! (Value too large) --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    \u003cloanIdManager\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        \u003clastUsedLoanId\u003e1000000000\u003c/lastUsedLoanId\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    \u003c/loanIdManager\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xantho09"
        },
        "content": "\u003c/loanbook\u003e"
      }
    ],
    "authorContributionMap": {
      "xantho09": 7
    }
  },
  {
    "path": "src/test/data/XmlSerializableLoanBookTest/invalidLoanLoanBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003cloanbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c!-- Loan with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003c/loanbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 2,
      "prokarius": 1,
      "-": 5,
      "FongYuan": 3
    }
  },
  {
    "path": "src/test/data/XmlSerializableLoanBookTest/invalidLoanStatusLoanBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003cloanbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    \u003c!-- loan with an invalid loanStatus--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eOFFGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prokarius"
        },
        "content": "\u003c/loanbook\u003e"
      }
    ],
    "authorContributionMap": {
      "prokarius": 12
    }
  },
  {
    "path": "src/test/data/XmlSerializableLoanBookTest/typicalLoanBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c!-- LoanBook save file which contains the same Loan values as in TypicalLoanBook#getTypicalLoanBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003cloanbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cbikes\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cname\u003eBIKE001\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/bikes\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cbikes\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cname\u003eBIKE002\u003c/name\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/bikes\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cbikes\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cname\u003eSilver Surfer\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/bikes\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cbikes\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cname\u003eBlue Ocean\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/bikes\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric\u003eS0848937H\u003c/nric\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cbike\u003eBIKE001\u003c/bike\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate\u003e1.1\u003c/rate\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime\u003e12:33\u003c/startTime\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime\u003e14:13\u003c/endTime\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric\u003eF1342714M\u003c/nric\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cbike\u003eBIKE001\u003c/bike\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate\u003e0.15\u003c/rate\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime\u003e2017-10-12 12:08\u003c/startTime\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime\u003e2017-10-12 06:08\u003c/endTime\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric\u003eT0238282I\u003c/nric\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cbike\u003eBIKE001\u003c/bike\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate\u003e23.9\u003c/rate\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime\u003e14:20\u003c/startTime\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime\u003e18:22\u003c/endTime\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric\u003eS9335895C\u003c/nric\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cbike\u003eBIKE002\u003c/bike\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate\u003e9.0\u003c/rate\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime\u003e17:56\u003c/startTime\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime\u003e18:22\u003c/endTime\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric\u003eG9112925L\u003c/nric\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cbike\u003eBIKE002\u003c/bike\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate\u003e5.55\u003c/rate\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime\u003e2010-12-30 10:30\u003c/startTime\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime\u003e2011-12-30 12:30\u003c/endTime\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric\u003eG9400645M\u003c/nric\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cbike\u003eBIKE002\u003c/bike\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate\u003e33.3\u003c/rate\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime\u003e01:01\u003c/startTime\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime\u003e21:01\u003c/endTime\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric\u003eS8313623E\u003c/nric\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003cbike\u003eBIKE002\u003c/bike\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate\u003e5.05\u003c/rate\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime\u003e2013-03-13 12:08\u003c/startTime\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wn96"
        },
        "content": "        \u003cendTime\u003e2013-03-13 23:54\u003c/endTime\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    \u003cloanIdManager\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        \u003clastUsedLoanId\u003e6\u003c/lastUsedLoanId\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    \u003c/loanIdManager\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003c/loanbook\u003e"
      }
    ],
    "authorContributionMap": {
      "wn96": 1,
      "Kelly9373": 16,
      "prokarius": 20,
      "-": 26,
      "xantho09": 2,
      "FongYuan": 35
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidLoanField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c!-- Loan with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003cloan\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    \u003cnric\u003eT0331476B\u003c/nric\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    \u003cbike\u003eBIKE001\u003c/bike\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    \u003crate\u003e30.6\u003c/rate\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    \u003cstartTime\u003e2018-01-01 10:10\u003c/startTime\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    \u003cendTime\u003e2018-01-01 17:10\u003c/endTime\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c/loan\u003e"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 3,
      "prokarius": 2,
      "-": 6,
      "FongYuan": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingLoanField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c!-- Loan with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003cloan\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    \u003cnric\u003eT0331476B\u003c/nric\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    \u003cbike\u003eBIKE001\u003c/bike\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    \u003crate\u003e30.6\u003c/rate\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    \u003cstartTime\u003e2018-01-01 10:10\u003c/startTime\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    \u003cendTime\u003e2018-01-01 17:10\u003c/endTime\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c/loan\u003e"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 3,
      "prokarius": 2,
      "-": 5,
      "FongYuan": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempLoanBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003cloanbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003c/loanbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 2,
      "-": 8,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validLoan.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003cloan\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    \u003cnric\u003eT0331476B\u003c/nric\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    \u003cbike\u003eBIKE001\u003c/bike\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    \u003crate\u003e30.6\u003c/rate\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    \u003cstartTime\u003e2018-01-01 10:10\u003c/startTime\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    \u003cendTime\u003e2018-01-01 17:10\u003c/endTime\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c/loan\u003e"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 3,
      "prokarius": 3,
      "-": 6,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validLoanBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003cloanbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric isPrivate \u003d\"false\"\u003eT0331476B\u003c/nric\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cbike isPrivate \u003d\"false\"\u003eBIKE001\u003c/bike\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate isPrivate \u003d\"false\"\u003e30.6\u003c/rate\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime isPrivate \u003d\"false\"\u003e2018-01-01 10:10\u003c/startTime\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime isPrivate \u003d\"false\"\u003e2018-01-01 17:10\u003c/endTime\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric isPrivate \u003d\"false\"\u003eT0331476B\u003c/nric\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cbike isPrivate \u003d\"false\"\u003eBike01\u003c/bike\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate isPrivate \u003d\"false\"\u003e12\u003c/rate\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime isPrivate \u003d\"false\"\u003e2018-01-01 10:10\u003c/startTime\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime isPrivate \u003d\"false\"\u003e2018-01-01 17:10\u003c/endTime\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric isPrivate \u003d\"false\"\u003eT0331476B\u003c/nric\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cbike isPrivate \u003d\"false\"\u003eBike01\u003c/bike\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate isPrivate \u003d\"false\"\u003e12.0\u003c/rate\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime isPrivate \u003d\"false\"\u003e2018-01-01 10:10\u003c/startTime\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime isPrivate \u003d\"false\"\u003e2018-01-01 17:10\u003c/endTime\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric isPrivate \u003d\"false\"\u003eT0331476B\u003c/nric\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cbike isPrivate \u003d\"false\"\u003eBike01\u003c/bike\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate isPrivate \u003d\"false\"\u003e12.0\u003c/rate\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime isPrivate \u003d\"false\"\u003e2018-01-01 10:10\u003c/startTime\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime isPrivate \u003d\"false\"\u003e2018-01-01 17:10\u003c/endTime\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric isPrivate \u003d\"false\"\u003eT0331476B\u003c/nric\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cbike isPrivate \u003d\"false\"\u003eBike01\u003c/bike\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate isPrivate \u003d\"false\"\u003e12.0\u003c/rate\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime isPrivate \u003d\"false\"\u003e2018-01-01 10:10\u003c/startTime\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime isPrivate \u003d\"false\"\u003e2018-01-01 17:10\u003c/endTime\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric isPrivate \u003d\"false\"\u003eT0331476B\u003c/nric\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cbike isPrivate \u003d\"false\"\u003eBike01\u003c/bike\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate isPrivate \u003d\"false\"\u003e12.0\u003c/rate\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime isPrivate \u003d\"false\"\u003e2018-01-01 10:10\u003c/startTime\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime isPrivate \u003d\"false\"\u003e2018-01-01 17:10\u003c/endTime\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric isPrivate \u003d\"false\"\u003eT0331476B\u003c/nric\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cbike isPrivate \u003d\"false\"\u003eBike01\u003c/bike\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate isPrivate \u003d\"false\"\u003e12.0\u003c/rate\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime isPrivate \u003d\"false\"\u003e2018-01-01 10:10\u003c/startTime\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime isPrivate \u003d\"false\"\u003e2018-01-01 17:10\u003c/endTime\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric isPrivate \u003d\"false\"\u003eT0331476B\u003c/nric\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cbike isPrivate \u003d\"false\"\u003eBike01\u003c/bike\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate isPrivate \u003d\"false\"\u003e12.0\u003c/rate\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime isPrivate \u003d\"false\"\u003e2018-01-01 10:10\u003c/startTime\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime isPrivate \u003d\"false\"\u003e2018-01-01 17:10\u003c/endTime\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003cloans\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cnric isPrivate \u003d\"false\"\u003eT0331476B\u003c/nric\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003cbike isPrivate \u003d\"false\"\u003eBike01\u003c/bike\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        \u003crate isPrivate \u003d\"false\"\u003e12.0\u003c/rate\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cstartTime isPrivate \u003d\"false\"\u003e2018-01-01 10:10\u003c/startTime\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        \u003cendTime isPrivate \u003d\"false\"\u003e2018-01-01 17:10\u003c/endTime\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    \u003c/loans\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "\u003c/loanbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 29,
      "prokarius": 27,
      "-": 37,
      "FongYuan": 18
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BikeCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Provides a handle to a bike card in the bike list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class BikeCardHandle extends ListCardHandle\u003cBike\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public BikeCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns true if this handle contains {@code bike}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean contains(Bike bike) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return getName().equals(bike.getName().value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 32
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BikeListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Provides a handle for {@code BikeListPanel} containing the list of {@code BikeCard}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class BikeListPanelHandle extends ListPanelHandle\u003cBike, BikeCardHandle\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public BikeListPanelHandle(ListView\u003cBike\u003e bikeListPanelNode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(bikeListPanelNode);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected String getItemClassName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return Bike.class.getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected BikeCardHandle getNewCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new BikeCardHandle(cardNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 25
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ListCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Provides a handle to a {@code ListCard\u003cT\u003e} in the list panel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public abstract class ListCardHandle\u003cT\u003e extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ListCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns true if this handle contains {@code item}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public abstract boolean contains(T item);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 29
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Provides a handle for a {@code ListPanel\u003cT\u003e} containing a list of {@code ListCard\u003cT\u003e}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public abstract class ListPanelHandle\u003cT, CardHandle extends ListCardHandle\u003cT\u003e\u003e extends NodeHandle\u003cListView\u003cT\u003e\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String LIST_VIEW_ID \u003d \"#listView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Optional\u003cT\u003e lastRememberedSelectedCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ListPanelHandle(ListView\u003cT\u003e listPanelNode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(listPanelNode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Gets the class name of T."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * An internal function to help with error reporting."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @return The class name of T."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected abstract String getItemClassName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Creates a new CardHandle object using the provided cardNode."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @param cardNode A node for a ListCard."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @return A new CardHandle."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected abstract CardHandle getNewCardHandle(Node cardNode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns a handle to the selected {@code CardHandle}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public CardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cT\u003e selectedList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (selectedList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new AssertionError(getItemClassName() + \" list size expected 1.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .map(this::getNewCardHandle)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .filter(handle -\u003e handle.contains(selectedList.get(0)))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cT\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new AssertionError(getItemClassName() + \" card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Navigates the listview to display {@code item}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void navigateToCard(T item) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (!getRootNode().getItems().contains(item)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new IllegalArgumentException(getItemClassName() + \" does not exist.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            getRootNode().scrollTo(item);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Selects the {@code ListCard} at {@code index} in the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns the card handle of an item associated with the {@code index} in the list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public CardHandle getCardHandle(int index) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Object[] s \u003d getAllCardNodes().stream().map(this::getNewCardHandle).toArray();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .map(this::getNewCardHandle)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .filter(handle -\u003e handle.contains(getItem(index)))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private T getItem(int index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Remembers the selected {@code BikeCard} in the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void rememberSelectedCard() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cT\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            lastRememberedSelectedCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            lastRememberedSelectedCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns true if the selected {@code ListCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code rememberSelectedBikeCard()} call."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean isSelectedCardChanged() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cT\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return lastRememberedSelectedCard.isPresent();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return !lastRememberedSelectedCard.isPresent()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                || !lastRememberedSelectedCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 173
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/LoanCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Provides a handle to a loan card in the loan list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class LoanCardHandle extends ListCardHandle\u003cLoan\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String NRIC_FIELD_ID \u003d \"#nric\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String BIKE_FIELD_ID \u003d \"#bike\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String LOANRATE_FIELD_ID \u003d \"#rate\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private static final String LOANSTARTTIME_FIELD_ID \u003d \"#startTime\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private static final String LOANENDTIME_FIELD_ID \u003d \"#endTime\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final Label nricLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final Label bikeLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final Label rateLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private final Label startTimeLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private final Label endTimeLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        nricLabel \u003d getChildNode(NRIC_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        bikeLabel \u003d getChildNode(BIKE_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        rateLabel \u003d getChildNode(LOANRATE_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        startTimeLabel \u003d getChildNode(LOANSTARTTIME_FIELD_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        endTimeLabel \u003d getChildNode(LOANENDTIME_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return nricLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public String getBike() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return bikeLabel.getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public String getLoanRate() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return rateLabel.getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public String getLoanStartTime() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return startTimeLabel.getText();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public String getLoanEndTime() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return endTimeLabel.getText();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns true if this handle contains {@code loan}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean contains(Loan loan) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return getName().equals(loan.getName().value)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 getNric().equals(loan.getNric().getCensored())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 getPhone().equals(loan.getPhone().getCensored())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 getEmail().equals(loan.getEmail().getCensored())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 getBike().equals(loan.getBike().getName().value)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                \u0026\u0026 getLoanRate().equals(loan.getLoanRate().toString())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                \u0026\u0026 getLoanStartTime().equals(loan.getLoanStartTime().toString())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(loan.getTags().stream()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                        .map(tag -\u003e tag.value)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 9,
      "Kelly9373": 26,
      "prokarius": 13,
      "-": 63,
      "FongYuan": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/LoanListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Provides a handle for {@code LoanListPanel} containing the list of {@code LoanCard}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class LoanListPanelHandle extends ListPanelHandle\u003cLoan, LoanCardHandle\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanListPanelHandle(ListView\u003cLoan\u003e loanListPanelNode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        super(loanListPanelNode);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected String getItemClassName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return Loan.class.getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected LoanCardHandle getNewCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new LoanCardHandle(cardNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "xantho09": 1,
      "FongYuan": 9
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final LoanListPanelHandle listPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        listPanel \u003d new LoanListPanelHandle(getChildNode(LoanListPanelHandle.LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanListPanelHandle getListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return listPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "FongYuan": 4
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.storage.XmlSerializableLoanBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    protected Supplier\u003cReadOnlyLoanBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyLoanBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            createDataFileWithData(new XmlSerializableLoanBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        userPrefs.setLoanBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Returns a defensive copy of the loan book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public LoanBook readStorageLoanBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return new LoanBook(storage.readLoanBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            throw new AssertionError(\"Data is not in the LoanBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return storage.getLoanBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model copy \u003d new ModelManager((model.getLoanBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredLoanList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 10,
      "-": 95,
      "FongYuan": 15
    }
  },
  {
    "path": "src/test/java/loanbook/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Loanbook App\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "xantho09": 1,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 138,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        final Index fifthLoanIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(fifthLoanIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(fifthLoanIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(fifthLoanIndex.equals(fifthLoanIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(fifthLoanIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(fifthLoanIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(fifthLoanIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "FongYuan": 8
    }
  },
  {
    "path": "src/test/java/loanbook/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/java/loanbook/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(\"Typical App Title\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setAppTitle(\"Updated Title\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 128,
      "FongYuan": 3
    }
  },
  {
    "path": "src/test/java/loanbook/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/java/loanbook/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "FongYuan": 3
    }
  },
  {
    "path": "src/test/java/loanbook/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 158,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.storage.XmlAdaptedLoan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.storage.XmlSerializableLoanBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validLoanBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final Path MISSING_LOAN_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingLoanField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final Path INVALID_LOAN_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidLoanField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final Path VALID_LOAN_FILE \u003d TEST_DATA_FOLDER.resolve(\"validLoan.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempLoanBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String VALID_NRIC \u003d \"T0331476B\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String VALID_BIKE \u003d \"BIKE001\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String VALID_LOANRATE \u003d \"30.6\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private static final String VALID_LOANTIMEA \u003d \"2018-01-01 10:10\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private static final String VALID_LOANTIMEB \u003d \"2018-01-01 17:10\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private static final String VALID_LOANSTATUS \u003d \"ONGOING\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlUtil.getDataFromFile(null, LoanBook.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, LoanBook.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, LoanBook.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableLoanBook.class).toModelType();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(9, dataFromFile.getLoanList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void xmlAdaptedLoanFromFile_fileWithMissingLoanField_validResult() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlAdaptedLoan actualLoan \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            MISSING_LOAN_FIELD_FILE, XmlAdaptedLoanWithRootElement.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan expectedLoan \u003d new XmlAdaptedLoan(null,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_NRIC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_BIKE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_LOANRATE,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                VALID_LOANSTATUS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedLoan, actualLoan);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void xmlAdaptedLoanFromFile_fileWithInvalidLoanField_validResult() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlAdaptedLoan actualLoan \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            INVALID_LOAN_FIELD_FILE, XmlAdaptedLoanWithRootElement.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan expectedLoan \u003d new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_NRIC,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                INVALID_PHONE,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_BIKE,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_LOANRATE,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                VALID_LOANSTATUS,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedLoan, actualLoan);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void xmlAdaptedLoanFromFile_fileWithValidLoan_validResult() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlAdaptedLoan actualLoan \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            VALID_LOAN_FILE, XmlAdaptedLoanWithRootElement.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan expectedLoan \u003d new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_NRIC,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_PHONE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_EMAIL,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_BIKE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_LOANRATE,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                VALID_LOANSTATUS,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedLoan, actualLoan);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlUtil.saveDataToFile(null, new LoanBook());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new LoanBook());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlSerializableLoanBook dataToWrite \u003d new XmlSerializableLoanBook(new LoanBook());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlSerializableLoanBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableLoanBook.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBookBuilder builder \u003d new LoanBookBuilder(new LoanBook());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        dataToWrite \u003d new XmlSerializableLoanBook("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                builder.withLoan(new LoanBuilder().build()).build());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            dataToWrite);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableLoanBook.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedLoan}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @XmlRootElement(name \u003d \"loan\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static class XmlAdaptedLoanWithRootElement extends XmlAdaptedLoan {}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 37,
      "prokarius": 12,
      "-": 97,
      "FongYuan": 32
    }
  },
  {
    "path": "src/test/java/loanbook/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 174,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String deleteCommand \u003d \"delete i/9 x/a12345\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void getFilteredLoanList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        logic.getFilteredLoanList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     *      - {@code expectedModel}\u0027s loan book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 1,
      "Kelly9373": 2,
      "-": 107,
      "FongYuan": 14
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/AddBikeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.BikeBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.ModelStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class AddBikeCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void constructor_nullBike_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        new AddBikeCommand(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void execute_bikeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ModelStubAcceptingBikeAdded modelStub \u003d new ModelStubAcceptingBikeAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike validBike \u003d new BikeBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        CommandResult commandResult \u003d new AddBikeCommand(validBike).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(String.format(AddBikeCommand.MESSAGE_SUCCESS, validBike), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(Arrays.asList(validBike), modelStub.bikesAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void execute_duplicateBike_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike validBike \u003d new BikeBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        AddBikeCommand addBikeCommand \u003d new AddBikeCommand(validBike);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBike(validBike);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expectMessage(AddBikeCommand.MESSAGE_DUPLICATE_BIKE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        addBikeCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike bike1 \u003d new BikeBuilder().withName(\"Bike001\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike bike2 \u003d new BikeBuilder().withName(\"Bike002\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        AddBikeCommand addBike1Command \u003d new AddBikeCommand(bike1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        AddBikeCommand addBike2Command \u003d new AddBikeCommand(bike2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(addBike1Command \u003d\u003d null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(addBike1Command.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different bike -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(addBike1Command.equals(addBike2Command));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(addBike1Command.equals(addBike1Command));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        AddBikeCommand addAliceCommandCopy \u003d new AddBikeCommand(bike1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(addBike1Command.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * A Model stub that contains a single bike."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private class ModelStubWithBike extends ModelStub {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        private final Bike bike;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ModelStubWithBike(Bike bike) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            requireNonNull(bike);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            this.bike \u003d bike;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public boolean hasBike(Bike bike) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            requireNonNull(bike);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return this.bike.isSame(bike);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * A Model stub that always accept the bike being added."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private class ModelStubAcceptingBikeAdded extends ModelStub {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        private final ArrayList\u003cBike\u003e bikesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public boolean hasBike(Bike bike) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            requireNonNull(bike);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return bikesAdded.stream().anyMatch(bike::isSame);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public void addBike(Bike bike) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            requireNonNull(bike);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            bikesAdded.add(bike);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public void commitLoanBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            // called by {@code AddBikeCommand#execute()}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public ReadOnlyLoanBook getLoanBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return new LoanBook();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 131
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoanBook.getTypicalLoanBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        model \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void execute_newLoan_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan validLoan \u003d new LoanBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.addLoan(validLoan);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.commitLoanBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(new AddCommand(validLoan), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validLoan), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void execute_duplicateLoan_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Loan loanInList \u003d model.getLoanBook().getLoanList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(new AddCommand(loanInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 4,
      "-": 27,
      "FongYuan": 18
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.ModelStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void constructor_nullLoan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void execute_loanAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ModelStubAcceptingLoanAdded modelStub \u003d new ModelStubAcceptingLoanAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan validLoan \u003d new LoanBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validLoan).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validLoan), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(Arrays.asList(validLoan), modelStub.loansAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void execute_duplicateLoan_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan validLoan \u003d new LoanBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validLoan);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithLoan(validLoan);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan alice \u003d new LoanBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan bob \u003d new LoanBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different loan -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * A Model stub that contains a single loan."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private class ModelStubWithLoan extends ModelStub {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        private final Loan loan;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ModelStubWithLoan(Loan loan) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            requireNonNull(loan);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            this.loan \u003d loan;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public boolean hasLoan(Loan loan) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            requireNonNull(loan);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return this.loan.isSame(loan);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * A Model stub that always accept the loan being added."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private class ModelStubAcceptingLoanAdded extends ModelStub {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        final ArrayList\u003cLoan\u003e loansAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public boolean hasLoan(Loan loan) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            requireNonNull(loan);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return loansAdded.stream().anyMatch(loan::isSame);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public Optional\u003cBike\u003e getBike(String bikeName) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            Bike bike \u003d new Bike(new Name(bikeName));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return Optional.of(bike);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public void addLoan(Loan loan) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            requireNonNull(loan);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            loansAdded.add(loan);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        public void commitLoanBook() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        public ReadOnlyLoanBook getLoanBook() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            return new LoanBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 3,
      "-": 88,
      "FongYuan": 50
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoanBook.getTypicalLoanBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void execute_emptyLoanBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.commitLoanBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void execute_nonEmptyLoanBook_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.resetLoans();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.commitLoanBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 6,
      "-": 22,
      "FongYuan": 8
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_BIKE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_LOANRATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.EditLoanDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String VALID_NRIC_AMY \u003d \"F1234567N\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String VALID_NRIC_BOB \u003d \"S1234567D\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String VALID_LOANRATE_AMY \u003d \"0.15\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String VALID_LOANRATE_BOB \u003d \"12.5\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static final String VALID_LOANSTARTTIME_AMY \u003d \"12:32\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static final String VALID_LOANSTARTTIME_BOB \u003d \"2018-10-10 12:30\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static final String VALID_LOANENDTIME_AMY \u003d \"14:58\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static final String VALID_LOANENDTIME_BOB \u003d \"2018-10-10 14:59\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String VALID_NAME_BIKE1 \u003d \"BIKE001\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String VALID_NAME_BIKE2 \u003d \"BIKE002\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String VALID_NAME_BIKE3 \u003d \"Silver Surfer\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String VALID_NAME_BIKE4 \u003d \"Blue Ocean\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String BIKE_DESC_AMY \u003d \" \" + PREFIX_BIKE + VALID_NAME_BIKE1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String BIKE_DESC_BOB \u003d \" \" + PREFIX_BIKE + VALID_NAME_BIKE2;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String LOANRATE_DESC_AMY \u003d \" \" + PREFIX_LOANRATE + VALID_LOANRATE_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String LOANRATE_DESC_BOB \u003d \" \" + PREFIX_LOANRATE + VALID_LOANRATE_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String NAME_DESC_BIKE1 \u003d \" \" + PREFIX_NAME + VALID_NAME_BIKE1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String NAME_DESC_BIKE2 \u003d \" \" + PREFIX_NAME + VALID_NAME_BIKE2;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String NAME_DESC_BIKE3 \u003d \" \" + PREFIX_NAME + VALID_NAME_BIKE3;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String NAME_DESC_BIKE4 \u003d \" \" + PREFIX_NAME + VALID_NAME_BIKE4;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"S*055310A\"; // wrong format"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String INVALID_BIKE_DESC \u003d \" \" + PREFIX_BIKE + \"***BIKE\"; // \u0027*\u0027 not allowed in bike names"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String INVALID_LOANRATE_DESC \u003d \" \" + PREFIX_LOANRATE + \"1.4444\"; // \u0027no more than 2 decimals"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final EditCommand.EditLoanDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final EditCommand.EditLoanDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        DESC_AMY \u003d new EditLoanDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                .withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                .withBike(VALID_NAME_BIKE1)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                .withLoanRate(VALID_LOANRATE_AMY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .withLoanStartTime(VALID_LOANSTARTTIME_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        DESC_BOB \u003d new EditLoanDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                .withNric(VALID_NRIC_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                .withBike(VALID_NAME_BIKE2)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                .withLoanRate(VALID_LOANRATE_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .withLoanStartTime(VALID_LOANSTARTTIME_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * - the loan book and the filtered loan list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBook expectedLoanBook \u003d new LoanBook(actualModel.getLoanBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cLoan\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredLoanList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            assertEquals(expectedLoanBook, actualModel.getLoanBook());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredLoanList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the loan at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code model}\u0027s loan book."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static void showLoanAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredLoanList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loan \u003d model.getFilteredLoanList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        final String[] splitName \u003d loan.getName().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.updateFilteredLoanList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(1, model.getFilteredLoanList().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Deletes the first loan in {@code model}\u0027s filtered list from {@code model}\u0027s loan book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static void deleteFirstLoan(Model model) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan firstLoan \u003d model.getFilteredLoanList().get(0);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.deleteLoan(firstLoan);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        model.commitLoanBook();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 2,
      "Kelly9373": 21,
      "prokarius": 6,
      "-": 98,
      "FongYuan": 46
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.showLoanAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoanBook.getTypicalLoanBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Password;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String pass \u003d \"a12345\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wn96"
        },
        "content": "        model.setPass(new Password(pass));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loanToDelete \u003d model.getFilteredLoanList().get(INDEX_FIRST_LOAN.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wn96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_LOAN, new Password(pass));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_LOAN_SUCCESS, loanToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.deleteLoan(loanToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.commitLoanBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredLoanList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wn96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex, new Password(model.getPass()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String pass \u003d \"a12345\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wn96"
        },
        "content": "        model.setPass(new Password(pass));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanAtIndex(model, INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loanToDelete \u003d model.getFilteredLoanList().get(INDEX_FIRST_LOAN.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wn96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_LOAN, new Password(pass));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_LOAN_SUCCESS, loanToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.deleteLoan(loanToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.commitLoanBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showNoLoan(expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String pass \u003d \"a12345\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wn96"
        },
        "content": "        model.setPass(new Password(pass));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanAtIndex(model, INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of loan book list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getLoanBook().getLoanList().size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wn96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex, new Password(pass));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String pass \u003d \"a12345\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wn96"
        },
        "content": "        model.setPass(new Password(pass));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loanToDelete \u003d model.getFilteredLoanList().get(INDEX_FIRST_LOAN.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wn96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_LOAN, new Password(pass));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.deleteLoan(loanToDelete);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.commitLoanBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // delete -\u003e first loan deleted"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // undo -\u003e reverts loanbook back to previous state and filtered loan list to show all loans"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.undoLoanBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // redo -\u003e same first loan deleted again"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.redoLoanBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String pass \u003d \"a12345\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wn96"
        },
        "content": "        model.setPass(new Password(pass));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredLoanList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wn96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex, new Password(pass));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // execution failed -\u003e loan book state not added into model"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // single loan book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * 1. Deletes a {@code Loan} from a filtered list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted loan in the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the loan object regardless of indexing."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameLoanDeleted() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String pass \u003d \"a12345\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wn96"
        },
        "content": "        model.setPass(new Password(pass));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wn96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_LOAN, new Password(pass));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanAtIndex(model, INDEX_SECOND_LOAN);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loanToDelete \u003d model.getFilteredLoanList().get(INDEX_FIRST_LOAN.getZeroBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.deleteLoan(loanToDelete);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.commitLoanBook();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // delete -\u003e deletes second loan in unfiltered loan list / first loan in filtered loan list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // undo -\u003e reverts loanbook back to previous state and filtered loan list to show all loans"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.undoLoanBook();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertNotEquals(loanToDelete, model.getFilteredLoanList().get(INDEX_FIRST_LOAN.getZeroBased()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // redo -\u003e deletes same second loan in unfiltered loan list"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.redoLoanBook();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String pass \u003d \"a12345\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wn96"
        },
        "content": "        model.setPass(new Password(pass));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wn96"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_LOAN, new Password(pass));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wn96"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_LOAN, new Password(pass));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wn96"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_LOAN, new Password(pass));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different loan -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void showNoLoan(Model model) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.updateFilteredLoanList(p -\u003e false);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(model.getFilteredLoanList().isEmpty());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 31,
      "Kelly9373": 19,
      "-": 101,
      "FongYuan": 48
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.showLoanAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoanBook.getTypicalLoanBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.EditCommand.EditLoanDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.EditLoanDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan editedLoan \u003d new LoanBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder(editedLoan).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_LOAN, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_LOAN_SUCCESS, editedLoan);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoanBook(model.getLoanBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.updateLoan(model.getFilteredLoanList().get(0), editedLoan);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.commitLoanBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index indexLastLoan \u003d Index.fromOneBased(model.getFilteredLoanList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan lastLoan \u003d model.getFilteredLoanList().get(indexLastLoan.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        LoanBuilder loanInList \u003d new LoanBuilder(lastLoan);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan editedLoan \u003d loanInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand.EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastLoan, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_LOAN_SUCCESS, editedLoan);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoanBook(model.getLoanBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.updateLoan(lastLoan, editedLoan);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.commitLoanBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_LOAN, new EditLoanDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan editedLoan \u003d model.getFilteredLoanList().get(INDEX_FIRST_LOAN.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_LOAN_SUCCESS, editedLoan);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoanBook(model.getLoanBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.commitLoanBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanAtIndex(model, INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loanInFilteredList \u003d model.getFilteredLoanList().get(INDEX_FIRST_LOAN.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan editedLoan \u003d new LoanBuilder(loanInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_LOAN,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                new EditLoanDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_LOAN_SUCCESS, editedLoan);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoanBook(model.getLoanBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.updateLoan(model.getFilteredLoanList().get(0), editedLoan);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.commitLoanBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void execute_duplicateLoanUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan firstLoan \u003d model.getFilteredLoanList().get(INDEX_FIRST_LOAN.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder(firstLoan).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_LOAN, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void execute_duplicateLoanFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanAtIndex(model, INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // edit loan in filtered list into a duplicate in loan book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Loan loanInList \u003d model.getLoanBook().getLoanList().get(INDEX_SECOND_LOAN.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_LOAN,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                new EditLoanDescriptorBuilder(loanInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void execute_invalidLoanIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredLoanList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * but smaller than size of loan book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void execute_invalidLoanIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanAtIndex(model, INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of loan book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getLoanBook().getLoanList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                new EditLoanDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan editedLoan \u003d new LoanBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loanToEdit \u003d model.getFilteredLoanList().get(INDEX_FIRST_LOAN.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder(editedLoan).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_LOAN, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoanBook(model.getLoanBook()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.updateLoan(loanToEdit, editedLoan);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.commitLoanBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // edit -\u003e first loan edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // undo -\u003e reverts loanbook back to previous state and filtered loan list to show all loans"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.undoLoanBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // redo -\u003e same first loan edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.redoLoanBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredLoanList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // execution failed -\u003e loan book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // single loan book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * 1. Edits a {@code Loan} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited loan in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the loan object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameLoanEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan editedLoan \u003d new LoanBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder(editedLoan).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_LOAN, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new LoanBook(model.getLoanBook()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanAtIndex(model, INDEX_SECOND_LOAN);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loanToEdit \u003d model.getFilteredLoanList().get(INDEX_FIRST_LOAN.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.updateLoan(loanToEdit, editedLoan);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.commitLoanBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // edit -\u003e edits second loan in unfiltered loan list / first loan in filtered loan list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // undo -\u003e reverts loanbook back to previous state and filtered loan list to show all loans"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.undoLoanBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertNotEquals(model.getFilteredLoanList().get(INDEX_FIRST_LOAN.getZeroBased()), loanToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // redo -\u003e edits same second loan in unfiltered loan list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.redoLoanBook();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_LOAN, DESC_AMY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditLoanDescriptor copyDescriptor \u003d new EditLoanDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_LOAN, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_LOAN, DESC_AMY)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_LOAN, DESC_BOB)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 26,
      "-": 129,
      "FongYuan": 93
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/EditLoanDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.EditLoanDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class EditLoanDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand.EditLoanDescriptor descriptorWithSameValues \u003d new EditCommand.EditLoanDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand.EditLoanDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            new EditLoanDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        editedAmy \u003d new EditLoanDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        editedAmy \u003d new EditLoanDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        editedAmy \u003d new EditLoanDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "FongYuan": 16
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "FongYuan": 7
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_LOANS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoanBook.getTypicalLoanBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.CARL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.ELLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different loan -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void execute_zeroKeywords_noLoanFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_LOANS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.updateFilteredLoanList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredLoanList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void execute_multipleKeywords_multipleLoansFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_LOANS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.updateFilteredLoanList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredLoanList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 2,
      "-": 62,
      "FongYuan": 21
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "FongYuan": 8
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "FongYuan": 5
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/ListBikesCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoanBook.getTypicalLoanBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListBikesCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class ListBikesCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(new ListBikesCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                ListBikesCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 34
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.showLoanAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoanBook.getTypicalLoanBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        model \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanAtIndex(model, INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 2,
      "-": 29,
      "FongYuan": 10
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.deleteFirstLoan;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoanBook.getTypicalLoanBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        deleteFirstLoan(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        deleteFirstLoan(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        model.undoLoanBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        model.undoLoanBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        deleteFirstLoan(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        deleteFirstLoan(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.undoLoanBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.undoLoanBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.redoLoanBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.redoLoanBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 8,
      "-": 28,
      "FongYuan": 13
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.showLoanAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_THIRD_LOAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoanBook.getTypicalLoanBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index lastLoanIndex \u003d Index.fromOneBased(model.getFilteredLoanList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_LOAN);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertExecutionSuccess(lastLoanIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredLoanList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanAtIndex(model, INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanAtIndex(expectedModel, INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanAtIndex(model, INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoanAtIndex(expectedModel, INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of loan book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getLoanBook().getLoanList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_LOAN);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different loan -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_LOAN_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 4,
      "-": 80,
      "FongYuan": 34
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/SetPasswordCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wn96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wn96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wn96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wn96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wn96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wn96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.ModelStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wn96"
        },
        "content": "public class SetPasswordCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public void constructor_nullOldPass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wn96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wn96"
        },
        "content": "        new SetPasswordCommand(null, new Password(\"123\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public void constructor_nullNewPass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wn96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wn96"
        },
        "content": "        new SetPasswordCommand(new Password(\"123\"), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Password oldPass \u003d new Password(\"12345678\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Password newPass \u003d new Password(\"abcdefgh\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Password wrongPass \u003d new Password(\"$$$$$$$$\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wn96"
        },
        "content": "        SetPasswordCommand addOldPassCommand \u003d new SetPasswordCommand(oldPass, newPass);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wn96"
        },
        "content": "        SetPasswordCommand wrongPassCommand \u003d new SetPasswordCommand(wrongPass, newPass);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertTrue(addOldPassCommand.equals(addOldPassCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wn96"
        },
        "content": "        SetPasswordCommand addOldPassCommandCopy \u003d new SetPasswordCommand(oldPass, newPass);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertTrue(addOldPassCommand.equals(addOldPassCommandCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertFalse(addOldPassCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertFalse(addOldPassCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // different loan -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertFalse(addOldPassCommand.equals(wrongPassCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public void execute_newPasswordAcceptedByModel_setPassSuccessful() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Password currentPass \u003d new Password(\"a12345\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Password newPass \u003d new Password(\"abcdefgh\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ModelStubWithPassword modelStub \u003d new ModelStubWithPassword();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wn96"
        },
        "content": "        CommandResult commandResult \u003d new SetPasswordCommand(currentPass, newPass).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertEquals(String.format(SetPasswordCommand.MESSAGE_CHANGE_PASSWORD_SUCCESS),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wn96"
        },
        "content": "                 commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public void execute_wrongCurrentPassword_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Password wrongPass \u003d new Password(\"xxxxxxxx\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Password newPass \u003d new Password(\"abcdefgh\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wn96"
        },
        "content": "        SetPasswordCommand setPasswordCommand \u003d new SetPasswordCommand(wrongPass, newPass);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ModelStubWithPassword modelStub \u003d new ModelStubWithPassword();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wn96"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wn96"
        },
        "content": "        thrown.expectMessage(Messages.MESSAGE_INVALID_OLD_PASS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wn96"
        },
        "content": "        setPasswordCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public void execute_sameCurrentPassword_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ModelStubWithPassword modelStub \u003d new ModelStubWithPassword();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String pass \u003d \"a12345\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wn96"
        },
        "content": "        SetPasswordCommand setPasswordCommand \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wn96"
        },
        "content": "                new SetPasswordCommand(new Password(pass), new Password(pass));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wn96"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wn96"
        },
        "content": "        thrown.expectMessage(Messages.MESSAGE_SAME_AS_CURRENT_PASSWORD);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wn96"
        },
        "content": "        setPasswordCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * A Model stub with a functional setPass() and getPass()."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private class ModelStubWithPassword extends ModelStub {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wn96"
        },
        "content": "        private Password currPass \u003d new Password(\"a12345\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wn96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wn96"
        },
        "content": "        public void setPass(Password pass) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wn96"
        },
        "content": "            currPass \u003d pass;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wn96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wn96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wn96"
        },
        "content": "        public String getPass() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wn96"
        },
        "content": "            return currPass.hashedPassword();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wn96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        public LoanId getNextAvailableId() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        public boolean hasNextAvailableId() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 106,
      "xantho09": 10,
      "FongYuan": 12
    }
  },
  {
    "path": "src/test/java/loanbook/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.deleteFirstLoan;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoanBook.getTypicalLoanBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalLoanBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        deleteFirstLoan(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        deleteFirstLoan(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        deleteFirstLoan(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        deleteFirstLoan(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.undoLoanBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedModel.undoLoanBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 4,
      "-": 28,
      "FongYuan": 13
    }
  },
  {
    "path": "src/test/java/loanbook/logic/parser/AddBikeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NAME_DESC_BIKE1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NAME_DESC_BIKE2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalBikes.BIKE2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.AddBikeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.BikeBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class AddBikeCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private AddBikeCommandParser parser \u003d new AddBikeCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike expectedBike \u003d new BikeBuilder(BIKE2).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BIKE2, new AddBikeCommand(expectedBike));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BIKE1 + NAME_DESC_BIKE2, new AddBikeCommand(expectedBike));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBikeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BIKE2, expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BIKE2,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBikeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 52
    }
  },
  {
    "path": "src/test/java/loanbook/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.BIKE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.BIKE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_BIKE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_LOANRATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.LOANRATE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.LOANRATE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanRate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Nric;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan expectedLoan \u003d new LoanBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedLoan));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedLoan));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // multiple nrics - last nric accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_AMY + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedLoan));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedLoan));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedLoan));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // multiple bikes - last bike accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_AMY + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedLoan));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // multiple rates - last rate accepted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_AMY + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedLoan));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // multiple times - last time accepted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedLoan));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan expectedLoanMultipleTags \u003d new LoanBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedLoanMultipleTags));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan expectedLoan \u003d new LoanBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wn96"
        },
        "content": "                        + BIKE_DESC_AMY + LOANRATE_DESC_AMY,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                new AddCommand(expectedLoan));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_NRIC_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Nric.MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // invalid bike"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + INVALID_BIKE_DESC + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // invalid rate"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_BOB + INVALID_LOANRATE_DESC"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, LoanRate.MESSAGE_LOANRATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + INVALID_BIKE_DESC + LOANRATE_DESC_BOB,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 23,
      "Kelly9373": 45,
      "prokarius": 5,
      "-": 66,
      "FongYuan": 48
    }
  },
  {
    "path": "src/test/java/loanbook/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "FongYuan": 3
    }
  },
  {
    "path": "src/test/java/loanbook/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertParseSuccess(parser, \" i/1 x/a12345\", new DeleteCommand(INDEX_FIRST_LOAN, new Password(\"a12345\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 1,
      "-": 25,
      "FongYuan": 7
    }
  },
  {
    "path": "src/test/java/loanbook/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_THIRD_LOAN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.EditCommand.EditLoanDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.EditLoanDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Loan} being edited,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand.EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_LOAN;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditCommand.EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor \u003d new EditLoanDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor \u003d new EditLoanDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor \u003d new EditLoanDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wn96"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor \u003d new EditLoanDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_LOAN;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 9,
      "-": 138,
      "FongYuan": 51
    }
  },
  {
    "path": "src/test/java/loanbook/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "FongYuan": 6
    }
  },
  {
    "path": "src/test/java/loanbook/logic/parser/LoanBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.AddBikeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.EditCommand.EditLoanDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ListBikesCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.BikeBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.BikeUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.EditLoanDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class LoanBookParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final LoanBookParser parser \u003d new LoanBookParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void parseCommand_addbike() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike bike \u003d new BikeBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        AddBikeCommand command \u003d (AddBikeCommand) parser.parseCommand(BikeUtil.getAddBikeCommand(bike));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(new AddBikeCommand(bike), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loan \u003d new LoanBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(LoanUtil.getAddCommand(loan));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(new AddCommand(loan), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wn96"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" i/\" + INDEX_FIRST_LOAN.getOneBased() + \" x/\" + \"a12345\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Password pass \u003d new Password(\"a12345\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_LOAN, pass), command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loan \u003d new LoanBuilder().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        EditLoanDescriptor descriptor \u003d new EditLoanDescriptorBuilder(loan).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                + INDEX_FIRST_LOAN.getOneBased() + \" \" + LoanUtil.getEditLoanDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_LOAN, descriptor), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void parseCommand_listbikes() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(parser.parseCommand(ListBikesCommand.COMMAND_WORD) instanceof ListBikesCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(parser.parseCommand(ListBikesCommand.COMMAND_WORD + \" 3\") instanceof ListBikesCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_LOAN.getOneBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_LOAN), command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 3,
      "Kelly9373": 2,
      "-": 109,
      "FongYuan": 49
    }
  },
  {
    "path": "src/test/java/loanbook/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(INDEX_FIRST_LOAN, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(INDEX_FIRST_LOAN, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 170,
      "FongYuan": 11
    }
  },
  {
    "path": "src/test/java/loanbook/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_LOAN));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "FongYuan": 7
    }
  },
  {
    "path": "src/test/java/loanbook/logic/parser/SetPasswordCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wn96"
        },
        "content": "public class SetPasswordCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 3,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/model/LoanBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalBikes.BIKE1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoanBook.getTypicalLoanBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanIdManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.exceptions.DuplicateLoanException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class LoanBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final LoanBook loanBook \u003d new LoanBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(Collections.emptyList(), loanBook.getLoanList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(Collections.emptyList(), loanBook.getBikeList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void replaceData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loanBook.replaceData(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void replaceData_withValidReadOnlyLoanBook_replacesData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBook newData \u003d getTypicalLoanBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loanBook.replaceData(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(newData, loanBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void replaceData_withDuplicateLoans_throwsDuplicateLoanException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // Two loans with the same identity fields"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Loan editedAlice \u003d new LoanBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cBike\u003e newBikes \u003d Arrays.asList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cLoan\u003e newLoans \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBookStub newData \u003d new LoanBookStub(newBikes, newLoans);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(DuplicateLoanException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loanBook.replaceData(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void hasBike_nullBike_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBook.hasBike(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void hasLoan_nullLoan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBook.hasLoan(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void hasBike_bikeNotInLoanBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(loanBook.hasBike(BIKE1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void hasLoan_loanNotInLoanBook_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(loanBook.hasLoan(ALICE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void hasBike_bikeInLoanBook_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBook.addBike(BIKE1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(loanBook.hasBike(BIKE1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void hasLoan_loanInLoanBook_returnsTrue() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBook.addLoan(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(loanBook.hasLoan(ALICE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void hasLoan_loanWithSameIdentityFieldsInLoanBook_returnsTrue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBook.addLoan(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Loan editedAlice \u003d new LoanBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(loanBook.hasLoan(editedAlice));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void getBikeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBook.getBikeList().remove(0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void getLoanList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBook.getLoanList().remove(0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void getNextAvailableLoanId_fromDefault_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Test from default Loan ID Manager (i.e. from 0)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; ++i) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            LoanId expectedId \u003d LoanId.fromInt(i);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            LoanId actualId \u003d loanBook.getNextAvailableLoanId();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assertEquals(expectedId, actualId);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void getNextAvailableLoanId_fromExistingManager_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Test from existing manager starting at 7528"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        int lastUsedLoanIdValue \u003d 7528;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager existingManager \u003d new LoanIdManager(LoanId.fromInt(lastUsedLoanIdValue));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        loanBook.setLoanIdManager(existingManager);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 10; ++i) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            LoanId expectedId \u003d LoanId.fromInt(lastUsedLoanIdValue + i);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            LoanId actualId \u003d loanBook.getNextAvailableLoanId();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assertEquals(expectedId, actualId);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void hasNextAvailableLoanId_fromMaximumLoanId_returnsFalse() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId expectedMaximumId \u003d LoanId.fromInt(999999999);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(expectedMaximumId.isMaximumId());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager existingManager \u003d new LoanIdManager(expectedMaximumId);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        loanBook.setLoanIdManager(existingManager);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(loanBook.hasNextAvailableLoanId());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * A stub ReadOnlyLoanBook whose loans list can violate interface constraints."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static class LoanBookStub implements ReadOnlyLoanBook {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        private final ObservableList\u003cBike\u003e bikes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        private final ObservableList\u003cLoan\u003e loans \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        private final LoanIdManager loanIdManager \u003d new LoanIdManager();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBookStub(Collection\u003cBike\u003e bikes, Collection\u003cLoan\u003e loans) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            this.bikes.setAll(bikes);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            this.loans.setAll(loans);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public ObservableList\u003cBike\u003e getBikeList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return bikes;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        public ObservableList\u003cLoan\u003e getLoanList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            return loans;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        public LoanIdManager getLoanIdManager() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            return loanIdManager;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 2,
      "Kelly9373": 27,
      "-": 66,
      "xantho09": 43,
      "FongYuan": 50
    }
  },
  {
    "path": "src/test/java/loanbook/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.model.Model.PREDICATE_SHOW_ALL_BIKES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.model.Model.PREDICATE_SHOW_ALL_LOANS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalBikes.BIKE1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalBikes.BIKE2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void hasBike_nullBike_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        modelManager.hasBike(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void hasLoan_nullLoan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        modelManager.hasLoan(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void hasBike_bikeNotInLoanBook_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(modelManager.hasBike(BIKE1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void hasLoan_loanNotInLoanBook_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(modelManager.hasLoan(ALICE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void hasBike_bikeInLoanBook_returnsTrue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        modelManager.addBike(BIKE1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(modelManager.hasBike(BIKE1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void hasLoan_loanInLoanBook_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        modelManager.addLoan(ALICE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(modelManager.hasLoan(ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void getBike_bikeNotInLoanBook_returnsEmpty() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(Optional.empty(), modelManager.getBike(VALID_NAME_BIKE1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void getBike_bikeInLoanBook_returnsBike() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        modelManager.addBike(BIKE1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(Optional.of(BIKE1), modelManager.getBike(VALID_NAME_BIKE1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void getFilteredBikeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        modelManager.getFilteredBikeList().remove(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void getFilteredLoanList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        modelManager.getFilteredLoanList().remove(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public void getPass_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String currPass \u003d modelManager.getPass();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertTrue(Password.isSamePassword(currPass, new Password(\"a12345\")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public void setPass_returnsTrue() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Password newPass \u003d new Password(\"newpassword\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wn96"
        },
        "content": "        modelManager.setPass(newPass);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String currPass \u003d modelManager.getPass();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertTrue(Password.isSamePassword(currPass, newPass));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBook loanBook \u003d new LoanBookBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                .withLoan(ALICE).withLoan(BENSON)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                .withBike(BIKE1).withBike(BIKE2).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBook differentLoanBook \u003d new LoanBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        modelManager \u003d new ModelManager(loanBook, userPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(loanBook, userPrefs);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // different loanBook -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentLoanBook, userPrefs)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String[] keywords \u003d ALICE.getName().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        modelManager.updateFilteredLoanList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(loanBook, userPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        modelManager.updateFilteredBikeList(PREDICATE_SHOW_ALL_BIKES);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        modelManager.updateFilteredLoanList(PREDICATE_SHOW_ALL_LOANS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        differentUserPrefs.setLoanBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(loanBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 14,
      "Kelly9373": 13,
      "-": 56,
      "FongYuan": 58
    }
  },
  {
    "path": "src/test/java/loanbook/model/VersionedLoanBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class VersionedLoanBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final ReadOnlyLoanBook loanBookWithAmy \u003d new LoanBookBuilder().withLoan(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final ReadOnlyLoanBook loanBookWithBob \u003d new LoanBookBuilder().withLoan(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final ReadOnlyLoanBook loanBookWithCarl \u003d new LoanBookBuilder().withLoan(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private final ReadOnlyLoanBook emptyLoanBook \u003d new LoanBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void commit_singleLoanBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList(emptyLoanBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertLoanBookListStatus(versionedLoanBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Collections.singletonList(emptyLoanBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void commit_multipleLoanBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertLoanBookListStatus(versionedLoanBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Arrays.asList(emptyLoanBook, loanBookWithAmy, loanBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                loanBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void commit_multipleLoanBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedLoanBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertLoanBookListStatus(versionedLoanBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Collections.singletonList(emptyLoanBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void canUndo_multipleLoanBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(versionedLoanBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void canUndo_multipleLoanBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedLoanBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(versionedLoanBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void canUndo_singleLoanBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList(emptyLoanBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(versionedLoanBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void canUndo_multipleLoanBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedLoanBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(versionedLoanBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void canRedo_multipleLoanBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedLoanBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(versionedLoanBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void canRedo_multipleLoanBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedLoanBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(versionedLoanBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void canRedo_singleLoanBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList(emptyLoanBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(versionedLoanBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void canRedo_multipleLoanBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(versionedLoanBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void undo_multipleLoanBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertLoanBookListStatus(versionedLoanBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Collections.singletonList(emptyLoanBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                loanBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Collections.singletonList(loanBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void undo_multipleLoanBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedLoanBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertLoanBookListStatus(versionedLoanBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Arrays.asList(loanBookWithAmy, loanBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void undo_singleLoanBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList(emptyLoanBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertThrows(VersionedLoanBook.NoUndoableStateException.class, versionedLoanBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void undo_multipleLoanBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedLoanBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertThrows(VersionedLoanBook.NoUndoableStateException.class, versionedLoanBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void redo_multipleLoanBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedLoanBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertLoanBookListStatus(versionedLoanBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Arrays.asList(emptyLoanBook, loanBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                loanBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void redo_multipleLoanBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedLoanBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        versionedLoanBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertLoanBookListStatus(versionedLoanBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Collections.singletonList(emptyLoanBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                loanBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Collections.singletonList(loanBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void redo_singleLoanBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList(emptyLoanBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertThrows(VersionedLoanBook.NoRedoableStateException.class, versionedLoanBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void redo_multipleLoanBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                emptyLoanBook, loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertThrows(VersionedLoanBook.NoRedoableStateException.class, versionedLoanBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d prepareLoanBookList(loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook copy \u003d prepareLoanBookList(loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(versionedLoanBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(versionedLoanBook.equals(versionedLoanBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(versionedLoanBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(versionedLoanBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook differentLoanBookList \u003d prepareLoanBookList(loanBookWithBob, loanBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(versionedLoanBook.equals(differentLoanBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook differentCurrentStatePointer \u003d prepareLoanBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                loanBookWithAmy, loanBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedLoanBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(versionedLoanBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Asserts that {@code versionedLoanBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * states before {@code versionedLoanBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * and states after {@code versionedLoanBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private void assertLoanBookListStatus(VersionedLoanBook versionedLoanBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                                          List\u003cReadOnlyLoanBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                                          ReadOnlyLoanBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                                          List\u003cReadOnlyLoanBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(new LoanBook(versionedLoanBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        while (versionedLoanBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            versionedLoanBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        for (ReadOnlyLoanBook expectedLoanBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            assertEquals(expectedLoanBook, new LoanBook(versionedLoanBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            versionedLoanBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        for (ReadOnlyLoanBook expectedLoanBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            versionedLoanBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            assertEquals(expectedLoanBook, new LoanBook(versionedLoanBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(versionedLoanBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedLoanBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Creates and returns a {@code VersionedLoanBook} with the {@code loanBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code VersionedLoanBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private VersionedLoanBook prepareLoanBookList(ReadOnlyLoanBook... loanBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(loanBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        VersionedLoanBook versionedLoanBook \u003d new VersionedLoanBook(loanBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        for (int i \u003d 1; i \u003c loanBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            versionedLoanBook.replaceData(loanBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            versionedLoanBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return versionedLoanBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Shifts the {@code versionedLoanBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedLoanBook versionedLoanBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            versionedLoanBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 292,
      "FongYuan": 6
    }
  },
  {
    "path": "src/test/java/loanbook/model/bike/BikeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.bike;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalBikes.BIKE1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalBikes.BIKE2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.BikeBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class BikeTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void isSameBike() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(BIKE1.isSame(BIKE1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(BIKE1.isSame(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike editedBike1 \u003d new BikeBuilder(BIKE1).withName(\"B002\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(BIKE1.isSame(editedBike1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike bike1Copy \u003d new BikeBuilder(BIKE1).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(BIKE1.equals(bike1Copy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(BIKE1.equals(BIKE1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(BIKE1 \u003d\u003d null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(BIKE1.equals(5));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different bike -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(BIKE1.equals(BIKE2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike editedBike1 \u003d new BikeBuilder(BIKE1).withName(\"B002\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(BIKE1.equals(editedBike1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(BIKE1.toString(), VALID_NAME_BIKE1 + \" Status: Available\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 56
    }
  },
  {
    "path": "src/test/java/loanbook/model/bike/UniqueBikeListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.bike;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalBikes.BIKE1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalBikes.BIKE2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.exceptions.BikeNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.exceptions.DuplicateBikeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class UniqueBikeListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final UniqueBikeList uniqueBikeList \u003d new UniqueBikeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void containsNullBikeThrowsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void containsBikeNotInListReturnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(uniqueBikeList.contains(BIKE1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void containsBikeInListReturnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.add(BIKE1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(uniqueBikeList.contains(BIKE1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void addNullBikeThrowsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.add(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void addDuplicateBikeThrowsDuplicateBikeException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.add(BIKE1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(DuplicateBikeException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.add(BIKE1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setBikeNullTargetBikeThrowsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.set(null, BIKE1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setBikeNullEditedBikeThrowsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.set(BIKE1, null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setBikeTargetBikeNotInListThrowsBikeNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(BikeNotFoundException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.set(BIKE1, BIKE1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setBikeEditedBikeIsSameBike_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.add(BIKE1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.set(BIKE1, BIKE1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        UniqueBikeList expectedUniqueBikeList \u003d new UniqueBikeList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedUniqueBikeList.add(BIKE1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedUniqueBikeList, uniqueBikeList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setBikeEditedBikeHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.add(BIKE1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.set(BIKE1, BIKE2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        UniqueBikeList expectedUniqueBikeList \u003d new UniqueBikeList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedUniqueBikeList.add(BIKE2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedUniqueBikeList, uniqueBikeList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setBikeEditedBikeHasNonUniqueIdentityThrowsDuplicateBikeException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.add(BIKE1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.add(BIKE2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(DuplicateBikeException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.set(BIKE1, BIKE2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void removeNullBikeThrowsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.remove(null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void removeBikeDoesNotExistThrowsBikeNotFoundException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(BikeNotFoundException.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.remove(BIKE1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void remove_existingBikeRemovesBike() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.add(BIKE1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.remove(BIKE1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        UniqueBikeList expectedUniqueBikeList \u003d new UniqueBikeList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedUniqueBikeList, uniqueBikeList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setNullUniqueBikeListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.setAll((UniqueBikeList) null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setUniqueBikeListReplacesOwnListWithProvidedUniqueBikeList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.add(BIKE1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        UniqueBikeList expectedUniqueBikeList \u003d new UniqueBikeList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedUniqueBikeList.add(BIKE2);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.setAll(expectedUniqueBikeList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedUniqueBikeList, uniqueBikeList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setNullListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.setAll((List\u003cBike\u003e) null);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setListReplacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.add(BIKE1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cBike\u003e bikeList \u003d Collections.singletonList(BIKE2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.setAll(bikeList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        UniqueBikeList expectedUniqueBikeList \u003d new UniqueBikeList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedUniqueBikeList.add(BIKE2);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedUniqueBikeList, uniqueBikeList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setListWithDuplicateBikesThrowsDuplicateBikeException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cBike\u003e listWithDuplicateBikes \u003d Arrays.asList(BIKE1, BIKE1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(DuplicateBikeException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.setAll(listWithDuplicateBikes);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void asUnmodifiableObservableListModifyListThrowsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void getBikeInListReturnsBike() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.add(BIKE1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(Optional.of(BIKE1), uniqueBikeList.getBike(VALID_NAME_BIKE1));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void getBikeNotInListReturnsEmpty() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueBikeList.add(BIKE1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(Optional.empty(), uniqueBikeList.getBike(VALID_NAME_BIKE2));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 178
    }
  },
  {
    "path": "src/test/java/loanbook/model/loan/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void censor() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Email email1 \u003d new Email(\"a@abc.com\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Email email2 \u003d new Email(\"ab@abc.com\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Email email3 \u003d new Email(\"abc@abc.com\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Email email4 \u003d new Email(\"abcd@abc.com\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Email email5 \u003d new Email(\"abcde@abc.com\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Email email6 \u003d new Email(\"loooooooooooooooong@abc.com\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"a@abc.com\", email1.getCensored());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"ab@abc.com\", email2.getCensored());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"abc@abc.com\", email3.getCensored());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"axcd@abc.com\", email4.getCensored());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"axxde@abc.com\", email5.getCensored());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"lxxxxxxxxxxxxxxxxng@abc.com\", email6.getCensored());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void censorPartLengthCheck() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Email testEmail \u003d new Email(\"abc@abc.com\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"\", testEmail.doCensoring(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"\", testEmail.doCensoring(2));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"\", testEmail.doCensoring(3));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"x\", testEmail.doCensoring(4));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"xx\", testEmail.doCensoring(5));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"xxxxxxxxxx\", testEmail.doCensoring(13));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 28,
      "-": 60,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/java/loanbook/model/loan/LoanIdManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xantho09"
        },
        "content": "public class LoanIdManagerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final int EXPECTED_INITIAL_ID_VALUE \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final int EXPECTED_MAXIMUM_ID_VALUE \u003d 999999999;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final LoanId EXPECTED_INITIAL_LOAN_ID \u003d LoanId.fromInt(EXPECTED_INITIAL_ID_VALUE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final LoanId EXPECTED_MAXIMUM_LOAN_ID \u003d LoanId.fromInt(EXPECTED_MAXIMUM_ID_VALUE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void defaultIdManagerConstructorTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Create new Loan ID Manager starting from the initial ID value."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManager \u003d new LoanIdManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNull(idManager.getLastUsedLoanId());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(idManager.hasNextAvailableLoanId()); // There should be a next Loan ID"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId nextAvailableLoanId \u003d idManager.getNextAvailableLoanId();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(EXPECTED_INITIAL_LOAN_ID, nextAvailableLoanId); // The first Loan ID created should be 0."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(EXPECTED_INITIAL_LOAN_ID, idManager.getLastUsedLoanId());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @SuppressWarnings(\"Duplicates\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void runningIdFromDefaultConstructorTest() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManager \u003d new LoanIdManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // The IDs returned by the idManager should be {0, 1, 2, ... 9}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        for (int id \u003d EXPECTED_INITIAL_ID_VALUE; id \u003c 10; ++id) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            LoanId expectedLoanId \u003d LoanId.fromInt(id);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            LoanId actualLoanId \u003d idManager.getNextAvailableLoanId();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assertEquals(expectedLoanId, actualLoanId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assertEquals(expectedLoanId, idManager.getLastUsedLoanId());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assertEquals(id, (int) actualLoanId.value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void constructorWithSuppliedLastUsedLoanId() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId lastUsedLoanId \u003d LoanId.fromInt(500);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManager \u003d new LoanIdManager(lastUsedLoanId);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(idManager.hasNextAvailableLoanId()); // 500 is not the maximum; there should be a next Loan ID"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(lastUsedLoanId, idManager.getLastUsedLoanId());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // The next ID should be 501."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId nextAvailableLoanId \u003d idManager.getNextAvailableLoanId();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId expectedLoanId \u003d LoanId.fromInt(501);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(expectedLoanId, nextAvailableLoanId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(expectedLoanId, idManager.getLastUsedLoanId());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(501, (int) nextAvailableLoanId.value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @SuppressWarnings(\"Duplicates\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void runningIdFromLastUsedLoanIdTest() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        int lastUsedIdValue \u003d 2100;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId lastUsedLoanId \u003d LoanId.fromInt(lastUsedIdValue);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManager \u003d new LoanIdManager(lastUsedLoanId);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // The IDs returned should be {2101, 2102, ... , 2109}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        for (int id \u003d lastUsedIdValue + 1; id \u003c 2110; ++id) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            LoanId expectedLoanId \u003d LoanId.fromInt(id);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            LoanId actualLoanId \u003d idManager.getNextAvailableLoanId();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assertEquals(expectedLoanId, actualLoanId);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assertEquals(expectedLoanId, idManager.getLastUsedLoanId());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assertEquals(id, (int) actualLoanId.value);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void constructorWithNullLastUsedIdTest() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManagerFromNullId \u003d new LoanIdManager(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManagerFromInitialId \u003d new LoanIdManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(idManagerFromInitialId, idManagerFromNullId);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId expectedLoanId \u003d LoanId.fromInt(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId actualLoanId \u003d idManagerFromNullId.getNextAvailableLoanId();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(expectedLoanId, actualLoanId);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(0, (int) actualLoanId.value);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void maximumLoanIdTest() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Create an ID manager where the last used ID is the maximum ID."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManager \u003d new LoanIdManager(EXPECTED_MAXIMUM_LOAN_ID);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(idManager.hasNextAvailableLoanId());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(EXPECTED_MAXIMUM_LOAN_ID, idManager.getLastUsedLoanId());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertThrows(IllegalStateException.class, idManager::getNextAvailableLoanId);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void incrementToMaximumTest() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        int offset \u003d 10;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        int initialValue \u003d EXPECTED_MAXIMUM_ID_VALUE - offset;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManager \u003d new LoanIdManager(LoanId.fromInt(initialValue));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // With an offset of 10, the ID manager should"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // reach the maximum ID after 10 calls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d offset; ++i) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            int expectedIdValue \u003d initialValue + i;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            LoanId expectedLoanId \u003d LoanId.fromInt(expectedIdValue);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            LoanId actualLoanId \u003d idManager.getNextAvailableLoanId();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // Value check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assertEquals(expectedLoanId, actualLoanId);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assertEquals(expectedLoanId, idManager.getLastUsedLoanId());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            assertEquals(expectedIdValue, (int) actualLoanId.value);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            // Maximum check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            if (i \u003c offset) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xantho09"
        },
        "content": "                // Not yet the maximum. There should be more."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xantho09"
        },
        "content": "                assertTrue(idManager.hasNextAvailableLoanId());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xantho09"
        },
        "content": "                assertFalse(actualLoanId.isMaximumId());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xantho09"
        },
        "content": "                // At the last iteration, the maximum loan ID should have been used."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xantho09"
        },
        "content": "                assertFalse(idManager.hasNextAvailableLoanId());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xantho09"
        },
        "content": "                assertTrue(actualLoanId.isMaximumId());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void equalityTest() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManagerFromInitialId1 \u003d new LoanIdManager(); // An ID Manager with no last used ID"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManagerFromInitialId2 \u003d new LoanIdManager(); // Same as above"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // An ID Manager with \"2103\" as the last used ID"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManagerFromLastUsedId1 \u003d new LoanIdManager(LoanId.fromInt(2103));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // An ID Manager with \"2104\" as the last used ID"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManagerFromLastUsedId2 \u003d new LoanIdManager(LoanId.fromInt(2104));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // An ID Manager with the maximum ID as the last used ID"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManagerWithMaxedId \u003d new LoanIdManager(EXPECTED_MAXIMUM_LOAN_ID);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // An ID Manager one call away from reaching the maximum ID"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager idManagerWithOneFromMaxId \u003d new LoanIdManager(LoanId.fromInt(EXPECTED_MAXIMUM_ID_VALUE - 1));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(idManagerFromInitialId1, idManagerFromInitialId1); // Same instance"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(idManagerFromInitialId1, idManagerFromInitialId2); // Both managers start from the initial ID"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNotEquals(idManagerFromInitialId1, idManagerFromLastUsedId1); // Different last used IDs"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNotEquals(idManagerFromLastUsedId1, idManagerFromInitialId1); // Commutativity, in case of Null Pointers"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNotEquals(idManagerFromLastUsedId1, idManagerFromLastUsedId2); // Different last used IDs"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        idManagerFromLastUsedId1.getNextAvailableLoanId(); // Increment to next value."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(idManagerFromLastUsedId1, idManagerFromLastUsedId2); // The last used IDs should now be the same."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNotEquals(idManagerWithMaxedId, idManagerWithOneFromMaxId); // One is maximized; the other is not."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        idManagerWithOneFromMaxId.getNextAvailableLoanId(); // Increment to next value."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(idManagerWithMaxedId, idManagerWithOneFromMaxId); // Both should be maximized now."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNotEquals(idManagerFromInitialId1, \"Different type\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void setFromExistingManagerTest() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager existingIdManager \u003d new LoanIdManager(LoanId.fromInt(500));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager managerToSet \u003d new LoanIdManager(LoanId.fromInt(2103));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(LoanId.fromInt(2104), managerToSet.getNextAvailableLoanId());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        managerToSet.setFromExistingManager(existingIdManager);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(LoanId.fromInt(501), managerToSet.getNextAvailableLoanId());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(LoanId.fromInt(500), existingIdManager.getLastUsedLoanId());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xantho09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xantho09": 183,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/java/loanbook/model/loan/LoanIdTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xantho09"
        },
        "content": "public class LoanIdTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final int EXPECTED_MAXIMUM_LOAN_ID \u003d 999999999;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void isValidLoanIdStringTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(\"0\")); // Zero"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(\"7\")); // Minimum number of digits"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(\"1745\")); // Standard number"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(\"0002103\")); // Leading zeroes are okay as long as not more than 9 digits"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(\"123456789\")); // Maximum number of digits"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(\"999999999\")); // Largest possible ID"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"\")); // Empty string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"    \")); // All spaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"-50\")); // Negative number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"842 747\")); // Space in the ID"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"failure\")); // Non-numeric characters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"1234567890\")); // More than 9 digits"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(\"0000000000\")); // 10 digits, even though the number does not exceed 10^10."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void isValidLoanIdIntegerTest() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(0)); // Zero"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(8245)); // Standard number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(123456789)); // Maximum number of digits"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(LoanId.isValidLoanId(999999999)); // Largest possible ID"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(-1)); // Negative number"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(-1234567890)); // Extremely negative number"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanId.isValidLoanId(1234567890)); // More than 9 digits"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId id1 \u003d new LoanId(\"245\"); // Standard ID"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId id2 \u003d new LoanId(\"0\"); // Zero"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId id3 \u003d new LoanId(\"000000000\"); // Zero with leading zeroes"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId id4 \u003d new LoanId(\"0008472\"); // Leading zeroes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId id5 \u003d new LoanId(\"999999999\"); // Maximum value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(245, (int) id1.value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(0, (int) id2.value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(0, (int) id3.value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(8472, (int) id4.value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(999999999, (int) id5.value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void equalityTest() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId id1 \u003d new LoanId(\"8472\"); // Standard ID"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId id2 \u003d new LoanId(\"8472\"); // Same value as id1"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId id3 \u003d new LoanId(\"924\"); // Different value from id1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId id4 \u003d new LoanId(\"000924\"); // Same value as id3, but with leading zeroes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(id1, id2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNotEquals(id1, id3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNotEquals(id2, id3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(id3, id4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void invalidLoanIdConstructionException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Trying to construct a new Loan ID with an invalid string should throw an IllegalArgumentException."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new LoanId(\"badId\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void maximumLoanIdTest() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId maxLoanIdFromString \u003d new LoanId(Integer.toString(EXPECTED_MAXIMUM_LOAN_ID)); // The expected maximum"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId maxLoanIdFromInt \u003d LoanId.fromInt(EXPECTED_MAXIMUM_LOAN_ID);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId normalLoanId \u003d new LoanId(\"4858\"); // A standard Loan ID"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(maxLoanIdFromString.isMaximumId());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(maxLoanIdFromInt.isMaximumId());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(normalLoanId.isMaximumId());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void integerConstructorTest() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId loanId1Int \u003d LoanId.fromInt(404); // Standard Loan ID constructed from int"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId loanId1String \u003d new LoanId(\"404\"); // Same ID constructed from String"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId loanId2Int \u003d LoanId.fromInt(287472); // Standard Loan ID constructed from int"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId loanId2String \u003d new LoanId(\"287472\"); // Same ID constructed from String"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(404, (int) loanId1Int.value);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(loanId1Int, loanId1String);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(287472, (int) loanId2Int.value);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(loanId2Int, loanId2String);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void invalidIntegerConstructorTest() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e LoanId.fromInt(-1)); // Negative number"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e LoanId.fromInt(1234567890)); // More than 9 digits."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xantho09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xantho09": 108,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/java/loanbook/model/loan/LoanRateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class LoanRateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new LoanRate(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void constructorInvalidRateThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String invalidRate \u003d \"-1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new LoanRate(invalidRate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void isValidRate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // null rate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e LoanRate.isValidRate(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // invalid rates"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(LoanRate.isValidRate(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(LoanRate.isValidRate(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(LoanRate.isValidRate(\"rate\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(LoanRate.isValidRate(\"01\")); // first place is 0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(LoanRate.isValidRate(\"02.21\")); // first place is 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(LoanRate.isValidRate(\"1.123\")); // has more than two decimal places"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(LoanRate.isValidRate(\"9278ncb\")); // alphabets within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(LoanRate.isValidRate(\"12 34\")); // spaces within digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // valid rates"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(LoanRate.isValidRate(\"0\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(LoanRate.isValidRate(\"0.0\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(LoanRate.isValidRate(\"1.00\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(LoanRate.isValidRate(\"12.01\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(LoanRate.isValidRate(\"1234567890\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(LoanRate.isValidRate(\"82472637826762258923\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(LoanRate.isValidRate(\"0.22\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 45,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/java/loanbook/model/loan/LoanStatusTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prokarius"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prokarius"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prokarius"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.exceptions.SameLoanStatusException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prokarius"
        },
        "content": "public class LoanStatusTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void changeLoanStatus_sameLoanStatus_throwsDuplicateLoanException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        Loan loan \u003d new LoanBuilder().build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        Assert.assertThrows(SameLoanStatusException.class, () -\u003e loan.changeLoanStatus(LoanStatus.valueOf(\"ONGOING\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        loan.changeLoanStatus(LoanStatus.valueOf(\"RETURNED\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        Assert.assertThrows(SameLoanStatusException.class, () -\u003e loan.changeLoanStatus(LoanStatus.valueOf(\"RETURNED\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        loan.changeLoanStatus(LoanStatus.valueOf(\"DELETED\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        Assert.assertThrows(SameLoanStatusException.class, () -\u003e loan.changeLoanStatus(LoanStatus.valueOf(\"DELETED\")));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void changeLoanStatus_differentLoanStatus_statusChangedSuccessfully() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        Loan loan \u003d new LoanBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(loan.getLoanStatus().equals(LoanStatus.ONGOING));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(loan.getLoanStatus().equals(LoanStatus.RETURNED));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        loan.changeLoanStatus(LoanStatus.valueOf(\"RETURNED\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(loan.getLoanStatus().equals(LoanStatus.RETURNED));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(loan.getLoanStatus().equals(LoanStatus.DELETED));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        loan.changeLoanStatus(LoanStatus.valueOf(\"DELETED\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(loan.getLoanStatus().equals(LoanStatus.DELETED));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(loan.getLoanStatus().equals(LoanStatus.RETURNED));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void loanStatusToStringTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(LoanStatus.ONGOING.toString().equals(\"Ongoing\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(LoanStatus.RETURNED.toString().equals(\"Returned\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(LoanStatus.DELETED.toString().equals(\"Deleted\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prokarius"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prokarius": 42,
      "FongYuan": 4
    }
  },
  {
    "path": "src/test/java/loanbook/model/loan/LoanTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_LOANRATE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_LOANSTARTTIME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class LoanTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loan \u003d new LoanBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loan.getTags().remove(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void isSameLoan() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(ALICE.isSame(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(ALICE.isSame(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Loan editedAlice \u003d new LoanBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // different nric -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // different bike -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE).withBike(VALID_NAME_BIKE2).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // different phone, email, rate and time -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .withLoanRate(VALID_LOANRATE_BOB).withLoanStartTime(VALID_LOANSTARTTIME_BOB).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // same identity fields, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wn96"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // same identity fields, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // same identity fields, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wn96"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // same identity fields, different rate -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE).withLoanRate(VALID_LOANRATE_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        // same identity fields, different startTime -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE).withLoanStartTime(VALID_LOANSTARTTIME_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        // same identity fields, different endtime -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE).withLoanEndTime(VALID_LOANSTARTTIME_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        // same identity fields, different rate and startTime -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE).withLoanRate(VALID_LOANRATE_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .withLoanStartTime(VALID_LOANSTARTTIME_BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        // same identity fields, different rate and endTime -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE).withLoanRate(VALID_LOANRATE_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .withLoanEndTime(VALID_LOANSTARTTIME_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan aliceCopy \u003d new LoanBuilder(ALICE).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different loan -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan editedAlice \u003d new LoanBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        editedAlice \u003d new LoanBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void loanBuilderWithStatusConstructor() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        Loan loan \u003d new LoanBuilder().withLoanStatus(\"RETURNED\").build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(loan.getLoanStatus().equals(LoanStatus.RETURNED));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 2,
      "Kelly9373": 17,
      "prokarius": 29,
      "-": 58,
      "FongYuan": 35
    }
  },
  {
    "path": "src/test/java/loanbook/model/loan/LoanTimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "prokarius"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "prokarius"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "prokarius"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "prokarius"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "prokarius"
        },
        "content": "public class LoanTimeTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final DateTimeFormatter EXPECTED_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final DateTimeFormatter EXPECTED_DATETIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Tests for LoanTime object creation based on current system date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void constructorInputStringFormatValue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime loanTime1 \u003d new LoanTime(\"2001-02-03 19:06\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(\"2001-02-03 19:06\", loanTime1.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime loanTime2 \u003d new LoanTime(\"2021-12-24 02:06\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(\"2021-12-24 02:06\", loanTime2.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanTime loanTime3 \u003d new LoanTime(\"2103-01-01 21:03\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(\"2103-01-01 21:03\", loanTime3.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Tests for LoanTime object creation based on current system date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void constructorInputCheckCurrentDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // The LoanTime constructor that only takes in the Time (and not the Date)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // will use the current system\u0027s date. To test it, we\u0027ll manually get the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // current date and test it accordingly."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        //"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // However, it\u0027s possible (though very unlikely) that the date will change"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // between the next two statements. Therefore, we\u0027ll also have the current"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // date after the LoanTime construction. The constructed LoanTime must be"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // equal to one of them."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        String currentDateBeforeLoanTimeCreation \u003d LocalDate.now().format(EXPECTED_DATE_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanTime loanTime1 \u003d new LoanTime(\"00:25\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanTime loanTime2 \u003d new LoanTime(\"21:03\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        String currentDateAfterLoanTimeCreation \u003d LocalDate.now().format(EXPECTED_DATE_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        String loanTime1ToString \u003d loanTime1.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        String loanTime2ToString \u003d loanTime2.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(loanTime1ToString.equals(currentDateBeforeLoanTimeCreation + \" 00:25\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xantho09"
        },
        "content": "                || loanTime1ToString.equals(currentDateAfterLoanTimeCreation + \" 00:25\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(loanTime2ToString.equals(currentDateBeforeLoanTimeCreation + \" 21:03\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xantho09"
        },
        "content": "                || loanTime2ToString.equals(currentDateAfterLoanTimeCreation + \" 21:03\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Tests for LoanTime object creation given current system time."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void constructorInputCheckCurrentTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LocalDateTime currentDateTimeBeforeLoanTimeCreation \u003d LocalDateTime.now().withSecond(0).withNano(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime loanTime \u003d new LoanTime();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LocalDateTime currentDateTimeAfterLoanTimeCreation \u003d LocalDateTime.now().withSecond(0).withNano(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LocalDateTime loanTimeAsLocalDateTime \u003d LocalDateTime.parse(loanTime.toString(), EXPECTED_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // The expected results are that \"dateTimeBeforeCreation \u003c\u003d loanTime \u003c\u003d dateTimeAfterCreation\"."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Since the LocalDateTime class does not have a \"isBeforeOrEquals\" method, we will use the inverse,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // which is !isAfter."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(currentDateTimeBeforeLoanTimeCreation.isAfter(loanTimeAsLocalDateTime));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(currentDateTimeAfterLoanTimeCreation.isBefore(loanTimeAsLocalDateTime));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void isValidLongLoanTimeTests() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidLongLoanTimeFormat(\"\")); // Empty String"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidLongLoanTimeFormat(\"      \")); // Spaces only"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidLongLoanTimeFormat(\"10-12-25 14:09\")); // Invalid Year"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidLongLoanTimeFormat(\"2010-May-25 14:09\")); // Invalid Month"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidLongLoanTimeFormat(\"2010-12-25 14-09\")); // Incorrect separator format"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(LoanTime.isValidLongLoanTimeFormat(\"2010-12-25 04:09\")); // An example of a correct one"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(LoanTime.isValidLongLoanTimeFormat(\"2010-12-25     14:09\")); // Multiple Spaces"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void isValidShortLoanTimeTests() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidShortLoanTimeFormat(\"\")); // Empty String"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidShortLoanTimeFormat(\"      \")); // Spaces only"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidShortLoanTimeFormat(\"14-09\")); // Incorrect separator format"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidShortLoanTimeFormat(\"1:09\")); // Incorrect hour format"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidShortLoanTimeFormat(\"11:09 PM\")); // Incorrect time format"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(LoanTime.isValidShortLoanTimeFormat(\"04:55\")); // An example of a correct one"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    // Note that input params are already in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void isValidDateTests() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidDate(\"2011-13-16\")); // 13th Month"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidDate(\"2011-01-32\")); // 32th Day"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(LoanTime.isValidDate(\"2011-01-31\")); // January has 31 days"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidDate(\"2011-06-31\")); // June only has 30 days"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidDate(\"2014-02-29\")); // Not a leap years"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(LoanTime.isValidDate(\"2012-02-29\")); // Is a leap years"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(LoanTime.isValidDate(\"2012-05-29\")); // A correct example"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void isValidTimeTests() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidTime(\"26:16\")); // Too many hours"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertFalse(LoanTime.isValidTime(\"21:67\")); // Too many minutes"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(LoanTime.isValidTime(\"21:27\")); // A correct example"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertTrue(LoanTime.isValidTime(\"00:00\")); // Midnight"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void isValidLoanTimeTests() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanTime.isValidLoanTime(\"\")); // Empty string"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanTime.isValidLoanTime(\"      \")); // Spaces only"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanTime.isValidLoanTime(\"100-12-25 14:09\")); // Invalid Year"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanTime.isValidLoanTime(\"2010-Jan-01 14:09\")); // Invalid Month"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanTime.isValidLoanTime(\"2010-12-25 14.09\")); // Incorrect separator format"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanTime.isValidLoanTime(\"14.09\")); // Incorrect separator format"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanTime.isValidLoanTime(\"1:09\")); // Incorrect hour format"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanTime.isValidLoanTime(\"11:09 PM\")); // Incorrect time format"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertFalse(LoanTime.isValidLoanTime(\"2103\")); // No separator"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Examples of valid short and long formatted strings."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(LoanTime.isValidLoanTime(\"04:55\")); // Short format"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertTrue(LoanTime.isValidLoanTime(\"2010-12-25 04:09\")); // Long format"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void loanTimeDifferences() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime loanTime1 \u003d new LoanTime(\"2001-01-01 12:00\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime loanTime2 \u003d new LoanTime(\"2001-01-01 14:00\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertEquals(120, loanTime1.loanTimeDifferenceMinutes(loanTime2)); // Functional use"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertEquals(0, loanTime2.loanTimeDifferenceMinutes(loanTime1)); // Time 2 earlier"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertEquals(120, LoanTime.loanTimeDifferenceMinutes(loanTime1, loanTime2)); // Functional use"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertEquals(0, LoanTime.loanTimeDifferenceMinutes(loanTime2, loanTime1)); // Time 2 earlier"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime loanTime3 \u003d new LoanTime(\"2001-01-02 12:05\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertEquals(1445, loanTime1.loanTimeDifferenceMinutes(loanTime3)); // Across Day"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void loanEqualityTest() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanTime loanTime1 \u003d new LoanTime(\"2103-01-01 12:00\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanTime loanTime2 \u003d new LoanTime(\"2103-01-01 12:00\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanTime loanTime3 \u003d new LoanTime(\"2103-01-02 12:00\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanTime loanTime4 \u003d new LoanTime(\"2103-01-01 12:30\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(loanTime1, loanTime2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNotEquals(loanTime1, loanTime3); // Different date"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNotEquals(loanTime1, loanTime4); // Different time"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void constructorsDoesNotThrowErrorTest() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime loanTime1 \u003d new LoanTime();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime loanTime2 \u003d new LoanTime();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        // assertEquals(0, LoanTime.loanTimeDifferenceMinutes(loanTime1, loanTime2)); // Created within a minute"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime loanTime3 \u003d new LoanTime(\"09:27\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime loanTime4 \u003d new LoanTime(\"12:05\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertEquals(158, LoanTime.loanTimeDifferenceMinutes(loanTime3, loanTime4)); // 2 hours and 38 minutes"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime loanTime5 \u003d new LoanTime(\"2001-01-02 12:05\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        LoanTime loanTime6 \u003d new LoanTime(\"2002-01-02 12:05\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertEquals(525600, LoanTime.loanTimeDifferenceMinutes(loanTime5, loanTime6)); // Minutes in a (non leap) year"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void toStringIsValidInputTest() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        String loanTimeString1 \u003d \"2103-01-03 21:03\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanTime loanTime1 \u003d new LoanTime(loanTimeString1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        String loanTime1ToString \u003d loanTime1.toString();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // The output of toString should match the initial input string."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(loanTimeString1, loanTime1ToString);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // If used to create another LoanTime object, it should be equivalent."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanTime loanTime2 \u003d new LoanTime(loanTime1ToString);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(loanTime1, loanTime2);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Test the same thing with a LoanTime created using only a time string."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanTime loanTime3 \u003d new LoanTime(\"20:00\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanTime loanTime4 \u003d new LoanTime(loanTime3.toString());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(loanTime3, loanTime4);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "prokarius"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "prokarius": 111,
      "xantho09": 97,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/model/loan/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different loan -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(predicate.test(new LoanBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(predicate.test(new LoanBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(predicate.test(new LoanBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(predicate.test(new LoanBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(predicate.test(new LoanBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(predicate.test(new LoanBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // Keywords match phone, email, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(predicate.test(new LoanBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 2,
      "-": 63,
      "FongYuan": 10
    }
  },
  {
    "path": "src/test/java/loanbook/model/loan/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/java/loanbook/model/loan/NricTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wn96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wn96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wn96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wn96"
        },
        "content": "public class NricTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Nric(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public void constructor_invalidNric_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String invalidNric \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public void isValidNric() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // null nric"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // invalid nric"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertFalse(Nric.isValidNric(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertFalse(Nric.isValidNric(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertFalse(Nric.isValidNric(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertFalse(Nric.isValidNric(\"njkakjsdnfa\")); // contains random alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // Wrong checksum"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertFalse(Nric.isValidNric(\"S1234567Z\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertFalse(Nric.isValidNric(\"T1234567Z\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertFalse(Nric.isValidNric(\"F1234567Z\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertFalse(Nric.isValidNric(\"G1234567Z\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // valid nric"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertTrue(Nric.isValidNric(\"S1234567D\")); // IC for citizens born in 20th century"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertTrue(Nric.isValidNric(\"T1234567J\")); // IC for citizens born in 21th century"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertTrue(Nric.isValidNric(\"F1234567N\")); // Foreign IC F"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertTrue(Nric.isValidNric(\"G1234567X\")); // Foreign IC G"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wn96"
        },
        "content": "        // Inconsistant case"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertTrue(Nric.isValidNric(\"s1234567d\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertTrue(Nric.isValidNric(\"t1234567j\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertTrue(Nric.isValidNric(\"f1234567N\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertTrue(Nric.isValidNric(\"G1234567x\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void censor() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Nric nric1 \u003d new Nric(\"S1234567D\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Nric nric2 \u003d new Nric(\"T1234567J\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Nric nric3 \u003d new Nric(\"F1234567N\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Nric nric4 \u003d new Nric(\"G1234567X\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Nric nric5 \u003d new Nric(\"s1234567d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"Sxxxxx67D\", nric1.getCensored());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"Txxxxx67J\", nric2.getCensored());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"Fxxxxx67N\", nric3.getCensored());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"Gxxxxx67X\", nric4.getCensored());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"Sxxxxx67D\", nric5.getCensored());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void censorPartLengthCheck() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Nric testNric \u003d new Nric(\"G1234567X\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"xxxxx\", testNric.doCensoring(testNric.toString().length() - 4));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wn96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 49,
      "Kelly9373": 21,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/java/loanbook/model/loan/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void censor() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Phone phone1 \u003d new Phone(\"911\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Phone phone2 \u003d new Phone(\"1234\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Phone phone3 \u003d new Phone(\"12345\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Phone phone4 \u003d new Phone(\"123456\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Phone phone5 \u003d new Phone(\"1234567\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Phone phone6 \u003d new Phone(\"12345678\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Phone phone7 \u003d new Phone(\"124293842033123\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"911\", phone1.getCensored());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"1x34\", phone2.getCensored());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"1xx45\", phone3.getCensored());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"1xxx56\", phone4.getCensored());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"1xxxx67\", phone5.getCensored());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"1xxxxx78\", phone6.getCensored());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"1xxxxxxxxxxxx23\", phone7.getCensored());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void censorPartLengthCheck() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Phone testPhone \u003d new Phone(\"90000000\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"\", testPhone.doCensoring(3));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"x\", testPhone.doCensoring(4));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"xx\", testPhone.doCensoring(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(\"xxx\", testPhone.doCensoring(6));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 28,
      "-": 39,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/java/loanbook/model/loan/UniqueLoanListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.loan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.exceptions.DuplicateLoanException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.exceptions.LoanNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class UniqueLoanListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private final UniqueLoanList uniqueLoanList \u003d new UniqueLoanList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void containsNullLoanThrowsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void containsLoanNotInListReturnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(uniqueLoanList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void containsLoanInListReturnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(uniqueLoanList.contains(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void containsLoanWithSameIdentityFieldsInListReturnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.add(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Loan editedAlice \u003d new LoanBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(uniqueLoanList.contains(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void addNullLoanThrowsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.add(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void addDuplicateLoanThrowsDuplicateLoanException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.add(ALICE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(DuplicateLoanException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setNullTargetLoanThrowsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.set(null, ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setNullEditedLoanThrowsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.set(ALICE, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setTargetLoanNotInListThrowsLoanNotFoundException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(LoanNotFoundException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.set(ALICE, ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setEditedLoanIsSameLoan_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.set(ALICE, ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        UniqueLoanList expectedUniqueLoanList \u003d new UniqueLoanList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedUniqueLoanList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedUniqueLoanList, uniqueLoanList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setEditedLoanHasSameIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.add(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wn96"
        },
        "content": "        Loan editedAlice \u003d new LoanBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.set(ALICE, editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        UniqueLoanList expectedUniqueLoanList \u003d new UniqueLoanList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedUniqueLoanList.add(editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedUniqueLoanList, uniqueLoanList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setEditedLoanHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.set(ALICE, BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        UniqueLoanList expectedUniqueLoanList \u003d new UniqueLoanList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedUniqueLoanList.add(BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedUniqueLoanList, uniqueLoanList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setEditedLoanHasNonUniqueIdentityThrowsDuplicateLoanException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.add(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.add(BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(DuplicateLoanException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.set(ALICE, BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void removeNullLoanThrowsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.remove(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void removeLoanDoesNotExistThrowsLoanNotFoundException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(LoanNotFoundException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.remove(ALICE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void remove_existingLoanRemovesLoan() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.add(ALICE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.remove(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        UniqueLoanList expectedUniqueLoanList \u003d new UniqueLoanList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedUniqueLoanList, uniqueLoanList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setNullUniqueLoanListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.setAll((UniqueLoanList) null);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setUniqueLoanListReplacesOwnListWithProvidedUniqueLoanList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.add(ALICE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        UniqueLoanList expectedUniqueLoanList \u003d new UniqueLoanList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedUniqueLoanList.add(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.setAll(expectedUniqueLoanList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedUniqueLoanList, uniqueLoanList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setNullListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.setAll((List\u003cLoan\u003e) null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setListReplacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.add(ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cLoan\u003e loanList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.setAll(loanList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        UniqueLoanList expectedUniqueLoanList \u003d new UniqueLoanList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedUniqueLoanList.add(BOB);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedUniqueLoanList, uniqueLoanList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setListWithDuplicateLoansThrowsDuplicateLoanException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        List\u003cLoan\u003e listWithDuplicateLoans \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(DuplicateLoanException.class);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.setAll(listWithDuplicateLoans);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void asUnmodifiableObservableListModifyListThrowsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uniqueLoanList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 2,
      "FongYuan": 182
    }
  },
  {
    "path": "src/test/java/loanbook/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/java/loanbook/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        userPrefs.setLoanBookFilePath(Paths.get(\"loanbook.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "-": 130,
      "FongYuan": 3
    }
  },
  {
    "path": "src/test/java/loanbook/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoanBook.getTypicalLoanBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.model.LoanBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlLoanBookStorage loanBookStorage \u003d new XmlLoanBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        storageManager \u003d new StorageManager(loanBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void loanBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         * {@link XmlLoanBookStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlLoanBookStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBook original \u003d getTypicalLoanBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        storageManager.saveLoanBook(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        ReadOnlyLoanBook retrieved \u003d storageManager.readLoanBook().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(original, new LoanBook(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void getLoanBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertNotNull(storageManager.getLoanBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void handleLoanBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlLoanBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        storage.handleLoanBookChangedEvent(new LoanBookChangedEvent(new LoanBook()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    class XmlLoanBookStorageExceptionThrowingStub extends XmlLoanBookStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        public XmlLoanBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        public void saveLoanBook(ReadOnlyLoanBook loanBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 17,
      "-": 78,
      "FongYuan": 8
    }
  },
  {
    "path": "src/test/java/loanbook/storage/XmlAdaptedBikeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.storage.XmlAdaptedBike.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalBikes.BIKE1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class XmlAdaptedBikeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Not@Bike\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final String VALID_NAME \u003d BIKE1.getName().toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelTypeValidBikeDetails_returnsBike() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlAdaptedBike bike \u003d new XmlAdaptedBike(BIKE1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(BIKE1, bike.toModelType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelTypeInvalidNameThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlAdaptedBike bike \u003d new XmlAdaptedBike(INVALID_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, bike::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelTypeNullNameThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlAdaptedBike bike \u003d new XmlAdaptedBike((String) null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, bike::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 37
    }
  },
  {
    "path": "src/test/java/loanbook/storage/XmlAdaptedLoanIdManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanIdManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xantho09"
        },
        "content": "public class XmlAdaptedLoanIdManagerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void defaultConstructorTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanIdManager xmlManager \u003d new XmlAdaptedLoanIdManager(); // No exception should be thrown."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(xmlManager, xmlManager);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void toModelTypeValidTest() throws IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Construct from model\u0027s LoanIdManager."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager modelManager1 \u003d new LoanIdManager(LoanId.fromInt(500));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanIdManager xmlManager1 \u003d new XmlAdaptedLoanIdManager(modelManager1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Construct from XmlAdaptedLoanId, exactly the same as above."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanId xmlId \u003d new XmlAdaptedLoanId(500);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanIdManager xmlManager2 \u003d new XmlAdaptedLoanIdManager(xmlId);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(modelManager1, xmlManager1.toModelType()); // Converting back into the original"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(modelManager1, xmlManager2.toModelType()); // Converting from XML object to model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Construct a model LoanIdManager with no last used Loan ID (i.e. it starts from the initial Loan ID)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager modelManager2 \u003d new LoanIdManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanIdManager xmlManager3 \u003d new XmlAdaptedLoanIdManager(modelManager2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // Construct with null as the lastUsedLoanId. When converted to the model type, the output should be a"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        // LoanIdManager that starts from the initial Loan ID."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanIdManager xmlManager4 \u003d new XmlAdaptedLoanIdManager((XmlAdaptedLoanId) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(modelManager2, xmlManager3.toModelType()); // Converting back into the original"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(modelManager2, xmlManager4.toModelType()); // Converting from XML object to model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void toModelTypeInvalidTest() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanId invalidLoanId \u003d new XmlAdaptedLoanId(-1); // Negative value"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanIdManager invalidLoanIdManager \u003d new XmlAdaptedLoanIdManager(invalidLoanId);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertThrows(IllegalValueException.class, invalidLoanIdManager::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void equalityTest() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanIdManager modelManager \u003d new LoanIdManager(LoanId.fromInt(2103));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanId xmlId1 \u003d new XmlAdaptedLoanId(2103);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanId xmlId2 \u003d new XmlAdaptedLoanId(9001);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanIdManager xmlManager1 \u003d new XmlAdaptedLoanIdManager(modelManager);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanIdManager xmlManager2 \u003d new XmlAdaptedLoanIdManager(xmlId1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanIdManager xmlManager3 \u003d new XmlAdaptedLoanIdManager(xmlId2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(xmlManager1, xmlManager1); // Same instance"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(xmlManager1, xmlManager2); // Same value"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNotEquals(xmlManager2, xmlManager3); // Different last used Loan ID"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNotEquals(xmlManager2, \"Different type\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xantho09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xantho09": 66,
      "FongYuan": 5
    }
  },
  {
    "path": "src/test/java/loanbook/storage/XmlAdaptedLoanIdTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xantho09"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xantho09"
        },
        "content": "public class XmlAdaptedLoanIdTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void toModelTypeValidId() throws IllegalValueException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId validLoanId \u003d new LoanId(\"500\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanId xmlAdaptedLoanId1 \u003d new XmlAdaptedLoanId(validLoanId); // Construct from LoanId"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanId xmlAdaptedLoanId2 \u003d new XmlAdaptedLoanId(500); // Construct from integer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(validLoanId, xmlAdaptedLoanId1.toModelType());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(validLoanId, xmlAdaptedLoanId2.toModelType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void toModelTypeInvalidIdThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanId xmlAdaptedLoanId \u003d new XmlAdaptedLoanId(1234567890); // More than 9 digits"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        String expectedMessage \u003d LoanId.MESSAGE_LOANID_CONSTRAINTS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, xmlAdaptedLoanId::toModelType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void equalityTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        LoanId loanId \u003d new LoanId(\"500\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanId xmlAdaptedLoanId1 \u003d new XmlAdaptedLoanId(loanId);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanId xmlAdaptedLoanId2 \u003d new XmlAdaptedLoanId(500);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanId xmlAdaptedLoanId3 \u003d new XmlAdaptedLoanId(2103);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(xmlAdaptedLoanId1, xmlAdaptedLoanId1); // Same instance"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(xmlAdaptedLoanId1, xmlAdaptedLoanId2); // Same value"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNotEquals(xmlAdaptedLoanId1, xmlAdaptedLoanId3); // Different value"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertNotEquals(xmlAdaptedLoanId3, \"Different type\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void defaultConstructorTest() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlAdaptedLoanId xmlAdaptedLoanId \u003d new XmlAdaptedLoanId(); // No exception should be thrown."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        assertEquals(xmlAdaptedLoanId, xmlAdaptedLoanId);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xantho09"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xantho09": 47,
      "FongYuan": 4
    }
  },
  {
    "path": "src/test/java/loanbook/storage/XmlAdaptedLoanTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.storage.XmlAdaptedLoan.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanRate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Nric;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class XmlAdaptedLoanTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String INVALID_NRIC \u003d \"A12#4567B\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String INVALID_BIKE \u003d \"001B^^E\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String INVALID_LOANRATE \u003d \"12.333\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String INVALID_LOANTIME \u003d \"2017-02-30 12:56\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String VALID_NRIC \u003d BENSON.getNric().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String VALID_BIKE \u003d BENSON.getBike().getName().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final String VALID_LOANRATE \u003d BENSON.getLoanRate().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private static final String VALID_LOANTIMEA \u003d BENSON.getLoanStartTime().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private static final String VALID_LOANTIMEB \u003d BENSON.getLoanEndTime().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelTypeValidLoanDetails_returnsLoan() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlAdaptedLoan loan \u003d new XmlAdaptedLoan(BENSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(BENSON, loan.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelTypeInvalidNameThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(INVALID_NAME,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_NRIC,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_PHONE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_EMAIL,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_BIKE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_LOANRATE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelTypeNullNameThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(null,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_NRIC,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_PHONE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_EMAIL,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_BIKE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_LOANRATE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void toModelTypeInvalidNricThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        INVALID_NRIC,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_PHONE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_EMAIL,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_BIKE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_LOANRATE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String expectedMessage \u003d Nric.MESSAGE_NRIC_CONSTRAINTS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void toModelTypeNullNricThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_PHONE,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_EMAIL,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_BIKE,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_LOANRATE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelTypeInvalidPhoneThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_NRIC,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        INVALID_PHONE,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_EMAIL,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_BIKE,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_LOANRATE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelTypeNullPhoneThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_NRIC,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_EMAIL,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_BIKE,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_LOANRATE,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelTypeInvalidEmailThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_NRIC,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_PHONE,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        INVALID_EMAIL,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_BIKE,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_LOANRATE,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelTypeNullEmailThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_NRIC,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_PHONE,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_BIKE,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_LOANRATE,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void toModelTypeInvalidBikeThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_NRIC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_PHONE,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_EMAIL,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        INVALID_BIKE,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_LOANRATE,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void toModelTypeNullBikeThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_NRIC,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_PHONE,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_EMAIL,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_LOANRATE,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Bike.class.getSimpleName());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void toModelTypeInvalidLoanRateThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_NRIC,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_PHONE,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_EMAIL,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_BIKE,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        INVALID_LOANRATE,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String expectedMessage \u003d LoanRate.MESSAGE_LOANRATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void toModelTypeNullLoanRateThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_NRIC,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_PHONE,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_EMAIL,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_BIKE,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, LoanRate.class.getSimpleName());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void toModelTypeInvalidLoanTimeThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_NRIC,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_PHONE,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_EMAIL,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_BIKE,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_LOANRATE,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        INVALID_LOANTIME,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String expectedMessage \u003d LoanTime.MESSAGE_LOANTIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void toModelTypeNullLoanTimeThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_NRIC,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_PHONE,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_EMAIL,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_BIKE,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_LOANRATE,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, LoanTime.class.getSimpleName());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, loan::toModelType);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelTypeInvalidTagsThrowsIllegalValueException() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlAdaptedLoan loan \u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                new XmlAdaptedLoan(VALID_NAME,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_NRIC,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_PHONE,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_EMAIL,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_BIKE,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        VALID_LOANRATE,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEA,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                        VALID_LOANTIMEB,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                        invalidTags);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, loan::toModelType);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 173,
      "prokarius": 30,
      "-": 55,
      "FongYuan": 34
    }
  },
  {
    "path": "src/test/java/loanbook/storage/XmlLoanBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoanBook.getTypicalLoanBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.HOON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.IDA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class XmlLoanBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlLoanBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void readLoanBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        readLoanBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private java.util.Optional\u003cReadOnlyLoanBook\u003e readLoanBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return new XmlLoanBookStorage(Paths.get(filePath)).readLoanBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(readLoanBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        readLoanBook(\"NotXmlFormatLoanBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void readLoanBook_invalidLoanLoanBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        readLoanBook(\"invalidLoanLoanBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void readLoanBook_invalidAndValidLoanLoanBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        readLoanBook(\"invalidAndValidLoanLoanBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void readAndSaveLoanBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempLoanBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBook original \u003d getTypicalLoanBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlLoanBookStorage xmlLoanBookStorage \u003d new XmlLoanBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        xmlLoanBookStorage.saveLoanBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        ReadOnlyLoanBook readBack \u003d xmlLoanBookStorage.readLoanBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(original, new LoanBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        original.addLoan(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        original.removeLoan(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        xmlLoanBookStorage.saveLoanBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        readBack \u003d xmlLoanBookStorage.readLoanBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(original, new LoanBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        original.addLoan(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        xmlLoanBookStorage.saveLoanBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        readBack \u003d xmlLoanBookStorage.readLoanBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(original, new LoanBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void saveLoanBook_nullLoanBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        saveLoanBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Saves {@code loanBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private void saveLoanBook(ReadOnlyLoanBook loanBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            new XmlLoanBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                    .saveLoanBook(loanBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void saveLoanBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        saveLoanBook(new LoanBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 119,
      "FongYuan": 8
    }
  },
  {
    "path": "src/test/java/loanbook/storage/XmlSerializableLoanBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.TypicalLoanBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class XmlSerializableLoanBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableLoanBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final Path TYPICAL_LOANBOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalLoanBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final Path INVALID_BIKE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidBikeLoanBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final Path INVALID_LOAN_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidLoanLoanBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private static final Path INVALID_LOANSTATUS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidLoanStatusLoanBook.xml\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final Path DUPLICATE_BIKE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateBikeLoanBook.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final Path DUPLICATE_LOAN_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateLoanLoanBook.xml\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    private static final Path INVALID_LOAN_ID_MANAGER_FILE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xantho09"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidLoanIdManagerLoanBook.xml\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelType_typicalLoansFile_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlSerializableLoanBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_LOANBOOK_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            XmlSerializableLoanBook.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        LoanBook loanBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        LoanBook typicalLoanBook \u003d TypicalLoanBook.getTypicalLoanBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(loanBookFromFile, typicalLoanBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelType_invalidBikeFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlSerializableLoanBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_BIKE_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                XmlSerializableLoanBook.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelType_invalidLoanFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlSerializableLoanBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_LOAN_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            XmlSerializableLoanBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelType_duplicateBikes_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlSerializableLoanBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_BIKE_FILE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                XmlSerializableLoanBook.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        thrown.expectMessage(XmlSerializableLoanBook.MESSAGE_DUPLICATE_BIKE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public void toModelType_invalidLoanStatusFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        XmlSerializableLoanBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_LOANSTATUS_FILE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                XmlSerializableLoanBook.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void toModelType_duplicateLoans_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlSerializableLoanBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_LOAN_FILE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            XmlSerializableLoanBook.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        thrown.expectMessage(XmlSerializableLoanBook.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public void toModelType_invalidLoanIdManager_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        XmlSerializableLoanBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_LOAN_ID_MANAGER_FILE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xantho09"
        },
        "content": "                XmlSerializableLoanBook.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 11,
      "prokarius": 9,
      "-": 30,
      "xantho09": 10,
      "FongYuan": 31
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/BikeBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * A utility class to help with building Bike objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class BikeBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"BIKE001\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public BikeBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Initializes the BikeBuilder with the data of {@code bikeToCopy}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public BikeBuilder(Bike bikeToCopy) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        name \u003d bikeToCopy.getName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Sets the {@code Name} of the {@code Bike} that we are building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public BikeBuilder withName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public Bike build() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new Bike(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 36
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/BikeUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.AddBikeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * A utility class for Bike."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class BikeUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns an add command string for adding the {@code bike}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static String getAddBikeCommand(Bike bike) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return AddBikeCommand.COMMAND_WORD + \" \" + getBikeDetails(bike);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns the part of command string for the given {@code bike}\u0027s details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static String getBikeDetails(Bike bike) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        sb.append(PREFIX_NAME + bike.getName().value + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 28
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/EditLoanDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.EditCommand.EditLoanDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanRate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * A utility class to help with building EditLoanDescriptor objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class EditLoanDescriptorBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private EditLoanDescriptor descriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public EditLoanDescriptorBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor \u003d new EditLoanDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public EditLoanDescriptorBuilder(EditCommand.EditLoanDescriptor descriptor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditLoanDescriptor(descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns an {@code EditLoanDescriptor} with fields containing {@code loan}\u0027s details"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public EditLoanDescriptorBuilder(Loan loan) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor \u003d new EditCommand.EditLoanDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor.setName(loan.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        descriptor.setNric(loan.getNric());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor.setPhone(loan.getPhone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor.setEmail(loan.getEmail());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        descriptor.setBike(loan.getBike());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        descriptor.setLoanRate(loan.getLoanRate());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        descriptor.setLoanStartTime(loan.getLoanStartTime());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        descriptor.setLoanEndTime(loan.getLoanEndTime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        descriptor.setLoanStatus(loan.getLoanStatus());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor.setTags(loan.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Sets the {@code Name} of the {@code EditLoanDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public EditLoanDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Sets the {@code Nric} of the {@code EditLoanDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public EditLoanDescriptorBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        descriptor.setNric(new Nric(nric));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditLoanDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public EditLoanDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Sets the {@code Email} of the {@code EditLoanDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public EditLoanDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Sets the {@code Bike} of the {@code EditLoanDescriptor} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public EditLoanDescriptorBuilder withBike(String bike) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        descriptor.setBike(new Bike(new Name(bike)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Sets the {@code LoanRate} of the {@code EditLoanDescriptor} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public EditLoanDescriptorBuilder withLoanRate(String rate) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        descriptor.setLoanRate(new LoanRate(rate));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Sets the {@code LoanStartTime} of the {@code EditLoanDescriptor} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public EditLoanDescriptorBuilder withLoanStartTime(String time) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        descriptor.setLoanStartTime(new LoanTime(time));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Sets the {@code LoanEndTime} of the {@code EditLoanDescriptor} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public EditLoanDescriptorBuilder withLoanEndTime(String time) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        descriptor.setLoanEndTime(new LoanTime(time));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditLoanDescriptor}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public EditLoanDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public EditCommand.EditLoanDescriptor build() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 32,
      "prokarius": 14,
      "FongYuan": 82
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/EventsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods related to events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * has been posted to all subscribers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postNow(BaseEvent event) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers at some unspecified time in the future."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postLater(BaseEvent event) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "FongYuan": 3
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/LoanBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * A utility class to help with building Loanbook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " *     {@code LoanBook ab \u003d new LoanBookBuilder().withBike(\"BiK001\").withLoan(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class LoanBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private LoanBook loanBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public LoanBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBook \u003d new LoanBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public LoanBookBuilder(LoanBook loanBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        this.loanBook \u003d loanBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Adds a new {@code Bike} to the {@code LoanBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public LoanBookBuilder withBike(Bike bike) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBook.addBike(bike);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Adds a new {@code Loan} to the {@code LoanBook} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public LoanBookBuilder withLoan(Loan loan) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loanBook.addLoan(loan);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public LoanBook build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return loanBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 39,
      "FongYuan": 4
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/LoanBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanRate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanStatus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Nric;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * A utility class to help with building Loan objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class LoanBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String DEFAULT_NRIC \u003d \"G1234567X\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final String DEFAULT_BIKE \u003d VALID_NAME_BIKE1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final String DEFAULT_LOANRATE \u003d \"12.3\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static final String DEFAULT_LOANSTARTTIME \u003d \"11:45\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static final String DEFAULT_LOANENDTIME \u003d \"12:45\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public static final String DEFAULT_LOANSTATUS \u003d \"ONGOING\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Nric nric;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private Bike bike;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private LoanRate rate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private LoanTime startTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private LoanTime endTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    private LoanStatus loanStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanBuilder() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        nric \u003d new Nric(DEFAULT_NRIC);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        bike \u003d new Bike(new Name(DEFAULT_BIKE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        rate \u003d new LoanRate(DEFAULT_LOANRATE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        startTime \u003d new LoanTime(DEFAULT_LOANSTARTTIME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        endTime \u003d new LoanTime(DEFAULT_LOANENDTIME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        loanStatus \u003d LoanStatus.valueOf(DEFAULT_LOANSTATUS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Initializes the LoanBuilder with the data of {@code loanToCopy}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanBuilder(Loan loanToCopy) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        name \u003d loanToCopy.getName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        nric \u003d loanToCopy.getNric();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        phone \u003d loanToCopy.getPhone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        email \u003d loanToCopy.getEmail();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        bike \u003d loanToCopy.getBike();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        rate \u003d loanToCopy.getLoanRate();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        startTime \u003d loanToCopy.getLoanStartTime();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        endTime \u003d loanToCopy.getLoanEndTime();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        loanStatus \u003d loanToCopy.getLoanStatus();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(loanToCopy.getTags());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Sets the {@code Name} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanBuilder withName(String name) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Sets the {@code Nric} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public LoanBuilder withNric(String nric) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        this.nric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Loan} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Sets the {@code Phone} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Sets the {@code Email} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Sets the {@code Bike} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanBuilder withBike(String bikeName) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        this.bike \u003d new Bike(new Name(bikeName));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Sets the {@code LoanRate} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public LoanBuilder withLoanRate(String rate) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        this.rate \u003d new LoanRate(rate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Sets the {@code LoanTime} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * This method affects the start time of the loan"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public LoanBuilder withLoanStartTime(String time) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.startTime \u003d new LoanTime(time);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "prokarius"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Sets the {@code LoanTime} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * This method affects the end time of the loan"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public LoanBuilder withLoanEndTime(String time) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.endTime \u003d new LoanTime(time);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     * Sets the {@code loanStatus} of the {@code Loan} that we are building."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "prokarius"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public LoanBuilder withLoanStatus(String loanStatus) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        this.loanStatus \u003d LoanStatus.valueOf(loanStatus);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    public Loan build() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wn96"
        },
        "content": "        return new Loan(name, nric, phone, email, bike, rate, startTime, endTime, loanStatus, tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "prokarius"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 1,
      "Kelly9373": 39,
      "prokarius": 32,
      "FongYuan": 88
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/LoanUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_BIKE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_LOANRATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.EditCommand.EditLoanDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * A utility class for Loan."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class LoanUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns an add command string for adding the {@code loan}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static String getAddCommand(Loan loan) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getLoanDetails(loan);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns the part of command string for the given {@code loan}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static String getLoanDetails(Loan loan) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        sb.append(PREFIX_NAME + loan.getName().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        sb.append(PREFIX_NRIC + loan.getNric().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        sb.append(PREFIX_PHONE + loan.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        sb.append(PREFIX_EMAIL + loan.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        sb.append(PREFIX_BIKE + loan.getBike().getName().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        sb.append(PREFIX_LOANRATE + loan.getLoanRate().toString() + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loan.getTags().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.value + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns the part of command string for the given {@code EditLoanDescriptor}\u0027s details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static String getEditLoanDescriptorDetails(EditLoanDescriptor descriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.toString()).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        descriptor.getBike().ifPresent(bike -\u003e sb.append(PREFIX_BIKE).append(bike.getName().value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        descriptor.getLoanRate().ifPresent(rate -\u003e sb.append(PREFIX_LOANRATE).append(rate.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.value).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 6,
      "-": 34,
      "FongYuan": 28
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/ModelStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Password;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void replaceData(ReadOnlyLoanBook newData) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ReadOnlyLoanBook getLoanBook() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean hasBike(Bike bike) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            \"This method should not be called.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public Optional\u003cBike\u003e getBike(String bikeName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void addBike(Bike bike) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void deleteBike(Bike target) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void updateBike(Bike target, Bike editedBike) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setBikes(List\u003cBike\u003e bikes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ObservableList\u003cBike\u003e getFilteredBikeList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void updateFilteredBikeList(Predicate\u003cBike\u003e predicate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean hasLoan(Loan loan) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void addLoan(Loan loan) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void deleteLoan(Loan target) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void updateLoan(Loan target, Loan editedLoan) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void setLoans(List\u003cLoan\u003e loans) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void resetLoans() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public ObservableList\u003cLoan\u003e getFilteredLoanList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void updateFilteredLoanList(Predicate\u003cLoan\u003e predicate) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean canUndoLoanBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public boolean canRedoLoanBook() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void undoLoanBook() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void redoLoanBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void commitLoanBook() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public String getPass() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wn96"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wn96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public LoanId getNextAvailableId() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    public boolean hasNextAvailableId() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xantho09"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xantho09"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void resetId() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wn96"
        },
        "content": "    public void setPass(Password pass) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wn96"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 10,
      "xantho09": 10,
      "FongYuan": 139
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns the middle index of the loan in the {@code model}\u0027s loan list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredLoanList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns the last index of the loan in the {@code model}\u0027s loan list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredLoanList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns the loan in the {@code model}\u0027s loan list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static Loan getLoan(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return model.getFilteredLoanList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "FongYuan": 11
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/TypicalBikes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE3;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE4;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * A utility class containing a list of {@code Bike} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class TypicalBikes {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final Bike BIKE1 \u003d new BikeBuilder().withName(VALID_NAME_BIKE1).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final Bike BIKE2 \u003d new BikeBuilder().withName(VALID_NAME_BIKE2).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final Bike BIKE3 \u003d new BikeBuilder().withName(VALID_NAME_BIKE3).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final Bike BIKE4 \u003d new BikeBuilder().withName(VALID_NAME_BIKE4).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static List\u003cBike\u003e getTypicalBikes() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BIKE1, BIKE2, BIKE3, BIKE4));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 27
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final Index INDEX_FIRST_LOAN \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final Index INDEX_SECOND_LOAN \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final Index INDEX_THIRD_LOAN \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "FongYuan": 5
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/TypicalLoanBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanIdManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * A utility class containing a factory for a {@code LoanBook} object to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class TypicalLoanBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns an {@code LoanBook} with all the typical bikes and loans."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static LoanBook getTypicalLoanBook() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        LoanBook lb \u003d new LoanBook();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        for (Bike bike : TypicalBikes.getTypicalBikes()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            lb.addBike(bike);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        for (Loan loan : TypicalLoans.getTypicalLoans()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            lb.addLoan(loan);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xantho09"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        int lastUsedId \u003d lb.getLoanList().size() + LoanId.MINIMUM_ID - 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        LoanId lastUsedLoanId \u003d LoanId.isValidLoanId(lastUsedId) ? LoanId.fromInt(lastUsedId) : null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        lb.setLoanIdManager(new LoanIdManager(lastUsedLoanId));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return lb;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xantho09": 2,
      "FongYuan": 30
    }
  },
  {
    "path": "src/test/java/loanbook/testutil/TypicalLoans.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_LOANENDTIME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_LOANENDTIME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_LOANRATE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_LOANRATE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_LOANSTARTTIME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_LOANSTARTTIME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": " * A utility class containing a list of {@code Loan} objects to be used in tests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class TypicalLoans {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final Loan ALICE \u003d new LoanBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withNric(\"S0848937H\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .withBike(VALID_NAME_BIKE1)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withLoanRate(\"1.1\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wn96"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanStartTime(\"12:33\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanEndTime(\"23:54\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static final Loan BENSON \u003d new LoanBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withNric(\"F1342714M\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .withBike(VALID_NAME_BIKE1)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withLoanRate(\"0.15\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanStartTime(\"2017-10-12 06:08\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanEndTime(\"2017-10-12 23:54\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final Loan CARL \u003d new LoanBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withNric(\"T0238282I\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .withBike(VALID_NAME_BIKE1)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withLoanRate(\"23.9\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanStartTime(\"14:20\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanEndTime(\"23:54\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final Loan DANIEL \u003d new LoanBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withNric(\"S9335895C\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .withBike(VALID_NAME_BIKE2)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withLoanRate(\"9.0\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanStartTime(\"17:56\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanEndTime(\"23:54\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final Loan ELLE \u003d new LoanBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withNric(\"G9112925L\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .withBike(VALID_NAME_BIKE2)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withLoanRate(\"5.55\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanStartTime(\"2010-12-30 10:30\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanEndTime(\"2010-12-30 23:54\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final Loan FIONA \u003d new LoanBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withNric(\"G9400645M\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .withBike(VALID_NAME_BIKE2)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withLoanRate(\"33.3\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanStartTime(\"01:01\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanEndTime(\"23:54\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final Loan GEORGE \u003d new LoanBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withNric(\"S8313623E\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .withBike(VALID_NAME_BIKE2)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withLoanRate(\"5.05\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanStartTime(\"2013-03-13 12:08\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanEndTime(\"2013-03-13 23:54\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final Loan HOON \u003d new LoanBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withNric(\"T0127601D\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .withBike(VALID_NAME_BIKE2)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withLoanRate(\"8.9\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanStartTime(\"16:45\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanEndTime(\"23:54\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final Loan IDA \u003d new LoanBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withNric(\"S9739813E\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .withBike(VALID_NAME_BIKE2)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withLoanRate(\"7.65\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanStartTime(\"2017-09-08 18:08\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanEndTime(\"2017-09-08 23:54\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    // Manually added - Loan\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final Loan AMY \u003d new LoanBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .withBike(VALID_NAME_BIKE1)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withLoanRate(VALID_LOANRATE_AMY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanStartTime(VALID_LOANSTARTTIME_AMY)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanEndTime(VALID_LOANENDTIME_AMY)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public static final Loan BOB \u003d new LoanBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withNric(VALID_NRIC_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            .withBike(VALID_NAME_BIKE2)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withLoanRate(VALID_LOANRATE_BOB)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanStartTime(VALID_LOANSTARTTIME_BOB)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            .withLoanEndTime(VALID_LOANENDTIME_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private TypicalLoans() {} // prevents instantiation"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static List\u003cLoan\u003e getTypicalLoans() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 1,
      "Kelly9373": 59,
      "prokarius": 22,
      "-": 25,
      "FongYuan": 38
    }
  },
  {
    "path": "src/test/java/loanbook/ui/BikeCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.testutil.GuiTestAssert.assertCardDisplaysBike;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import guitests.guihandles.BikeCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.BikeBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class BikeCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike bike \u003d new BikeBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        BikeCard bikeCard \u003d new BikeCard(bike, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uiPartRule.setUiPart(bikeCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCardDisplay(bikeCard, bike, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike bike \u003d new BikeBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        BikeCard bikeCard \u003d new BikeCard(bike, 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // same bike, same index -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        BikeCard copy \u003d new BikeCard(bike, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(bikeCard.equals(copy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(bikeCard.equals(bikeCard));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(bikeCard \u003d\u003d null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(bikeCard.equals(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different bike, same index -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Bike differentBike \u003d new BikeBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(bikeCard.equals(new BikeCard(differentBike, 0)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // same bike, different index -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(bikeCard.equals(new BikeCard(bike, 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Asserts that {@code bikeCard} displays the details of {@code expectedBike} correctly and matches"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void assertCardDisplay(BikeCard bikeCard, Bike expectedBike, int expectedId) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        BikeCardHandle bikeCardHandle \u003d new BikeCardHandle(bikeCard.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(Integer.toString(expectedId), bikeCardHandle.getId());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // verify bike details are displayed correctly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCardDisplaysBike(expectedBike, bikeCardHandle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 65
    }
  },
  {
    "path": "src/test/java/loanbook/ui/BikeListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalBikes.getTypicalBikes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.testutil.GuiTestAssert.assertBikeCardEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.testutil.GuiTestAssert.assertCardDisplaysBike;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import guitests.guihandles.BikeCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import guitests.guihandles.BikeListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.storage.XmlSerializableLoanBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class BikeListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final ObservableList\u003cBike\u003e TYPICAL_BIKES \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        FXCollections.observableList(getTypicalBikes());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_LOAN);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private BikeListPanelHandle bikeListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        initUi(TYPICAL_BIKES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_BIKES.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            bikeListPanelHandle.navigateToCard(TYPICAL_BIKES.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            Bike expectedBike \u003d TYPICAL_BIKES.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            BikeCardHandle actualCard \u003d bikeListPanelHandle.getCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            assertCardDisplaysBike(expectedBike, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            assertEquals(Integer.toString(i + 1), actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        initUi(TYPICAL_BIKES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        BikeCardHandle expectedBike \u003d bikeListPanelHandle.getCardHandle(INDEX_SECOND_LOAN.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        BikeCardHandle selectedBike \u003d bikeListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertBikeCardEquals(expectedBike, selectedBike);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Verifies that creating and deleting large number of bikes in {@code BikeListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ObservableList\u003cBike\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }, \"Creation and deletion of bike cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns a list of bikes containing {@code bikeCount} bikes that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code BikeListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private ObservableList\u003cBike\u003e createBackingList(int bikeCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithBikes(bikeCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        XmlSerializableLoanBook xmlLoanBook \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            XmlUtil.getDataFromFile(xmlFile, XmlSerializableLoanBook.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return FXCollections.observableArrayList(xmlLoanBook.toModelType().getBikeList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns a .xml file containing {@code bikeCount} bikes. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Path createXmlFileWithBikes(int bikeCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        builder.append(\"\u003cloanbook\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        for (int i \u003d 0; i \u003c bikeCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            builder.append(\"\u003cbikes\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            builder.append(\"\u003c/bikes\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        builder.append(\"\u003c/loanbook\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Path manyBikesFile \u003d Paths.get(TEST_DATA_FOLDER + \"/manyBikes.xml\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        FileUtil.createFile(manyBikesFile);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        FileUtil.writeToFile(manyBikesFile, builder.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        manyBikesFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return manyBikesFile;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Initializes {@code bikeListPanelHandle} with a {@code BikeListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code BikeListPanel}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void initUi(ObservableList\u003cBike\u003e backingList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        BikeListPanel bikeListPanel \u003d new BikeListPanel(backingList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uiPartRule.setUiPart(bikeListPanel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        bikeListPanelHandle \u003d new BikeListPanelHandle(getChildNode(bikeListPanel.getRoot(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            BikeListPanelHandle.LIST_VIEW_ID));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FongYuan": 121
    }
  },
  {
    "path": "src/test/java/loanbook/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.LoanListPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private LoanListPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        selectionChangedEventStub \u003d new LoanListPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // associated web page of a loan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        URL expectedLoanUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().value.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedLoanUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "FongYuan": 12
    }
  },
  {
    "path": "src/test/java/loanbook/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 151,
      "FongYuan": 6
    }
  },
  {
    "path": "src/test/java/loanbook/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * A GUI unit test class for LoanBook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "-": 34,
      "FongYuan": 3
    }
  },
  {
    "path": "src/test/java/loanbook/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/java/loanbook/ui/LoanCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.testutil.GuiTestAssert.assertCardDisplaysLoan;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import guitests.guihandles.LoanCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class LoanCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loanWithNoTags \u003d new LoanBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        LoanCard loanCard \u003d new LoanCard(loanWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uiPartRule.setUiPart(loanCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCardDisplay(loanCard, loanWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loanWithTags \u003d new LoanBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loanCard \u003d new LoanCard(loanWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uiPartRule.setUiPart(loanCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCardDisplay(loanCard, loanWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loan \u003d new LoanBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        LoanCard loanCard \u003d new LoanCard(loan, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // same loan, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        LoanCard copy \u003d new LoanCard(loan, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(loanCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(loanCard.equals(loanCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(loanCard \u003d\u003d null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(loanCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // different loan, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan differentLoan \u003d new LoanBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(loanCard.equals(new LoanCard(differentLoan, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // same loan, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(loanCard.equals(new LoanCard(loan, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Asserts that {@code loanCard} displays the details of {@code expectedLoan} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void assertCardDisplay(LoanCard loanCard, Loan expectedLoan, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        LoanCardHandle loanCardHandle \u003d new LoanCardHandle(loanCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(Integer.toString(expectedId), loanCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // verify loan details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCardDisplaysLoan(expectedLoan, loanCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "FongYuan": 71
    }
  },
  {
    "path": "src/test/java/loanbook/ui/LoanListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.getTypicalLoans;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.testutil.GuiTestAssert.assertCardDisplaysLoan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.testutil.GuiTestAssert.assertLoanCardEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import guitests.guihandles.LoanCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import guitests.guihandles.LoanListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.storage.XmlSerializableLoanBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "public class LoanListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final ObservableList\u003cLoan\u003e TYPICAL_LOANS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            FXCollections.observableList(getTypicalLoans());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_LOAN);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private LoanListPanelHandle loanListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        initUi(TYPICAL_LOANS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_LOANS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            loanListPanelHandle.navigateToCard(TYPICAL_LOANS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            Loan expectedLoan \u003d TYPICAL_LOANS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            LoanCardHandle actualCard \u003d loanListPanelHandle.getCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            assertCardDisplaysLoan(expectedLoan, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            assertEquals(Integer.toString(i + 1), actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        initUi(TYPICAL_LOANS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        LoanCardHandle expectedLoan \u003d loanListPanelHandle.getCardHandle(INDEX_SECOND_LOAN.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        LoanCardHandle selectedLoan \u003d loanListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertLoanCardEquals(expectedLoan, selectedLoan);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Verifies that creating and deleting large number of loans in {@code LoanListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        ObservableList\u003cLoan\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }, \"Creation and deletion of loan cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns a list of loans containing {@code loanCount} loans that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code LoanListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private ObservableList\u003cLoan\u003e createBackingList(int loanCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithLoans(loanCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        XmlSerializableLoanBook xmlLoanBook \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableLoanBook.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        return FXCollections.observableArrayList(xmlLoanBook.toModelType().getLoanList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns a .xml file containing {@code loanCount} loans. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Path createXmlFileWithLoans(int loanCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        builder.append(\"\u003cloanbook\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        for (int i \u003d 0; i \u003c loanCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            builder.append(\"\u003cloans\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            builder.append(\"\u003cnric\u003eS9249123D\u003c/nric\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wn96"
        },
        "content": "            builder.append(\"\u003cloanStatus\u003eONGOING\u003c/loanStatus\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            builder.append(\"\u003cbike\u003eb\u003c/bike\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            builder.append(\"\u003crate\u003e1\u003c/rate\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            builder.append(\"\u003cstartTime\u003e12:00\u003c/startTime\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "prokarius"
        },
        "content": "            builder.append(\"\u003cendTime\u003e12:00\u003c/endTime\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            builder.append(\"\u003c/loans\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        builder.append(\"\u003c/loanbook\u003e\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Path manyLoansFile \u003d Paths.get(TEST_DATA_FOLDER + \"/manyLoans.xml\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        FileUtil.createFile(manyLoansFile);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        FileUtil.writeToFile(manyLoansFile, builder.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        manyLoansFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return manyLoansFile;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Initializes {@code loanListPanelHandle} with a {@code LoanListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code LoanListPanel}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void initUi(ObservableList\u003cLoan\u003e backingList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        LoanListPanel loanListPanel \u003d new LoanListPanel(backingList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        uiPartRule.setUiPart(loanListPanel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loanListPanelHandle \u003d new LoanListPanelHandle(getChildNode(loanListPanel.getRoot(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                LoanListPanelHandle.LIST_VIEW_ID));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 1,
      "Kelly9373": 9,
      "prokarius": 2,
      "FongYuan": 117
    }
  },
  {
    "path": "src/test/java/loanbook/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(), new LogicManager(new ModelManager()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "FongYuan": 7
    }
  },
  {
    "path": "src/test/java/loanbook/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(NEW_RESULT_EVENT_STUB);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "FongYuan": 3
    }
  },
  {
    "path": "src/test/java/loanbook/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.model.LoanBookChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    private static final LoanBookChangedEvent EVENT_STUB \u003d new LoanBookChangedEvent(new LoanBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        // after loan book is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 2,
      "-": 69,
      "FongYuan": 6
    }
  },
  {
    "path": "src/test/java/loanbook/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "FongYuan": 3
    }
  },
  {
    "path": "src/test/java/loanbook/ui/testutil/EventsCollectorRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Sets up an {@code EventsCollector} and tears it down after each test."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCollectorRule implements TestRule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollector eventsCollector \u003d new EventsCollector();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * A class that collects events raised by other classes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public class EventsCollector {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public EventsCollector() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Collects any event raised by any class"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        @Subscribe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        public void collectEvent(BaseEvent event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            events.add(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Removes collected events from the collected list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        public void reset() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            events.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        public int getSize() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns the most recent event collected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public BaseEvent getMostRecent() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            if (events.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if the collector did not receive any events"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isEmpty() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.isEmpty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "FongYuan": 3
    }
  },
  {
    "path": "src/test/java/loanbook/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wn96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import guitests.guihandles.BikeCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import guitests.guihandles.LoanCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import guitests.guihandles.LoanListPanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.bike.Bike;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.LoanCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static void assertBikeCardEquals(BikeCardHandle expectedCard, BikeCardHandle actualCard) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static void assertLoanCardEquals(LoanCardHandle expectedCard, LoanCardHandle actualCard) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(expectedCard.getNric(), actualCard.getNric());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(expectedCard.getBike(), actualCard.getBike());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(expectedCard.getLoanRate(), actualCard.getLoanRate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        assertEquals(expectedCard.getLoanStartTime(), actualCard.getLoanStartTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wn96"
        },
        "content": "        expectedCard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .getTags()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .forEach(tag -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wn96"
        },
        "content": "                        assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedBike}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static void assertCardDisplaysBike(Bike expectedBike, BikeCardHandle actualCard) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedBike.getName().value, actualCard.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedLoan}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static void assertCardDisplaysLoan(Loan expectedLoan, LoanCardHandle actualCard) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedLoan.getName().value, actualCard.getName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(expectedLoan.getNric().getCensored(), actualCard.getNric());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(expectedLoan.getPhone().getCensored(), actualCard.getPhone());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(expectedLoan.getEmail().getCensored(), actualCard.getEmail());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(expectedLoan.getBike().getName().value, actualCard.getBike());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(expectedLoan.getLoanRate().toString(), actualCard.getLoanRate());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertTagsEqual(expectedLoan, actualCard);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * in {@code LoanCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wn96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * @see LoanCard#getTagColorStyleFor(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private static String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wn96"
        },
        "content": "        switch (tagName) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wn96"
        },
        "content": "        case \"classmates\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wn96"
        },
        "content": "        case \"owesMoney\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wn96"
        },
        "content": "            return \"teal\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wn96"
        },
        "content": "        case \"colleagues\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wn96"
        },
        "content": "        case \"neighbours\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wn96"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wn96"
        },
        "content": "        case \"family\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wn96"
        },
        "content": "        case \"friend\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wn96"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wn96"
        },
        "content": "        case \"friends\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wn96"
        },
        "content": "            return \"brown\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wn96"
        },
        "content": "        case \"husband\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wn96"
        },
        "content": "            return \"grey\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wn96"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wn96"
        },
        "content": "            throw new AssertionError(tagName + \" does not have a color assigned.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wn96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wn96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wn96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wn96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wn96"
        },
        "content": "     * color."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wn96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wn96"
        },
        "content": "    private static void assertTagsEqual(Loan expectedLoan, LoanCardHandle actualCard) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wn96"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedLoan.getTags().stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wn96"
        },
        "content": "                .map(tag -\u003e tag.value).collect(Collectors.toList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertEquals(expectedTags, actualCard.getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wn96"
        },
        "content": "        expectedTags.forEach(tag -\u003e assertEquals("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wn96"
        },
        "content": "                Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wn96"
        },
        "content": "                actualCard.getTagStyleClasses(tag)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wn96"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Asserts that the list in {@code loanListPanelHandle} displays the details of {@code loans} correctly and"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static void assertListMatching(LoanListPanelHandle loanListPanelHandle, Loan... loans) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        for (int i \u003d 0; i \u003c loans.length; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            loanListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            assertCardDisplaysLoan(loans[i], loanListPanelHandle.getCardHandle(i));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Asserts that the list in {@code loanListPanelHandle} displays the details of {@code loans} correctly and"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static void assertListMatching(LoanListPanelHandle loanListPanelHandle, List\u003cLoan\u003e loans) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertListMatching(loanListPanelHandle, loans.toArray(new Loan[0]));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Asserts the size of the list in {@code loanListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static void assertListSize(LoanListPanelHandle loanListPanelHandle, int size) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        int numberOfLoans \u003d loanListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(size, numberOfLoans);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 48,
      "Kelly9373": 8,
      "prokarius": 1,
      "-": 48,
      "FongYuan": 39
    }
  },
  {
    "path": "src/test/java/loanbook/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/loanbook/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "package loanbook.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.BIKE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.BIKE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_BIKE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_LOANRATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.LOANRATE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.LOANRATE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_LOANRATE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_LOANSTARTTIME_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.ALICE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.CARL;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.HOON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.IDA;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Messages;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanRate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Nric;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanUtil;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class AddCommandSystemTest extends LoanBookSystemTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: add a loan without tags to a non-empty loan book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        // Creates a new A"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan toAdd \u003d AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + NRIC_DESC_AMY + \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_AMY + \"   \" + LOANRATE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        System.out.println(\"command \u003d \" + command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.addLoan(toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: add a loan with all fields same as another loan in the loan book except name -\u003e added */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        toAdd \u003d new LoanBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_AMY + LOANRATE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: add a loan with all fields same as another loan in the loan book except nric -\u003e added */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        toAdd \u003d new LoanBuilder(AMY).withNric(VALID_NRIC_BOB).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d LoanUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: add a loan with all fields same as another loan in the loan book except bike -\u003e added */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        toAdd \u003d new LoanBuilder(AMY).withBike(VALID_NAME_BIKE2).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        command \u003d LoanUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: add to empty loan book -\u003e added */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        deleteAllLoans();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: add a loan with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wn96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + BIKE_DESC_BOB + NRIC_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + LOANRATE_DESC_BOB;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: add a loan, missing tags -\u003e added */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: filters the loan list before adding -\u003e added */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoansWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* ------------------------ Perform add operation while a loan card is selected --------------------------- */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: selects first card in the loan list, add a loan -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        selectLoan(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: add a duplicate loan -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        command \u003d LoanUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: add a duplicate loan except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        toAdd \u003d new LoanBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        command \u003d LoanUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: add a duplicate loan except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        toAdd \u003d new LoanBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        command \u003d LoanUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: add a duplicate loan except with different loanrate -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        toAdd \u003d new LoanBuilder(HOON).withLoanRate(VALID_LOANRATE_BOB).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d LoanUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: add a duplicate loan except with different loantime -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        toAdd \u003d new LoanBuilder(HOON).withLoanStartTime(VALID_LOANSTARTTIME_BOB).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        command \u003d LoanUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: add a duplicate loan except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        command \u003d LoanUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wn96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_AMY + LOANRATE_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wn96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_AMY + LOANRATE_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wn96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_AMY + LOANRATE_DESC_AMY;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: missing nric -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wn96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_AMY + LOANRATE_DESC_AMY;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: missing bike -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + LOANRATE_DESC_AMY;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: missing loan rate -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_AMY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        command \u003d \"adds \" + LoanUtil.getLoanDetails(toAdd);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_AMY + LOANRATE_DESC_AMY;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: invalid nric -\u003e rejected */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_NRIC_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_AMY + LOANRATE_DESC_AMY;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandFailure(command, Nric.MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_AMY + LOANRATE_DESC_AMY;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_AMY + LOANRATE_DESC_AMY;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: invalid bike -\u003e rejected */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + INVALID_BIKE_DESC + LOANRATE_DESC_AMY;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: invalid rate -\u003e rejected */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_AMY + INVALID_LOANRATE_DESC;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandFailure(command, LoanRate.MESSAGE_LOANRATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + BIKE_DESC_AMY + LOANRATE_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * 4. {@code Storage} and {@code LoanListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void assertCommandSuccess(Loan toAdd) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(LoanUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Loan)}. Executes {@code command}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Loan)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void assertCommandSuccess(String command, Loan toAdd) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.addLoan(toAdd);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Loan)} except asserts that"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * 2. {@code Storage} and {@code LoanListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Loan)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * 4. {@code Storage} and {@code LoanListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 16,
      "Kelly9373": 47,
      "prokarius": 9,
      "-": 134,
      "FongYuan": 93
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalBikes.getTypicalBikes;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class ClearCommandSystemTest extends LoanBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * The clear command resets the loans and loan ID only."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * So this model should have 0 Loans, a LastID of {@code NO_LAST_USED_ID_VALUE} and the typical Bikes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final Model clearedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        clearedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        clearedModel.setBikes(getTypicalBikes());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: clear non-empty loan book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: undo clearing loan book -\u003e original loan book restored */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: redo clearing loan book -\u003e cleared */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, clearedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: selects first card in loan list and clears loan book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original loan book"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        selectLoan(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: filters the loan list before clearing -\u003e entire loan book cleared */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original loan book"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoansWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: clear empty loan book -\u003e cleared */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to a cleared model."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, clearedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 13,
      "-": 76,
      "FongYuan": 23
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.DeleteCommand.MESSAGE_DELETE_LOAN_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TestUtil.getLoan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class DeleteCommandSystemTest extends LoanBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: delete the first loan in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wn96"
        },
        "content": "        String command \u003d \"     \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + DeleteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + \" i/\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + INDEX_FIRST_LOAN.getOneBased()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + \" x/a12345\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + \"       \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan deletedLoan \u003d removeLoan(expectedModel, INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_LOAN_SUCCESS, deletedLoan);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: delete the last loan in the list -\u003e deleted */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index lastLoanIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(lastLoanIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: undo deleting the last loan in the list -\u003e last loan restored */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: redo deleting the last loan in the list -\u003e last loan deleted again */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        removeLoan(modelBeforeDeletingLast, lastLoanIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: delete the middle loan in the list -\u003e deleted */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index middleLoanIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(middleLoanIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: filtered loan list, delete index within bounds of loan book and loan list -\u003e deleted */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoansWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index index \u003d INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredLoanList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: filtered loan list, delete index within bounds of loan book but out of bounds of loan list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoansWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        int invalidIndex \u003d getModel().getLoanBook().getLoanList().size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wn96"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" i/\" + invalidIndex + \" x/a12345\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* --------------------- Performing delete operation while a loan card is selected ------------------------ */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: delete the selected loan -\u003e loan list panel selects the loan before the deleted loan */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showAllLoans();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        selectLoan(selectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wn96"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" i/\" + selectedIndex.getOneBased() + \" x/a12345\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        deletedLoan \u003d removeLoan(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_LOAN_SUCCESS, deletedLoan);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wn96"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" i/0\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wn96"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" i/-1\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                getModel().getLoanBook().getLoanList().size() + 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wn96"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" i/\" + outOfBoundsIndex.getOneBased() + \" x/a12345\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" i/abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" i/1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Removes the {@code Loan} at the specified {@code index} in {@code model}\u0027s loan book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @return the removed loan"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private Loan removeLoan(Model model, Index index) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan targetLoan \u003d getLoan(model, index);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.deleteLoan(targetLoan);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return targetLoan;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Deletes the loan at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan deletedLoan \u003d removeLoan(expectedModel, toDelete);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_LOAN_SUCCESS, deletedLoan);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wn96"
        },
        "content": "        assertCommandSuccess(DeleteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wn96"
        },
        "content": "                 + \" i/\" + toDelete.getOneBased()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wn96"
        },
        "content": "                 + \" x/a12345\", expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 16,
      "Kelly9373": 11,
      "-": 125,
      "FongYuan": 47
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.BIKE_DESC_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.BIKE_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_BIKE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_LOANRATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.LOANRATE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.LOANRATE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_LOANRATE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_LOANSTARTTIME_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BIKE1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.model.Model.PREDICATE_SHOW_ALL_LOANS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.Messages;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.LoanRate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Nric;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanBuilder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.LoanUtil;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class EditCommandSystemTest extends LoanBookSystemTest {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index index \u003d INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + NRIC_DESC_BOB + \" \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + \" \" + LOANRATE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan editedLoan \u003d new LoanBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(command, index, editedLoan);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: undo editing the last loan in the list -\u003e last loan restored */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: redo editing the last loan in the list -\u003e last loan edited again */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.updateLoan("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                getModel().getFilteredLoanList().get(INDEX_FIRST_LOAN.getZeroBased()), editedLoan);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: edit a loan with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: edit a loan with new values same as another loan\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(getModel().getLoanBook().getLoanList().contains(BOB));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        index \u003d INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertNotEquals(getModel().getFilteredLoanList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        editedLoan \u003d new LoanBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(command, index, editedLoan);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: edit a loan with new values same as another loan\u0027s values but with different nric -\u003e edited */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        index \u003d INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        editedLoan \u003d new LoanBuilder(BOB).withNric(VALID_NRIC_AMY).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandSuccess(command, index, editedLoan);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: edit a loan with new values same as another loan\u0027s values but with different bike -\u003e edited */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        index \u003d INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_AMY + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        editedLoan \u003d new LoanBuilder(BOB).withBike(VALID_NAME_BIKE1).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandSuccess(command, index, editedLoan);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: edit a loan with new values same as another loan\u0027s values but with different phone number, email,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        loan rate and loan time -\u003e edited */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        index \u003d INDEX_SECOND_LOAN;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_AMY"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        editedLoan \u003d new LoanBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                .withLoanRate(VALID_LOANRATE_AMY).withLoanStartTime(VALID_LOANSTARTTIME_AMY).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(command, index, editedLoan);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        index \u003d INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan loanToEdit \u003d getModel().getFilteredLoanList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        editedLoan \u003d new LoanBuilder(loanToEdit).withTags().build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(command, index, editedLoan);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: filtered loan list, edit index within bounds of loan book and loan list -\u003e edited */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoansWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        index \u003d INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredLoanList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        loanToEdit \u003d getModel().getFilteredLoanList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        editedLoan \u003d new LoanBuilder(loanToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(command, index, editedLoan);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: filtered loan list, edit index within bounds of loan book but out of bounds of loan list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoansWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        int invalidIndex \u003d getModel().getLoanBook().getLoanList().size();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* --------------------- Performing edit operation while a loan card is selected -------------------------- */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: selects first card in the loan list, edit a loan -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showAllLoans();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        index \u003d INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        selectLoan(index);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_AMY + LOANRATE_DESC_AMY"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        // browser\u0027s url is updated to reflect the new loan\u0027s name"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredLoanList().size() + 1;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_LOAN.getOneBased(),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_LOAN.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: invalid nric -\u003e rejected */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_LOAN.getOneBased() + INVALID_NRIC_DESC,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Nric.MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_LOAN.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_LOAN.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: invalid bike -\u003e rejected */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_LOAN.getOneBased() + INVALID_BIKE_DESC,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: invalid loan rate -\u003e rejected */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_LOAN.getOneBased() + INVALID_LOANRATE_DESC,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                LoanRate.MESSAGE_LOANRATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_LOAN.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: edit a loan with new values same as another loan\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        executeCommand(LoanUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(getModel().getLoanBook().getLoanList().contains(BOB));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        index \u003d INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(getModel().getFilteredLoanList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: edit a loan with new values same as another loan\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: edit a loan with new values same as another loan\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: edit a loan with new values same as another loan\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: edit a loan with new values same as another loan\u0027s values but with different loan rate -\u003e rejected */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_AMY"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: edit a loan with new values same as another loan\u0027s values but with different loan time -\u003e rejected */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wn96"
        },
        "content": "                + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "prokarius"
        },
        "content": "                + BIKE_DESC_BOB + LOANRATE_DESC_BOB"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_LOAN);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Loan, Index)} except that"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Loan, Index)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Loan editedLoan) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedLoan, null);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the loan at index {@code toEdit} being"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * updated to values specified {@code editedLoan}.\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Loan editedLoan,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.updateLoan(expectedModel.getFilteredLoanList().get(toEdit.getZeroBased()), editedLoan);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.updateFilteredLoanList(PREDICATE_SHOW_ALL_LOANS);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_LOAN_SUCCESS, editedLoan), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        expectedModel.updateFilteredLoanList(PREDICATE_SHOW_ALL_LOANS);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 13,
      "Kelly9373": 64,
      "prokarius": 14,
      "-": 156,
      "FongYuan": 115
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class ErrorDialogGuiTest extends LoanBookSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 1,
      "-": 28,
      "FongYuan": 5
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_LOANS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.CARL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.DANIEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class FindCommandSystemTest extends LoanBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find multiple loans in loan book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "         * -\u003e 2 loans found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: repeat previous find command where loan list is displaying the loans we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "         * -\u003e 2 loans found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: find loan where loan list is not displaying the loan we are finding -\u003e 1 loan found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find multiple loans in loan book, 2 keywords -\u003e 2 loans found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find multiple loans in loan book, 2 keywords in reversed order -\u003e 2 loans found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find multiple loans in loan book, 2 keywords with 1 repeat -\u003e 2 loans found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find multiple loans in loan book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "         * -\u003e 2 loans found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find same loans in loan book after deleting 1 of them -\u003e 1 loan found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wn96"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" i/1 x/a12345\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertFalse(getModel().getLoanBook().getLoanList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find loan in loan book, keyword is same as name but of different case -\u003e 1 loan found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find loan in loan book, keyword is substring of name -\u003e 0 loans found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find loan in loan book, name is substring of keyword -\u003e 0 loans found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find loan not in loan book -\u003e 0 loans found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find phone number of loan in loan book -\u003e 0 loans found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find email of loan in loan book -\u003e 0 loans found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find tags of loan in loan book -\u003e 0 loans found */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).value;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: find while a loan is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showAllLoans();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        selectLoan(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(getLoanListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().value));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: find loan in empty loan book -\u003e 0 loans found */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        deleteAllLoans();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * box displays {@code Messages#MESSAGE_LOANS_LISTED_OVERVIEW} with the number of loans in the filtered list,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "                MESSAGE_LOANS_LISTED_OVERVIEW, expectedModel.getFilteredLoanList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 1,
      "Kelly9373": 20,
      "-": 143,
      "FongYuan": 26
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class HelpCommandSystemTest extends LoanBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        getLoanListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_LOAN.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertListMatching(getLoanListPanel(), getModel().getFilteredLoanList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wn96"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" i/\" + INDEX_FIRST_LOAN.getOneBased() + \" x/a12345\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wn96": 1,
      "Kelly9373": 1,
      "-": 95,
      "FongYuan": 10
    }
  },
  {
    "path": "src/test/java/systemtests/LoanBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import guitests.guihandles.LoanListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.MainApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ListBikesCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.TypicalLoanBook;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.BrowserPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.ui.CommandBox;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": " * A system test class for LoanBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public abstract class LoanBookSystemTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    protected LoanBook getInitialData() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return TypicalLoanBook.getTypicalLoanBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public LoanListPanelHandle getLoanListPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return mainWindowHandle.getListPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Displays all bikes in the loan book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected void showAllBikes() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        executeCommand(ListBikesCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(getModel().getLoanBook().getBikeList().size(), getModel().getFilteredBikeList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FongYuan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * Displays all loans in the loan book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected void showAllLoans() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(getModel().getLoanBook().getLoanList().size(), getModel().getFilteredLoanList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Displays all loans with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected void showLoansWithName(String keyword) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertTrue(getModel().getFilteredLoanList().size() \u003c getModel().getLoanBook().getLoanList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Selects the loan at {@code index} of the displayed list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected void selectLoan(Index index) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(index.getZeroBased(), getLoanListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Deletes everything in the loan book."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    protected void deleteAllLoans() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(0, getModel().getLoanBook().getLoanList().size());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same loan objects as {@code expectedModel}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * and the loan list panel displays the loans in the model correctly."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        // TODO:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        // Right now we cannot do testing on the strings because when loans are added, the string"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        // that is displayed is dependant on system time. This line is therefore commented"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "prokarius"
        },
        "content": "        //assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        assertEquals(new LoanBook(expectedModel.getLoanBook()), testApp.readStorageLoanBook());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertListMatching(getLoanListPanel(), expectedModel.getFilteredLoanList());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code LoanListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        getLoanListPanel().rememberSelectedCard();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * of the previously selected loan."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(getLoanListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the loan in the loan list panel at"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @see LoanListPanelHandle#isSelectedCardChanged()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        getLoanListPanel().navigateToCard(getLoanListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String selectedCardName \u003d getLoanListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getLoanListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the loan list panel remain unchanged."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * @see LoanListPanelHandle#isSelectedCardChanged()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertFalse(getLoanListPanel().isSelectedCardChanged());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertListMatching(getLoanListPanel(), getModel().getFilteredLoanList());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 8,
      "prokarius": 4,
      "-": 238,
      "FongYuan": 54
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static final Predicate\u003cLoan\u003e PREDICATE_MATCHING_NO_LOANS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cLoan\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Optional\u003cPredicate\u003cLoan\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        model.updateFilteredLoanList(predicate.orElse(PREDICATE_MATCHING_NO_LOANS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    public static void setFilteredList(Model model, Loan... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Loan} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "    private static Predicate\u003cLoan\u003e getPredicateMatching(Loan other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        return loan -\u003e loan.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "FongYuan": 10
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.LoanBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.loan.Loan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class SampleDataTest extends LoanBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    protected LoanBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public void loanBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Loan[] expectedList \u003d SampleDataUtil.getSampleLoans();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertListMatching(getLoanListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 3,
      "-": 41,
      "FongYuan": 7
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_INVALID_LOAN_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.logic.commands.SelectCommand.MESSAGE_SELECT_LOAN_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalIndexes.INDEX_FIRST_LOAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import static loanbook.testutil.TypicalLoans.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "public class SelectCommandSystemTest extends LoanBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: select the first card in the loan list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_LOAN.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_LOAN);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: select the last card in the loan list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        Index loanCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + loanCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandSuccess(command, loanCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        /* Case: select the middle card in the loan list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: filtered loan list, select index within bounds of loan book but out of bounds of loan list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        showLoansWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        int invalidIndex \u003d getModel().getLoanBook().getLoanList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: filtered loan list, select index within bounds of loan book and loan list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredLoanList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredLoanList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "        /* Case: select from empty loan book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        deleteAllLoans();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_LOAN.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            MESSAGE_INVALID_LOAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected loan.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * 4. {@code Storage} and {@code LoanListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "            MESSAGE_SELECT_LOAN_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getLoanListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "     * 4. {@code Storage} and {@code LoanListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * {@code LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "     * @see LoanBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 10,
      "-": 110,
      "FongYuan": 34
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "import loanbook.model.ReadOnlyLoanBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyLoanBook\u003e loanBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kelly9373"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(loanBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kelly9373": 2,
      "-": 70,
      "FongYuan": 2
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003c?import loanbook.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "FongYuan": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FongYuan"
        },
        "content": "\u003cfx:root type\u003d\"loanbook.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "FongYuan": 1
    }
  }
]
