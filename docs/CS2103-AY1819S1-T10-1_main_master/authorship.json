[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d U-Schedule"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-T10-1/main[image:https://travis-ci.org/CS2103-AY1819S1-T10-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "https://ci.appveyor.com/project/CS2103-T10-1/main/branch/master[image:https://ci.appveyor.com/api/projects/status/tckfg9mk2c7e4nbl/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T10-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T10-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d About"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*U-Schedule* is an open source desktop calendar application for tech-savvy university students who are comfortable with a command line interface (CLI). Managing your hectic university life has never been as simple, with U-Schedule\u0027s efficient CLI combined with a fast, beautiful and responsive graphical user interface (GUI). To get started, check out the \u003c\u003cUserGuide#, user guide\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d Screenshot"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], https://github.com/joestelmach/natty[natty], https://github.com/xdrop/fuzzywuzzy[fuzzywuzzy], https://github.com/JFXtras/jfxtras/tree/9.0/jfxtras-agenda[Agenda]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* Original source code from https://github.com/se-edu/addressbook-level4[AddressBook-Level4] project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 7,
      "vig42": 4,
      "-": 22
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    compile \u0027com.joestelmach:natty:0.13\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    compile \u0027me.xdrop:fuzzywuzzy:1.1.10\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    compile group: \u0027org.jfxtras\u0027, name: \u0027jfxtras-agenda\u0027, version: \u00279.0-r1-SNAPSHOT\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    archiveName \u003d \u0027u-schedule.jar\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 1,
      "pangjiahao": 1,
      "-": 249
    }
  },
  {
    "path": "date/toDoList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003ctoDoList\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "  \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctitle\u003eCS2103 Project\u003c/title\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003cdescription\u003eFinish UI design\u003c/description\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003cpriority\u003eH\u003c/priority\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "  \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c/toDoList\u003e"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 8
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "U-Schedule was developed by the team T10-1 for the project for the module CS2103 Software Engineering."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "We are a team of NUS students and students on exchange at NUS."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d\u003d Vighnesh Ramesh Iyer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "image::vig42.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "{empty}[https://github.com/vig42] [\u003c\u003cvighneshrameshiyer#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Role: Team Lead, Developer +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Responsibilities: Dev Ops, Integration, Travis expert +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "In Charge Of: Main, Commons"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d\u003d Pang Jia Hao"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "image::pangjiahao.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "{empty}[https://github.com/pangjiahao] [\u003c\u003cpangjiahao#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Responsibilities: Testing, Scheduling and tracking, JavaFX expert +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "In Charge Of: UI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d\u003d Li Yixin"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "image::sleepysanjinli.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "{empty}[https://github.com/SleepySanjinLi] [\u003c\u003csleepyliyixin#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Responsibilities: Code Quality, Deliverables and deadlines, Gradle expert +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "In Charge Of: Logic"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d\u003d Bryan Wong Wei Heng"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "image::bryanwongweiheng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "{empty}[http://github.com/bryanwongweiheng] [\u003c\u003cbryanwongweiheng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Responsibilities: Documentation, git expert +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "In Charge Of: Model, UI"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 20,
      "vig42": 1,
      "pangjiahao": 1,
      "SleepySanjinLi": 1,
      "-": 27
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d U-Schedule - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T10-1/main/tree/master/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "By: `T10-1`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedCalendarEvent.java[`XmlAdaptedCalendarEvent.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Run the `seedu.venue.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-title`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "image::ArchitectureDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/venue/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the calendar events data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* \u003c\u003cDesign-Model,*`ModelToDo`*\u003e\u003e: Holds the todolist events data of the App in-memory."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* Defines its _API_ in an `interface` with the same title as the Component."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "vig42"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete event 1`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vig42"
        },
        "content": ".Component interactions for `delete event 1` command (part 1)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vig42"
        },
        "content": "image::SDforDeleteCalendarEvent.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vig42"
        },
        "content": "Note how the `Model` simply raises a `SchedulerChangedEvent` when the calendar data is changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "vig42"
        },
        "content": ".Component interactions for `delete event 1` command (part 2)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "vig42"
        },
        "content": "image::SDforDeleteCalendarEventEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/venue/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `CalendarPanel`, `TaskListPanel`, `CalendarDisplay`, etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/venue/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* Binds itself to some data in the `Model`/`ModelToDo` so that the UI can auto-update when data in the `Model`/`ModelToDo` change."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "link:{repoURL}/src/main/java/seedu/venue/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "vig42"
        },
        "content": ".  `Logic` uses the `SchedulerParser` class to parse the user command."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "vig42"
        },
        "content": ".  The command execution can affect the `Model` or `ModelToDo` (e.g. adding a calendar event or todolist event) and/or raise events."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "vig42"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete event 1\")` API call."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "vig42"
        },
        "content": ".Interactions Inside the Logic Component for the `delete event 1` Command"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "vig42"
        },
        "content": "image::DeleteCalendarEventSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "vig42"
        },
        "content": "The Model component is handled by 2 separate classes - `Model` and `ModelToDo`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/venue/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "vig42"
        },
        "content": "* stores the calendar data."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "vig42"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cCalendarEvent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically update when the calendar data in the list changes."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "vig42"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "vig42"
        },
        "content": "The `ModelToDo`,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "vig42"
        },
        "content": "* stores the todolist data"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "vig42"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cToDoListEvent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically update when the todolist data in the list changes."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "vig42"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Scheduler`, which `CalendarEvent` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `CalendarEvent` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/venue/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* can save the Scheduler data in xml format and read it back."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* can save the ToDoList data in xml format and read it back."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "// tag::ToDoList[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d\u003d ToDoList feature"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Model for ToDoList feature:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "The ToDoList Model `ModelToDo` allows the `ToDoList` to store and display `ToDoListEvents`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "`ToDoListEvent` stores the relevant information for each event in the toDoList, such as the title, description and priority."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "`AddToDoCommandParser` and `DeleteToDoCommandParser` functionaly have been created and allow user to add and delete `ToDoListEvent` objects."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Prefixes t/, d/ and p/ respectively allow user to input `Title`, `Description` and `Priority` for each todolist event."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Given below is an example usage scenario for adding a todolist event, and how the todolist model behaves at each step."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 1: The user lauches the application for the first time. The `ToDoList` is initialised to be empty."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 2: The user excutes `add todo t/CS3230 Assignment1 d/Dynamic Programming P/H`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 3: The `AddToDoCommandParser` parsers out the strings for the title, description and priority."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 4: Then, `ParserUtil` checks that the input strings are valid, and uinitialises the `Title`, `Description` and `Priority`. It also checks that the `Priority` iniput is a valid priority."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 5: Following that, a new `ToDoListEvent` is initialised and will be displayed in the list of todo list events in the GUI."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Given below is an example usage scenario for deleting a todolist event, and how the todolist model behaves at each step."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 1: Make sure the todo list is not empty."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Step 2: The user executes `delete todo [index of event]` while `[index of event]` is the index number for a corresponding todolist event` displayed in `ToDoList` GUI."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 3: The `DeleteToDoCommandParser` parsers out the strings for the index."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 4: Then, `ParserUtil` checks that the input index is valid."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 5: Following that, the corresponding `ToDoListEvent` will be deleted and not displayed on th GUI."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "The following sequece diagram shows how the add todo operation works:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "image::AddToDoDeleteToDoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "The delete todo does the similar operation.It calls `ModelToDo#deleteToDoListEvent`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "`ShowDescriptionParser` functionaly have been created and allow user to show description of `ToDoListEvent` objects."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Given below is an example usage scenario for showing description of a todolist event, and how the todolist model behaves at each step."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 1: Make sure the todo list is not empty."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 2: The user executes `show todo [index of event]` while `[index of event]` is the index number for a corresponding todolist event` displayed in `ToDoList` GUI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 3: The `ShowDescriptionCommandParser` parsers out the strings for the index."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 4: Then, `ParserUtil` checks that the input index is valid."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 5: Following that, the corresponding description of `ToDoListEvent` will be showed and displayed by `DescriptionDisplay`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "The following sequece diagram shows how the show todo operation works:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "image::ShowDescriptionSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Implementation for `list todo` is similar with `list event`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 1: The user executes `list todo`."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 2: The `ListToDoCommand` will be executed."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Step 3: The tab will change to display todo list panel."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d\u003d\u003d Logic for ToDoList feature:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `Logic#getFilteredToDoListEventList` -- Returns an unmodifiable view of the filtered list of `ToDoListEvent`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `LogicManager#ModelToDo` -- Model for `ToDoListEvent`."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d commands"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `Command` -- Abstract class for executing todo list."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `Command#isToDoCommand` -- Judge the command is todo command or not."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `Command#excute(ModelToDo, CommandHistory)` -- Execute todo command."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `AddToDoCommand`/`DeleteToDoCommand` -- Extends `Command` for `add todo`/`delete todo` functionality."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `ListToDoCommand` -- Extends `Command` for `list todo` functionality."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `ShowDescriptionCommand` -- Extends `Command` for `show todo` functionality."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d parsers"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `SchedulerParser#parserCommand` -- Add additionl parses user input into command for execution."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d\u003d\u003d Storage for ToDoList feature:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `ToDoListStorage` -- Represents a storage for `ToDoList`."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `XmlAdaptedToDoListEvent` -- JAXB-friendly version of the `ToDoListEvent`."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `XmlSerializableToDoList` -- An Immutable `ToDoList` that is serializable to XML format"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `XmlToDoListStorage` -- A class to access `ToDoList` data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `Storage` -- Add Extension to `ToDoListStorage`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `StorageManager` -- Add `ToDoListStorage` component."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d\u003d\u003d GUI for ToDoList feature:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "The ToDoList GUI contains two parts:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `TaskListPanel` -- Panel containing the list of `ToDoListEvent`."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `ToDoListEventCard` -- An UI component that displays information of a `ToDoListEvent`."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "In `ToDoListEventCards`, there are four components:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `ToDoListEventCard#CheckBox` -- For check completed task."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `ToDoListEventCard#Label(id)` -- For display index of corresponding `ToDoListEvent`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `ToDoListEventCard#Label(title)` -- For display title of corresponding `ToDoListEvent`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `ToDoListEventCard#Label(priority)` -- For display priority of corresponding `ToDoListEvent`. And different priorities will be displayed in different colors."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "The description popup GUI is developed by `DescriptionDisplay`, there are two components:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `DescriptionDisplay#TextArea(description)` -- For display description of corresponding `ToDoListEvent`."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `DescriptionDisplay#Label(id)` -- For display index of corresponding `ToDoListEvent`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Aspect: How to implement ToDoList Model"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* **Alternative 1 (current choice):** Re-construct a new model for ToDoList."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Pros: Will not influence current functionalities for Calendar part."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Cons: Time cost (Need to re-construct a lot of classes)."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* **Alternative 2:** Modify current calendar model to support both events."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Pros: Need less classes to re-construct."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Cons: May cause some trouble in curent Calendar model."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Aspect: How to implement ToDoList Logic"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* **Alternative 1 (current choice):** Modify the current `Logic` and `LogicManager`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "** Pros: Can be easily implemented and can use the current parser."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* **Alternative 2:** Re-construct a new `LogicToDo` for `ToDoList`."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Pros: Will not influence current Scheduler Logic."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Cons: Difficult to implement in `MainApp` and other combined classes (need another `LogicToDo` object)."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Aspect: How to implement ToDoList Storage"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* **Alternative 1 (current choice):** Modify the curernt `Storage` and `StorageManager`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "** Pros: Can be easily implemented."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Cons: Need to extends one more `ToDoListStorage`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* **Alternative 2:** Re-construct a new `StorageToDo` for `ToDoList`."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Pros: Will not influence current `Storage`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Cons: Difficult to implement in `MainApp` and other combined classes. Cause redundant work."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Aspect: How to implement ToDoList UI"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* **Alternative 1 (current choice):** Extend current GUI and left side become ToDoList GUI."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Pros: Will be synchronous for `ToDoList` and `Calendar`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Cons: Need to modify current GUI."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* **Alternative 2:** Totally seperate to be 2 GUI (including two `CommandBox`)."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Pros: Don\u0027t need to change current GUI."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Cons: Need to consruct a lot parts in GUI."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "vig42"
        },
        "content": "// end::ToDoList[]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "vig42"
        },
        "content": "// tag::fuzzysearch[]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d Fuzzy Search and Filter by Date/Time and Tags"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "vig42"
        },
        "content": "The Fuzzy Search enhancement for the `find event` command is achieved by modifying the `Predicate` used to filter the `FilteredList` already present in the `ModelManager`, by using a fuzzy match algorithm to check the similarity of the event\u0027s `Title`, `Description` and `Venue` text with each input keywords, and seeing if it exceeds a given threshold."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "vig42"
        },
        "content": "The Filter by Date/Time and Tags feature is achieved by allowing the aforementioned `FilteredList` to accept multiple predicates at a time, by taking the logical AND of all the input predicates."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "vig42"
        },
        "content": "The feature to show the most relevant search results first is achieved by sorting the `FilteredList`, by wrapping it with a `SortedList`, and changing the `Comparator` used based on the input command."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "vig42"
        },
        "content": "The `FindEventCommandParser` and the `ArgumentTokenizer` were modified to accept commands that may or may not have keywords (i.e. preamble), and handle having varying numbers of prefixes in each command."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "vig42"
        },
        "content": "Finally, the GUI `CalendarPanel` was modified to access the new `SortedList` instead of the `FilteredList` so as to display the most relevant results first."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Model - Predicates, Comparators and SortedList"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "vig42"
        },
        "content": "To allow for fuzzy matching, the `fuzzywuzzy` API was used. This allows us to compare strings using using a fuzzy algorithm based on Levenshtein distance between the strings. It assigns an integer match score from 0-100 for each pair of strings. If this score was above the threshold of 70, the retooled `FuzzySearchFilterPredicate` would allow it to be seen. This score was also used to compare events in our `FuzzySearchComparator`."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "vig42"
        },
        "content": "To implement the extra filters in conjunction with the fuzzy search, the `UpdateFilteredCalendarEventList` method was modified to allow for variable number (at least 1) of input `Predicate\u003cCalendarEvent\u003e` arguments. The method would then combine the input `Predicates` into a single `Predicate` by taking their logical AND. The combined `Predicate` would then be used to filter the `FilteredList`."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "vig42"
        },
        "content": "To allow users to filter by date/time, a new predicate, `DateTimePredicate` was created with 2 `DateTime` objects to set the `dateFrom` and `dateTo` for the filter. The `DateTime` objects were allowed to be null - this allowed for only 1 `DateTime` (either from or to) to be specified, so as to reduce the restrictions on users. If both `DateTime` objects were null, it would always return true - allowing it to be AND-ed with the other `Predicates` by the `ModelManager` without interfering with the filters."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "vig42"
        },
        "content": "To allow users to filter by tags, a new predicate, `TagsPredicate` was created. This stored a `Set` of input tag `Strings`, and if all of them had a full (but case-insensitive) match with at least one of the event\u0027s `Tags`, then the event would be shown. The `Set` is allowed to be empty - similar to the implementation of the `DatePredicate`, this case would always return true."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "vig42"
        },
        "content": "The existing `ModelManager` attributes and methods were insufficient to show the most relevant search results first, as this would require sorting. As a result, we created a new `FuzzySearchComparator` to sort the `CalendarEvents` based on the aforementioned fuzzy match score, in descending order. In order to let users see this, we created a new `SortedList` to the `ModelManager`, to sort the existing `FilteredList` based on the `FuzzySearchComparator`."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Logic - ArgumentTokenizer and Parser"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "vig42"
        },
        "content": "The new `FindEventCommand` required modifications to the parser to allow for commands with varying levels of inputs - it could have preamble and prefixes, only preamble with no prefixes or no preamble and only prefixes. In the latter case, we noticed that the `ArgumentTokenizer` would end up capturing the initial prefix as the \"preamble\". In order to correctly detect the absence of a preamble, the `ArgumentTokenizer` was modified, so as to correctly detect the absence of a preamble (i.e. when a prefix is at index 0 of the input arguments), and accordingly not add the \u0027preamble\u0027 (actually the first prefix) to the `ArgumentMultimap`."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "vig42"
        },
        "content": "After modifying the `ArgumentTokenizer`, the `FindEventCommandParser` also needed to be modified to generate the correct `FindEventCommand` from the inputs. As mentioned earlier, for each of the `Predicates` and `Comparators`, we implemented a \u0027default case\u0027, when the `Predicate` always returned true and the `Comparator` always returned zero - e.g. when both the `DateTime` for the `DatePredicate` are null, or when the `List` of keywords for the `FuzzySearchFilterPredicate` and `FuzzySearchComparator` are empty."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "vig42"
        },
        "content": "This allowed us to deal with the cases where some of the inputs were missing. If the user did not enter any `tag/` prefix, then the `FindEventCommand` created by the `FindEventCommandParser` will have a `TagPredicate` containing an empty `Set` of tag strings."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d GUI"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "vig42"
        },
        "content": "In order for the new search features to be visible to the user, the `getFilteredAndSortedCalendarEventList` method was modified to allow the GUI `CalendarPanel` to access the `SortedList` rather than the `FilteredList` when initializing its `ListView`."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Tabbed Interface"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "vig42"
        },
        "content": "Since the left panel would be shared between the `TaskListPanel` and the `CalendarPanel`, we realised that sometimes the panel would be showing the wrong list when a command is entered. Hence, after updating the `FilteredList` and `SortedList`, we made the `execute` method of the `FindEventCommand` post a `SwitchToSearchTabEvent` to the `EventsCenter`. The `MainWindow` handles the `SwitchToSearchTabEvent` and switches to the Calendar Events tab, so that the user can see the search results."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Predicates are Managed and Applied to the FilteredList"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "vig42"
        },
        "content": "* **Alternative 1 (current choice):** Use a simple rule (AND) to combine all the `Predicates` into a single one, then apply them to the `FilteredList` as normal."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Pros: Easy to implement, since it mostly leverages existing functionality (only need to modify 1 method). As such it is also less likely to lead to regression errors."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Cons: Only capable of limited functionality"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "vig42"
        },
        "content": "* **Alternative 2:** Use a separate class to store and manage the `Predicates`, combine them in the desired fashion and apply the resulting `Predicate` to the `FilteredList`."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Pros: Will be capable of combining multiple `Predicates` in various different ways, allowing for more complex boolean expressions (see the next section for possible implementations)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Cons: More difficult to implement, since it would add an extra layer of integration between the new class and the ModelManager. Would also need to ensure that the list of predicates is appropriately reset when each new command is entered."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Best to Show the User the Most Relevant Search Result"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "vig42"
        },
        "content": "* **Alternative 1 (current choice):** Sort the `FilteredList` of `CalendarEvents` in descending order of fuzzy match score"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Pros: More reliable, has high chance of achieving the desired goal"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Cons: Slower (since it needs to sort), more complicated to implement"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "vig42"
        },
        "content": "* **Alternative 2:** Apply a more aggressive filter (with higher threshold for acceptance) to hide less relevant results"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Pros: Faster than sorting"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Cons: Can be difficult to calibrate the filters properly to achieve the desired result. May end up being too aggressive, and could remove correct/desired results in some scenarios."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d\u003d Further Extensions"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Additional Filters"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "vig42"
        },
        "content": "The `FindEventCommand` could be enhanced by including more `Predicates` to further filter the events based on other properties. For instance, we could allow users to specifically filter based on whether `Venue` or `Description` matched an input keyword, e.g. `find event v/COM2` or `find event d/Wear formal clothes`."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Custom Filters using Boolean Logic"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "vig42"
        },
        "content": "The `FindEventCommand` could be modified to allow users to specify custom filters using boolean logic, e.g. a possible command could be `find event t/exam \u0026\u0026 v/MPSH5` or `find event t/lecture || d/lecture`. This would allow users to perform much more fine-grained searches. It is likely to appeal to our users, since they are more tech-savvy university students who are comfortable with CLI, and thus are probably somewhat familiar with boolean logic."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "vig42"
        },
        "content": "In order to implement this feature, we could create a new class specifically to take in the list of input `Predicates` as well as the specific rules by which to apply the AND/OR, and then to generate the appropriate predicate based on those instructions. This could then be fed to the `ModelManager` to update the `FilteredList`."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "vig42"
        },
        "content": "// end::fuzzysearch[]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "vig42"
        },
        "content": "// tag::CalendarModel[]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d Calendar Model"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "vig42"
        },
        "content": "The calendar model adapts the previous address book functionality to allow the `Scheduler` to store and display `CalendarEvents`."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "vig42"
        },
        "content": "`Person` has been refactored to `CalendarEvent`. This class stores the relevant information for each event in the"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "vig42"
        },
        "content": "calendar, such as the title, description, start and end date/time, venue and tags."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "vig42"
        },
        "content": "`Title`, `Description` and `Venue` now inherit from a `TextField` parent class, to represent fields in the model that"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "vig42"
        },
        "content": "store string data."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "vig42"
        },
        "content": "`DateTime` stores and validates the input start and end date/time of each event in the calendar."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "vig42"
        },
        "content": "`DateTimeInfo` validates that the start date/time are not after the end date/time."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "vig42"
        },
        "content": "`AddCommandParser` and `EditCommandParser` functionality have been modified to allow the creation and modification of `CalendarEvent` objects."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "vig42"
        },
        "content": "New prefixes d/, s/, e/ and v/ respectively allow user to input `Description`, start `DateTime`, end `DateTime`, and `Venue` for each calendar event."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "vig42"
        },
        "content": "Given below is an example usage scenario for adding a calendar event, and how the calendar model behaves at each step."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "vig42"
        },
        "content": "Step 1: The user launches the application for the first time. The `Scheduler` is initialised to be empty."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "vig42"
        },
        "content": "Step 2: The user executes `add t/CS2103 Tutorial d/Prepare answers to the 5 questions s/Thursday 10am e/Thursday 11am v/COM1-0210`."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "vig42"
        },
        "content": "Step 3: The `AddCommandParser` parses out the strings for the title, description, start and end date/time and the venue."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "vig42"
        },
        "content": "Step 4: Then, `ParserUtil` checks that the input strings are valid, and initialises the `Title`, `Description`, start and end `DateTime` and `Venue`. It also checks that the `DateTime` values input are valid dates and times."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "vig42"
        },
        "content": "Step 5: Subsequently, `AddCommandParser` calls `DateTimeInfo` to validate that the start date/time is not chronologically after the end `DateTime`, before wrapping the start and end `DateTime` in a `DateTimeInfo` object."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "vig42"
        },
        "content": "Step 6: Following that, a new `CalendarEvent` is initialised and will be displayed in the calendar GUI."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "vig42"
        },
        "content": "// end::CalendarModel[]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "// tag::calendardisplay[]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d Calendar Display"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "The Calendar Display is implemented using `jfxtras.Agenda`."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "`jfxtras` is a third-party library"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "containing more feature-rich UI controls."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Agenda Summary"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "`Agenda` defines the `Agenda.Appointment` interface, which must be"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "implemented for all events that it displays."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "`Agenda` also defines `Agenda.AppointmentImplLocal`,"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "which is a bare-bones implementation"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "of the `Agenda.Appointment` interface."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "The full documentation for `Agenda` can be found"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "link:http://jfxtras.org/doc/8.0/jfxtras-agenda/index.html[here]."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Integration with our Project"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "`CalendarEvent` extends `Agenda.AppointmentImplLocal`,"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "so as to streamline the process"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "of displaying `CalendarEvent` s."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "The `CalendarDisplay` class acts as a wrapper around `Agenda`."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "`CalendarDisplay` will:"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* Initialize the `Agenda` UI with the desired settings."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* Listen for changes in the list of calendar events in `Model` and"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " update `Agenda` accordingly."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* Respond to the user selecting calendar events by"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "displaying the selected event to the user."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* Extend the in-built UI controls of `Agenda` by including functionality"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "to navigate the calendar."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Updating the Calendar"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Unlike a `ListView`, `Agenda` does not provide a way to directly set"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "a list of `Appointments` to be displayed."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Therefore, `CalendarDisplay` takes the list of calendar events to be displayed"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "and adds them to `Agenda`."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "`CalendarDisplay` then listens for changes in"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "changes in the `Model` and forwards the same changes to `Agenda`."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Trimming Excess Functionality"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "`Agenda` provides some default functionality for responding to user"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "interactions with the UI, such as adding, editing and deleting `Appointment` s."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "This features could have been implemented by setting the"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "appropriate callbacks in `Agenda`. Changes to the data in `Agenda`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "could then be updated in `Model`."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "However, these features would not be very useful for a product that is"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "designed to be used with the command line."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Their implementation would also make the data flow bi-directional, and"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "increase coupling between `Agenda` and `Model`."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Therefore, these functions have been disabled so as to make `Agenda`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "solely for displaying the user\u0027s events as a calendar."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d Calendar Display Navigation"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "The navigation features available are:"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "1. View a `CalendarEvent` in the calendar display by selecting"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "the event. The calendar display will jump to the correct time"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "period and attempt to centralize the selected event."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "2. View the next/previous week or using the `left` and `right`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "arrow keys."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "3. The user can scroll up and down the 24-hour timeline using"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "the `up` and `down` arrow keys, or by using the mouse scroll wheel."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "1. Implemented by having `CalendarDisplay` listen for"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "`JumpToDateTimeEvent`. `CalendarDisplay` would then"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "set `Agenda` to display the target date and time."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "2. Implemented using an `EventFilter` in `CalendarDisplay`."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "`CalendarDisplay` would then"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "set `Agenda` to display the target date and time."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "3. In-built into `Agenda`."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Keyboard Navigation"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Initially, the keyboard navigation features"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "were implemented for ease of testing `CalendarDisplay`,"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "with the intention to implement"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Command Line Interface commands in the future."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "This would agree with the project direction,"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "since this application is intended to be controlled"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "using the command line."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "However, `Agenda` \u0027s calendar display was implemented"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "using a customized ScrollPane, which could be scrolled using the"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "up and down arrow keys and the scroll wheel."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Hence, using the left and right arrow keys for"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "navigation felt very natural and user-friendly."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Furthermore, `Agenda` did not expose any way for the user"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "to scroll the calendar display programmatically."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "So if the user wanted to interact with the UI,"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "the user would still be forced to use either the up and down"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "arrow keys or the scroll wheel to navigate."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Therefore, while this feature is not a CLI feature,"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "it was retained as a fast and easy way to navigate around"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "the calendar display."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d Further Extensions"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d Command Line Navigation"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "To make the command line instruction set more complete, it would be"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "good if users are able to navigate the calendar display using the"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "command line as well. Some possible extensions could be:"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d View Next and Previous Week"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "1. User executes `view next`."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "2. The command is parsed and the correct date to navigate to"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "is calculated. A `ChangePeriodCommand` containing the"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "target date is created."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "3. `ChangePeriodCommand#execute` raises a JumpToDateTimeEvent."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "4. `CalendarDisplay` responds by setting `Agenda` to"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "display the specified date and time."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Jump to a Specified Date"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "One common use case for a calendar is when the"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "user wants to check what events he/she has at a particular time."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "An example scenario would be:"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "1. User executes `view 20th nov`."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "2. The command is parsed, creating a `ChangePeriodCommand`"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "containing the target date."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "3. `ChangePeriodCommand#execute` raises a JumpToDateTimeEvent."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "4. `CalendarDisplay` responds by setting `Agenda` to"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "display the specified date and time."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "// end::calendardisplay[]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// tag::parsing[]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d\u003d SchedulerParser"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Commands are now required for both models `CalendarEvent` and `ToDoListEvent`. Hence it is beneficial for the parser to"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "support both one and two-worded commands which would specify the action (e.g. `add`, `delete`) as well as the model"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "it is updating (`event` or `todo`). The parser still retains the responsibility of resolving which `Command` should"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "be returned, for both models."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "The parser should be flexible enough to at least support commands which are identified by one word and those"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "identified by two words. Some commands such as `help` and `exit` are not specific to a model, while others act on one"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " of the two models and are hence appropriately identified by another word."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "One other alternative is to keep the commands to one word and split these words by a delimiter such as a dash (`-`) e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".g. `add-event`. However this is assumed to be less natural to the end user."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// end::parsing[]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedScheduler`."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "It extends `Scheduler` with an undo/redo history, stored internally as an `SchedulerStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* `VersionedScheduler#commit()` -- Saves the current venue book state in its history."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* `VersionedScheduler#undo()` -- Restores the previous venue book state from its history."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* `VersionedScheduler#redo()` -- Restores a previously undone venue book state from its history."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitScheduler()`, `Model#undoScheduler()` and `Model#redoScheduler()` respectively."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "The `VersionedAddressBook` will be initialized with the initial"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Scheduler state, and the `currentStatePointer` pointing to that"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "single Scheduler state."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Step 2. The user executes `delete event 5` command to delete the 5th CalendarEvent in the Scheduler. The `delete` command calls `Model#commitScheduler()`, causing the modified state of the Scheduler after the `delete 5` command executes to be saved in the `schedulerStateList`, and the `currentStatePointer` is shifted to the newly inserted Scheduler state."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Step 3. The user executes `add t/CS2103 Lecture ...` to add a new CalendarEvent. The `add event` command also calls `Model#commitScheduler()`, causing another modified Scheduler state to be saved into the `schedulerStateList`."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "If a command fails its execution, it will not call `Model#commitScheduler()`, so the Scheduler state will not be saved into the `schedulerStateList`."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Step 4. The user now decides that adding the CalendarEvent was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoScheduler()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous Scheduler state, and restores the Scheduler to that state."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial Scheduler state, then there are no previous Scheduler states to restore. The `undo` command uses `Model#canUndoScheduler()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoScheduler()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the Scheduler to that state."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "If the `currentStatePointer` is at index `schedulerStateList.size() - 1`, pointing to the latest Scheduler state, then there are no undone Scheduler states to restore. The `redo` command uses `Model#canRedoScheduler()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Step 5. The user then decides to execute the command `list event`. Commands that do not modify the Scehduler, such as `list`, will usually not call `Model#commitScheduler()`, `Model#undoScheduler()` or `Model#redoScheduler()`. Thus, the `schedulerStateList` remains unchanged."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Step 6. The user executes `clear calendar`, which calls `Model#commitScheduler()`. Since the `currentStatePointer` is not pointing at the end of the `schedulerStateList`, all venue book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/CS2103 Lecture ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire venue book."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the calendarEvent being deleted)."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of venue book states."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "vig42"
        },
        "content": "Certain properties of the application can be controlled (e.g App title, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|Attribute title |Description |Default value"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|`site-title`"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|The title of the website."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "If set, the title will be displayed near the top of the page."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|Attribute title |Description |Default value"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.venue.ui` package."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "e.g. `seedu.venue.commons.StringUtilTest`"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "e.g. `seedu.venue.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "e.g. `seedu.venue.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/venue/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "vig42"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all calendarEvents in the list."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/venue/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/venue/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/venue/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/venue/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the venue book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the venue book."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/venue/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/venue/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/venue/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/venue/model/calendarEvent/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/venue/model/AddressBook.java[`AddressBook`] allows you to update a calendarEvent, and link:{repoURL}/src/main/java/seedu/venue/model/calendarEvent/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/venue/model/AddressBook.java[`AddressBook`]. Loop through each calendarEvent, and remove the `tag` from each calendarEvent."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/venue/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/venue/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your venue book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last calendarEvent in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "vig42"
        },
        "content": ". Use different colors for different tags inside calendarEvent cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/venue/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/venue/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/venue/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/venue/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/venue/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/venue/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/venue/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/venue/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/venue/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/venue/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the venue book."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/venue/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the venue book is updated."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/venue/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of calendarEvents when the application just started."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/venue/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of calendarEvents whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save venue and sync status."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "vig42"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of calendarEvents status bar."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the venue book to the cloud. However, the current implementation of the application constantly saves the venue book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the venue book storage."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the venue book can be saved in a fixed temporary venue."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/venue/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/venue/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/venue/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "vig42"
        },
        "content": "Edits the remark for a calendarEvent specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "vig42"
        },
        "content": "Edits the remark for the first calendarEvent to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "vig42"
        },
        "content": "Removes the remark for the first calendarEvent."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/venue/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/venue/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/venue/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/venue/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/venue/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/venue/ui/PersonCard.java[`PersonCard`] s to display a remark for each calendarEvent later."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/venue/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/venue/model/calendarEvent/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/venue/model/calendarEvent/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/venue/model/calendarEvent/Person.java[`Person`]."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/venue/model/calendarEvent/Person.java[`Person`]."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "vig42"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the calendarEvent will be created without a remark)."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/venue/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `scheduler.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/venue/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "vig42"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsScheduler.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/venue/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/venue/model/calendarEvent/Person.java[`Person`]."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/venue/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the calendarEvent that it is currently building."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/venue/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/venue/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/venue/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/venue/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "vig42"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a calendarEvent."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* is a tech-savvy university student"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* wants to manage significant number of tasks/events - e.g. courses, deadlines, homework - in one place"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*Value proposition*: manage university related tasks fast in a CLI driven application"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the app"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|`* * *` |user |add an event to my calendar |maintain my schedule through the calendar"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|`* * *` |user |delete an event in my calendar|remove events that are outdated or which I no longer am going for"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|`* * *` |user |edit the details of an event |update my event if it changes"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|`* * *` |user |search for an event |find them quickly instead of having to manually search on the gui"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|`* *` |user |tag an event |categorize my events by its nature, subject or purpose"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|`* *` |user |set a reminder for an event|be reminded of it and not forget the event"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|`*` |user |synchronise this calendar with other online calendars|have the flexibility of having multiple calendar applications without doing double work of maintaining two separately"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|`*` |user |change the color scheme of my application |personalize it for myself, and make it look aesthetically pleasing for me"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d Use case: Delete calendarEvent"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "vig42"
        },
        "content": "1.  User requests to list calendarEvents"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "vig42"
        },
        "content": "2.  AddressBook shows a list of calendarEvents"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "vig42"
        },
        "content": "3.  User requests to delete a specific calendarEvent in the list"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "vig42"
        },
        "content": "4.  AddressBook deletes the calendarEvent"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".  Should be able to hold up to 1000 events without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".  Events should be color coded by category or tag."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".  System should respond in less than 1 second."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".  The project is expected to be tested every week."
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".  Data should be stored in a human readable file."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".  A new user should be able to learn the basics of the application in less than one hour."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".  System should be able to work with user-inputted dates in any format."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different venue. Close the window."
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "   Expected: The most recent window size and venue is retained."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d Adding a calendar event"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "vig42"
        },
        "content": ". Adding a new calendar event to the scheduler"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Prerequisites: Nil"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Test case: `add event t/CS2103 Lecture d/Practical Exam v/i3 Auditorium s/16 Nov 4pm e/16 Nov 6pm tag/Graded` +"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "vig42"
        },
        "content": "   Expected: New calendar event is added. Details of the new calendar event shown in the status message."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Test case: `add event t/CS2103 Lecture d/Sleep v/Home s/16 Nov 4pm e/16 Nov 6pm` +"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "vig42"
        },
        "content": "   Expected: New calendar event is not added as it is a duplicate of the earlier one. Error details shown in the status message."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Other incorrect add event commands to try: `add event`, `add event {without all the required prefixes}`"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "vig42"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d\u003d Editing a calendar event"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Editing a calendar event in the scheduler"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".. Prerequisites: The calendar event to be edited must be present in the displayed calendar event list"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".. Test case: +"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    `add event t/CS2103 Lecture d/Practical Exam v/i3 Auditorium s/16 Nov 4pm e/16 Nov 6pm tag/Graded` +"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    `edit event [index] t/CS2105 Lecture` +"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    where `[index]` is the index of the newly added event listed on the calendar event list +"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "   Expected:"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "   New calendar event is added. Details of the new calendar event shown in the status message. +"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "   Calendar event\u0027s title is changed from `CS2103 Lecture` to `CS2105` Lecture"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".. Test case: +"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "       `add event t/CS2104 Tutorial d/Tutorial 3 v/AS6 04-10 s/16 Nov 2pm e/16 Nov 4pm` +"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "       `edit event [index] tag/important` +"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        where `[index]` is the index of the newly added event listed on the calendar event list +"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "      Expected:"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "      New calendar event is added. Details of the new calendar event shown in the status message. +"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "      Calendar event has a new tag titled `important`"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d Deleting a calendar event"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "vig42"
        },
        "content": ". Deleting a calendar event while all calendar events are listed"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Prerequisites: List all calendar events using the `list event` command. Multiple calendar events in the list."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Test case: `delete event 1` +"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "vig42"
        },
        "content": "   Expected: First calendar event is deleted from the list. Details of the deleted calendar event shown in the status message."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Test case: `delete event 0` +"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "vig42"
        },
        "content": "   Expected: No calendar event is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Other incorrect delete event commands to try: `delete event`, `delete event x` (where x is larger than the list size)"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d Finding calendar events"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "vig42"
        },
        "content": ". Search for calendar events in the scheduler"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Prerequisites: List all calendar events using the `list event` command. Multiple calendar events in the list."
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Test case: `find event CS2103` +"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "vig42"
        },
        "content": "   Expected: At least 1 calendar event is found (assuming you added the calendar event listed earlier). Number of filtered search results shown in the status message."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Test case: `find event CS2103 to/16 Nov 3pm` +"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "vig42"
        },
        "content": "   Expected: The event added earlier would not be shown. Number of filtered search results shown in the status message."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Test case: `find event tag/Graded` +"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "vig42"
        },
        "content": "   Expected: The event added earlier would be shown. Number of filtered search results shown in the status message."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Test case: `find event` +"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "vig42"
        },
        "content": "   Expected: No change in the list of calendar events. Error details shown in the status message."
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "vig42"
        },
        "content": ".. Other incorrect find event commands to try: `find event to/` `find event from/16 Nov 5pm to/15 Nov 8pm`"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d\u003d Adding a todolist event"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ". Adding a new todolist event to the todolist"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ".. Prerequisites: Nil"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ".. Test case: `add todo t/CS2103 assignment d/Practical Exam p/M` +"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "   Expected: New todolist event is added. Details of the new todolist event shown in the status message."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ".. Test case: `add todo t/CS2103 assignment d/Practical Exam p/M` +"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "   Expected: New todolist event is not added as it is a duplicate of the earlier one. Error details shown in the status message."
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ".. Other incorrect add todo commands to try: `add todo`, `add todo {without all the required prefixes}`"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d\u003d Deleting a todolist event"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ". Deleting a todolist event while all todolist events are listed"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ".. Prerequisites: List all todolist events using the `list todo` command. Multiple todolist events in the list."
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ".. Test case: `delete todo 1` +"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "   Expected: First todolist event is deleted from the list. Details of the deleted todolist event shown in the status message."
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ".. Test case: `delete todo 0` +"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "   Expected: No todolist event is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ".. Other incorrect delete todo commands to try: `delete todo`, `delete todo x` (where x is larger than the list size)"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d\u003d Showing description of a todolist event"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ". Showing description of a todolist event while all todolist events are listed"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ".. Prerequisites: List all todolist events using the `list todo` command. Multiple todolist events in the list. Success details shown in the status message."
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ".. Test case: `show todo 1` +"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "   Expected: Description of first todolist event is showed with a popup window."
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ".. Test case: `show todo 0` +"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "   Expected: No Description of todolist event is showed. Error details shown in the status message."
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ".. Other incorrect show todo commands to try: `shows todo`, `show todo x` (where x is larger than the list size)"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 129,
      "vig42": 188,
      "pangjiahao": 173,
      "SleepySanjinLi": 204,
      "-": 820
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e uses events to communicate with components without needing a direct coupling. Also note how the link:{repoURL}/src/main/java/seedu/venue/commons/core/index/EventsCenter.java[`EventsCenter.java`] acts as an event dispatcher to facilitate communication between event creators and event consumers."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/venue/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the AddressBook app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add more assertions to AddressBook as you see fit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Add more logging to AddressBook as you see fit."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Analyze the AddressBook code/design to identify,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as ControlsFx. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/venue/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/venue/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/venue/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Test methods `prefsReadSave()` and `addressBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/venue/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/venue/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/venue/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/venue/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern* : The \u003c\u003cDeveloperGuide#events-driven-nature-of-the-design, event driven mechanism\u003e\u003e used by this code base employs the Observer pattern. For example, objects that are interested in events need to have the `@Subscribe` annotation in the class (this is similar to implementing an `\\\u003c\u003cObserver\u003e\u003e` interface) and register with the `EventsCenter`. When something noteworthy happens, an event is raised and the `EventsCenter` notifies all relevant subscribers. Unlike in the Observer pattern in which the `\\\u003c\u003cObservable\u003e\u003e` class is notifying all `\\\u003c\u003cObserver\u003e\u003e` objects, here the `\\\u003c\u003cObservable\u003e\u003e` classes simply raises an event and the `EventsCenter` takes care of the notifications."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/venue/ui/UiPart.java[`UiPart`] (e.g. `PersonListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 10,
      "-": 256
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d U-Schedule - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T10-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "By: `Team T10-1`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// tag::intro[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "U-Schedule is for university students who *prefer to use a desktop app for managing their schedule*. More importantly, U-Schedule is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). It features a calendar to manage regular events such as lectures and tutorials, as well as a todo list for upcoming deadlines. If you can type fast, you can manage both of these more efficiently with U-Schedule than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// end::intro[]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// tag::quickstart[]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".  Download the latest `u-schedule.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for this application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "image::Ui.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* *`list event`* : lists all calendar events"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* *`list todo`* : lists all todo items"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "* **`add event`**`t/CS2103 Lecture d/Abstraction, IntelliJ, Gradle s/16 nov 4pm e/16 nov 6pm v/i3 Auditorium tag/lecture` : adds a calendar event titled `CS2103 Lecture` to the calendar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* **`add todo`**`t/CS2103 Assignment d/Version Control p/H` : adds a todo item titled `CS2103 Assignment` to the todo list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "* **`find event cs2103` : shows all events with title, description or venue matching `cs2103`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* **`delete event`**`3` : deletes the calendar event marked `3`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* **`delete todo`**`3` : deletes the todo item marked `3`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* **`show todo`**`3` : show the description of todo item marked `3`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// end::quickstart[]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// tag::features[]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add event t/TITLE`, `TITLE` is a parameter which can be used as `add event t/CS2103 Lecture`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* Items in curly brackets denote the choices of words that can be used. e.g. `add {event/todo}`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* Items in square brackets are optional e.g `t/TITLE [tag/TAG]` can be used as `t/CS2103 Lecture tag/lecture` or as `t/CS2103 Lecture`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[tag/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `tag/lecture`, `tag/cs2103` etc."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `t/TITLE d/DESCRIPTION`, `d/DESCRIPTION t/TITLE` is also acceptable."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* The second word specifies whether the command will operate on the todo list or the calendar. For example `add event` adds an event to the calendar and `add todo` will add an item to the todo list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* Priorities on the todo list are either `H`, `M` or `L` for high, medium or low respectively, in upper case."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// end::features[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Opens the User Guide in a new window."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d\u003d Adding: `add`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Adds a calendar event to the calendar +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Format: `add event t/TITLE d/DESCRIPTION s/START_DATETIME e/END_DATETIME v/VENUE [tag/TAG]...` +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Adds an item to the todo list +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Format: `add todo t/TITLE d/DESCRIPTION p/{H/M/L}`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* Adds the specified item to the calendar or todo list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* Since it is difficult to type a rigidly formatted date and time, a natural language date parser will try to parse the input for calendar events."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* The start and end datetimes can be word descriptions, such as \u0027the day after tomorrow\u0027, or \u00271 week from now\u0027."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* If only a time is specified, the application will assume you mean today."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "* For todo items, the priority can be `H`, `M` or `L` for high, medium or low respectively, in upper case."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "A calendar event can have any number of tags. (including 0)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "* `add event t/CS2103 Lecture d/Abstraction, IntelliJ, Gradle s/16 oct 2pm e/16 oct 4pm v/i3 Auditorium tag/lecture`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* `add todo t/CS2103 Assignment d/Version Control p/L`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d\u003d Listing: `list`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Shows the list of all calendar events / todo items in the calendar / todo list. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Format: `list {event/todo}`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// tag::edit[]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d\u003d Editing: `edit`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Edits an existing calendar event in the calendar. +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Format: `edit event INDEX [t/TITLE] [d/DESCRIPTION] [s/START_DATETIME] [e/END_DATETIME] [v/VENUE] [tags/TAG]...` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* Edits the calendar event / todo list item at the specified `INDEX`. The index refers to the index number shown in the displayed list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* When editing tags, the existing tags of the calendar event will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* You can remove all the calendar event\u0027s tags by typing `tag/` without specifying any tags after it."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* `edit event 1 d/Abstraction v/i3 Auditorium` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Edits the description and venue of the calendar event to be `Abstraction ` and `i3 Auditorium` respectively."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* `edit event 2 t/CS2103 Project Meetup` +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Edits the name of the 2nd calendar event to be `CS2103 Project Meetup`."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// end::edit[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d Searching for events: `find event`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": "Finds calendar events whose title, venue or description match any of the given keywords."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vig42"
        },
        "content": "Also optionally filters the search by the specified date \u0026 time interval as well as the specified tags. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vig42"
        },
        "content": "Format: `find event [KEYWORD MORE_KEYWORDS...] [from/DATE \u0026 TIME] [to/DATE \u0026 TIME] [tag/TAG] [tag/MORE_TAGS]...`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vig42"
        },
        "content": "* Shows list of events that match the keywords and fulfil the filter rules."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "* The most relevant results are shown at the top."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vig42"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vig42"
        },
        "content": "* Fuzzy Keyword Search"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vig42"
        },
        "content": "** The search is *case insensitive* for both keywords. e.g `lecture` will match `Lecture`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vig42"
        },
        "content": "** The order of the keywords does not matter. e.g. `CS2103 Lecture` will match `Lecture CS2103`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vig42"
        },
        "content": "** The fuzzy search allows for *partial matches for keywords*. e.g. `2103 lec` will match `CS2103 Lecture`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vig42"
        },
        "content": "*** Slight differences and typos will also usually be matched. e.g. `s2130 Lecutre` will match \u0027CS2103 Lecture\u0027"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "vig42"
        },
        "content": "* Filter by Date \u0026 Time"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Shows events that occur in the interval from the `from` date \u0026 time, to the `to` date \u0026 time."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vig42"
        },
        "content": "*** i.e. the event must be ongoing at some point in the time interval starting at the `from` date and ending at the `to` date"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vig42"
        },
        "content": "** You can choose to include only one of the 2 (`from` or `to`) date \u0026 times"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Date \u0026 time are parsed using natural language parsing, thus they can be input in most human-readable formats, e.g. `16 nov 8am`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vig42"
        },
        "content": "*** Note: sometimes date \u0026 time inputs may be parsed in an unexpected manner - see Question 3 in the \u003c\u003cFAQ,FAQ\u003e\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vig42"
        },
        "content": "* Filter by Tags"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vig42"
        },
        "content": "** In order for an event to be shown, it must have a tag that is *exactly matching* (although case-insensitive) with the input tag."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vig42"
        },
        "content": "** If multiple tags are input, the filter will only show the events with ALL the input tags."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* `find event lecture` +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "vig42"
        },
        "content": "Returns list of events whose title, venue or description matches the keyword `lecture`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "vig42"
        },
        "content": "* `find event cs2103 assignment tag/Project` +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "vig42"
        },
        "content": "Returns list of events matching the keywords `cs2103` and `assignment`, and having the tag `Project`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vig42"
        },
        "content": "* `find event exam from/29 nov 8am to/7 dec 5pm`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vig42"
        },
        "content": "Returns list of events matching the keyword `exam`, that is ongoing at some point between 8am on 29th November and 5pm on 7th December."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vig42"
        },
        "content": "* `find event project tag/CS2103 from/15 nov 10am `"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vig42"
        },
        "content": "Returns list of events matching the keyword `project`, having the tag `CS2103`, that is ongoing at some point after 10am on 15th November."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "vig42"
        },
        "content": "* `find event tag/cs2103 tag/lecture`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vig42"
        },
        "content": "Returns list of events having both the tags \u0027CS2103\u0027 and \u0027Lecture\u0027 (i.e. events with only the `CS2103` tag but not the `Lecture` tag would be excluded)."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d\u003d Deleting: `delete`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Deletes the specified calendar event / todo item from the calendar / todo list. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Format: `delete {event/todo} INDEX`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* Deletes the calendar event at the specified `INDEX`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "vig42"
        },
        "content": "* The index refers to the index number shown in the displayed calendar event list / todo list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* `list event` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "`delete event 2` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Deletes the 2nd calendar event in the calendar."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* `find event assignment` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "`delete event 1` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Deletes the 1st calendar event in the results of the `find event` command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `list todo` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "`delete todo 1` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Deletes the 1st todo item in the todo list."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// tag::select[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d Selecting event: `select event`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Selects the calendar event identified by the index number used in the displayed list. +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Format: `select event INDEX`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "vig42"
        },
        "content": "* Selects the calendar event at the specified index on the list, and jumps to the event in the calendar display.."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* The index refers to the index number shown in the displayed calendar event list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* `list event` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "`select event 2` +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Selects the 2nd calendar event in the calendar."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* `find event lecture` +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "`select event 1` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Selects the 1st calendar event in the results of the `find event` command."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// end::select[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "// tag::showDes[]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d\u003d Showing description: `show todo`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Shows description of the specified todo item from the todo list. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Format: `show todo INDEX`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "****"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* Shows description of the todo item at the specified `INDEX`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* The index refers to the index number shown in the displayed todo list."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "****"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* `list todo` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "`show todo 1` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Shows description of the 1st todo item in the todo list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "// end::showDes[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Restores the calendar to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Undoable commands: those commands that modify the calendar\u0027s /todo list\u0027s content (`add event`, `delete event`, `edit event` and `clear`)."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* `delete event 1` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "`list event` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "`undo` (reverses the `delete event 1` command) +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "`list event` +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* `delete event 1` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "`undo` (reverses the `delete event 1` command) +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* `delete event 1` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "`undo` (reverses the `delete event 1` command) +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "`redo` (reapplies the `delete event 1` command) +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* `delete event 1` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* `delete event 1` +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "`undo` (reverses the `delete event 1` command) +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "`redo` (reapplies the `delete event 1` command) +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Clears all entries from the calendar. +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Format: `clear calendar`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d Using the Calendar Display"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d Manual navigation:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Navigating the calendar to viewing the events:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* kbd:[\u0026larr;]: Display previous week"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* kbd:[\u0026rarr;]: Display next week"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* kbd:[\u0026uarr;]: Scroll up to events earlier in the day"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* kbd:[\u0026darr;]: Scroll down to events later in the day"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Scrolling with the mouse wheel is also possible."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "The calendar display must be in focus in order to navigate with the arrow keys."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d Automatic Navigation:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "When selecting an event, either by the `select` command or clicking in the list of calendar events,"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "the calendar display will navigate to that event and attempt to centralize it in the calendar."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing Event Details"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "The compact display of the calendar does not allow all the information of the event to be displayed."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "To view full details of an event, double click on it to open a dialog box containing the details of the event."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "// end::calendar[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Application data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "// tag::faq[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous U-Schedule folder."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "*Q*: Why is the calendar display not responding to the arrow keys? +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "*A*: The calendar display must be in focus in order for it to receive the arrow key events. Try clicking on the calendar display. If a blue highlight is present around the edges, the calendar display is in focus and will now receive the key presses."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "*Q*: The date time parser is parsing dates unexpectedly! +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "*A*: The Natural Language Parser we used tries its best to parse a datetime out of any input. Hence, there are some inputs which even humans would not consider a valid date, but the parser would still try to find a best fit. Most of the time, if a human can understand the input, the parser will parse the input correctly."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "// end::faq[]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// tag::summary[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* *Add* `add event t/TITLE d/DESCRIPTION s/START_DATETIME e/END_DATETIME v/VENUE [tag/TAG]...` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "e.g. `add event t/CS2103 Lecture d/Abstraction, IntelliJ, Gradle s/2018-10-16 14:00 e/2018-10-16 16:00 v/i3 Auditorium tag/lecture`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* *Add* `add todo t/TITLE d/DESCRIPTION p/{H/M/L}` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "e.g. `add todo t/CS2103 Assignment d/Version Control p/L`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* *Clear* : `clear calendar`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* *Delete* : `delete {event/todo} INDEX` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "e.g. `delete event 3`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* *Edit* : `edit event INDEX [t/TITLE] [d/DESCRIPTION] [s/START_DATETIME] [e/END_DATETIME] [v/VENUE] [tag/TAG]...` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "e.g. `edit event 1 d/Abstraction v/i3 Auditorium`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "vig42"
        },
        "content": "* *Find* : `find event [KEYWORD MORE_KEYWORDS...] [from/DATE \u0026 TIME] [to/DATE \u0026 TIME] [tag/TAG] [tag/MORE_TAGS]` +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "vig42"
        },
        "content": "e.g. `find event CS2103 Lecture from/16 Nov 8am tag/PE`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* *List* : `list {event/todo}`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "vig42"
        },
        "content": "* *Select* : `select event INDEX` +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "e.g.`select event 2`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* *Show Description* : `show todo INDEX` +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "e.g.`show todo 2`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* *Calendar navigation* : kbd:[\u0026uarr;] kbd:[\u0026darr;] kbd:[\u0026larr;] kbd:[\u0026rarr;]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "// end::summary[]"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 113,
      "vig42": 41,
      "pangjiahao": 42,
      "SleepySanjinLi": 23,
      "-": 169
    }
  },
  {
    "path": "docs/UsingCoveralls.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Coveralls"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/[Coveralls] is a web service that tracks code coverage over time for GitHub projects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Coveralls requires Travis CI to be set up beforehand as Travis sends the coverage report from the latest build to Coveralls."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "If you have not set up Travis CI, see \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e. Currently, Coveralls supports Travis CI but not AppVeyor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Coveralls"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://coveralls.io/ and click `SIGN IN`. Then click `GITHUB SIGN IN` and enter your GitHub account details if needed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".  After logging in, you will be brought to the `Your Repositories` page. On the site\u0027s navigation bar, click https://coveralls.io/repos/new[ADD REPOS]."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ".  Find the switch for the forked repository."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `GITHUB SETTINGS` as shown below:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/github_settings.png[GitHub settings]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "to Coveralls so that it can access your repository."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* If your repository cannot be found, click `SYNC REPOS`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/sync_repos.png[Sync repos]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".  Update the link of the `Coverage Status` badge at the top of your \u003c\u003cREADME#, README.adoc\u003e\u003e to point to that of your own repo by replacing the outlined areas with `your-org-title/your-repo-title`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_asciidoc_code.png[Coverage Status Badge]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  You can now see the coverage report for your project after each Travis build by clicking on the `Coverage Status` badge."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_report.png[Coverage Report Summary]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Disabling Coveralls Automatic Comments on Pull Requests"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Coveralls automatically comments on the coverage status of the pull requests in GitHub. If it\u0027s a hindrance, you can disable it in the settings of your project in Coveralls:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click `Settings`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".  Uncheck the `LEAVE COMMENTS?` checkbox. Then click `SAVE CHANGES`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/disable_comments.png[Disable comments, width \u003d 942]"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 1,
      "-": 53
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Runs all tests in the `seedu.venue.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Runs all non-GUI tests in the `seedu.venue`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "-": 111
    }
  },
  {
    "path": "docs/UsingNetlify.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Netlify"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.netlify.com/[Netlify] is an automated hosting platform for deploying static websites. With the aid of build tools such as Gradle, Netlify provides a smoother experience for previewing documentation. This can be done by using Netlify\u0027s https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/[Deploy Previews] feature, which shows a preview of the updated documentation whenever a pull request is made."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Netlify"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork the repository to your own organization."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to https://www.netlify.com/ and click `Sign Up`. Next, click `GITHUB SIGN IN`, enter your GitHub account details and authorize netlify."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ". After logging in, click `New site from Git`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ". You will then be brought to the setup page. Click `GitHub` to link your repository to Netlify."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Depending on whether you are the owner of the repository, you can either grant or request access to Netlify so that it can access your repository and build your documentation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/grant_or_request_access.png[Grant or request access, width \u003d 630]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* After granting or requesting access to your repository, click `Authorize netlify`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ". Pick your repository from the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Fill out the details as follows and then click `Deploy site`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Branch to deploy: select `master` branch"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* Build command: `./gradlew asciidoctor`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "The build command is the command that builds the documentation into HTML format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Publish directory: `build/docs/html5`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The publish directory is the directory in which the built HTML documentation resides."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Once Netlify has completed building your project, you can now:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* View your main branch\u0027s deployed documentation on the site title given by Netlify (customizable as shown \u003c\u003cChanging the site title of your project, below\u003e\u003e)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "image:netlify/temp_site_name.png[Temporary site title, width \u003d 630]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Preview the updated documentation whenever a pull request is made by clicking the `Details` hyperlink next to the Netlify test status."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/netlify_details.png[Netlify details link, width \u003d 630]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d Changing the site title of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "If you don\u0027t like the site title given by Netlify, you can change it as follows:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on `Settings`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ". Then click `Change site title` and fill in your desired site title."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "image:netlify/change_site_name.png[Change site title, width \u003d 630]"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 6,
      "-": 44
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `./gradlew clean headless allTests coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Automatically retries the build up to 3 times if a task fails."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* title: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".  Go to the URL `\\https://\u003cyour-username-or-organization-title\u003e.github.io/addressbook-level4/`. You should see your `README` file displayed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "-": 130
    }
  },
  {
    "path": "docs/team/bryanwongweiheng.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d Bryan Wong Wei Heng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d PROJECT: U-Schedule"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "U-Schedule is a desktop calendar application for university students written for the project for the module CS2103"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "Software Engineering. The user interacts with it using a CLI, and it has a GUI created with JavaFX for user feedback. It"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* *Major enhancement*: added ability to have both two and one word commands"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** What it does: allows the app to have commands with one word and commands with two words"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Justification: this feature allows the app to have more specific commands"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dbryanwongweiheng[Code Contributed]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*** Review issues created from PE dry run"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*** Reviewed PRs (with non-trivial review comments) e.g."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T10-1/main/pull/16[#16]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T10-1/main/pull/37[#37]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*** Labeled issues in the tracker"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*** Changed GUI layout and color scheme https://github.com/CS2103-AY1819S1-T10-1/main/pull/38[#38]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "https://github.com/CS2103-AY1819S1-T10-1/main/pull/40[#40] https://github.com/CS2103-AY1819S1-T10-1/main/pull/41[#41]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*** Update Test Data https://github.com/CS2103-AY1819S1-T10-1/main/pull/112[#112]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*** Change model from person to calendar event https://github.com/CS2103-AY1819S1-T10-1/main/pull/20[#20]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*** Managed user guide through the project"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*** Updated README"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "*** Updated AboutUs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintro]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquickstart]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfeatures]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsummary]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dselect]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dCalendarModel]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dparsing]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 67
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "AddressBook - Level 4 is a desktop venue book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 1,
      "-": 71
    }
  },
  {
    "path": "docs/team/pangjiahao.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d Pang Jia Hao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d PROJECT: U-Schedule"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "U-Schedule is a desktop scheduler application, that is targeted towards"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "university students who want a way to manage their schedules. It allows"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "users to manage 2 types of events: Calendar Events, which are events"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "which one normally enters into a calendar, and ToDoListEvents, which are"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "tasks that the user wants to keep track of. The primary interface is"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "the command line, and the GUI is created with JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "U-Scheduler is written in Java, and has about 10kLoC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* *Major enhancement*: Added the GUI to display calendar events in a calendar."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "Allows the user to view calendar events graphically,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "as well as navigate around their timetable."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "** Justification: This feature is a critical addition to a"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "scheduler product. Without a visual representation of a calendar,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "the user would be relying on date and time strings,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "which would be extremely non-user-friendly even when"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "in standard format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "I designed a class to contain the third-party library for rendering"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "events as a calendar. The class acts as a wrapper around the calendar"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "and contains the logic for controlling the calendar. I implemented the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "controls needed for navigating around the calendar GUI. I also implemented"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "quality of life features such as automatically navigating to show events"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "that the user selected, as well as opening a pop-up dialog when the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "double clicks on events in the calendar."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "** Credits: Used jxtras.Agenda for rendering events visually."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "** link:https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dpangjiahao\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-12\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[RepoSense]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "*** Helped with issue tracking."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "*** Prototyped fuzzy search for finding events."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "(https://github.com/CS2103-AY1819S1-T10-1/main/pull/48[#48])"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "**** Wrote an initial set of utility methods using the fuzzywuzzy library."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "**** Modified the original find command to use fuzzy search."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "*** Designed FsList (FilteredSortedList), a list that allows filtering"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "by multiple predicates and sorting all in one. (https://github.com/CS2103-AY1819S1-T10-1/main/pull/116[#116])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "*** Improved TestApp to support the improved Find command and"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "the todo list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "(https://github.com/CS2103-AY1819S1-T10-1/main/pull/116[#116],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "https://github.com/CS2103-AY1819S1-T10-1/main/pull/130[#130])"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "*** Updated class diagrams in the Developer Guide:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "(https://github.com/CS2103-AY1819S1-T10-1/main/pull/117[#117])"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "*** PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "(https://github.com/CS2103-AY1819S1-T10-1/main/pull/20[#20],"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "https://github.com/CS2103-AY1819S1-T10-1/main/pull/39[#39],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "https://github.com/CS2103-AY1819S1-T10-1/main/pull/69[#69],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "https://github.com/CS2103-AY1819S1-T10-1/main/pull/131[#131])"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "*** Integrated a third party library (natty) to the project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "(https://github.com/CS2103-AY1819S1-T10-1/main/pull/48[#48])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "*** Integrated a third party library (fuzzywuzzy) into the project."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "(https://github.com/CS2103-AY1819S1-T10-1/main/pull/48[#48])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "*** Integrated a third party library (jfxtras.Agenda) into the project."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "https://github.com/CS2103-AY1819S1-T10-1/main/pull/58[#58])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalendar]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfaq]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcalendardisplay]"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 105
    }
  },
  {
    "path": "docs/team/sleepyliyixin.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d Sleepy Li Yi Xin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d PROJECT: U-Schedule"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "*U-Schedule* is a desktop calendar application for university students written for the project for the module CS2103"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "Software Engineering. The user interacts with it using a CLI, and it has a GUI created with JavaFX for user feedback."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* *Major enhancement*: added *the ToDoList feature*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** What it does: It allows users to record the tasks with different priorities that need to be completed and delete if completed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Justification: This feature improves the product significantly because in addition to those events that occur at specific times, users also need to record tasks that do not have a specific time. These tasks can be assignments, projects or some simple plans. And they can do tasks according to priority."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Highlights: This enhancement uses a different model from calendar events and it need re-construct logic, storage and ui conponents."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Add a showDescriptionCommand to show description of task with a popup window."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Make priorities displayed in different colors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dsleepysanjinli"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "*** Set up some issues."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "*** Managing milestones."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "*** Implement GUI for todo lisk (Pull requests https://github.com/CS2103-AY1819S1-T10-1/main/pull/64)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide and Developer Guide: https://github.com/CS2103-AY1819S1-T10-1/main/pull/120"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S1-T10-1/main/pull/130"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "include::../UserGuide.adoc[tag\u003dshowDes]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dToDoList]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "*And modify diagrams in Design parts, including Architecture, UI Component, Logic Component and Storage Component.*"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 58
    }
  },
  {
    "path": "docs/team/vighneshrameshiyer.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d Vighnesh Ramesh Iyer - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d PROJECT: U-Schedule"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "U-Schedule is a desktop calendar application for university students written for the project for the module CS2103"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "Software Engineering. The user interacts with it using a CLI, and it has a GUI created with JavaFX for user feedback. It"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": " is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "* *Major enhancement*: added *fuzzy search with filters*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "** What it does: Allows the user to search for commands without having to type the exact matching words - e.g. \"find event proj\" to find a calendar event with \"Project\" in its name. Also allows the user to filter their search by date and time, and by tags, for more precise searching. Finally, it displays the most relevant results first."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Justification: This feature improves the product significantly because it allows users to search for events more conveniently and more precisely. This would improve the overall user experience as well as the ease of navigation for users of U-Schedule, since the search function also makes the edit and select functions more convenient."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Highlights: This feature expands upon the existing find command in Address Book (Level 4), by revamping the Parser and Model to allow extra functionality (filtering by multiple Predicates and Sorting). This feature has the potential to be extended further, to allow users to filter the search by even more criteria or to incorporate more fine-grained filtering with boolean logic."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Credits: Uses third party library https://github.com/xdrop/fuzzywuzzy[fuzzywuzzy] for the fuzzy search"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "* *Minor enhancement*: added feature that switches the GUI to the appropriate tab - either To Do List or Calendar Events - when a todo or event command is entered respectively"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "* https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dvig42[Code Contributed]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "*** Set up Travis and AppVeyor CI, Coveralls and Netlify for our team repo (Pull requests: https://github.com/CS2103-AY1819S1-T10-1/main/pull/5[#5], https://github.com/CS2103-AY1819S1-T10-1/main/pull/49[#49])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "*** Modified classes in the original AddressBook app to help transform it into our U-Schedule app. e.g. renaming AddressBook to Scheduler, modifying CalendarEvent and the various parsers to accept and store events\u0027 start and end date/time (Pull Requests: https://github.com/CS2103-AY1819S1-T10-1/main/pull/11[#11], https://github.com/CS2103-AY1819S1-T10-1/main/pull/39[#39])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "*** Updated the GUI color scheme (Pull request https://github.com/CS2103-AY1819S1-T10-1/main/pull/111[#111])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "*** Wrote additional tests and test cases for existing features, increasing coverage to 91% (Pull request https://github.com/CS2103-AY1819S1-T10-1/main/pull/131[#131])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "*** Modified the Developer Guide (Architecture, Logic, Model and Storage sections), including the class and sequence diagrams, to reflect the modifications we made to the original AddressBook (Level 4) (Pull Requests: https://github.com/CS2103-AY1819S1-T10-1/main/pull/119[#119], https://github.com/CS2103-AY1819S1-T10-1/main/pull/122/files[#122])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S1-T10-1/main/pull/17[#17], https://github.com/CS2103-AY1819S1-T10-1/main/pull/60[#60], https://github.com/CS2103-AY1819S1-T10-1/main/pull/67[#67], https://github.com/CS2103-AY1819S1-T10-1/main/pull/78[#78]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/CS2103-AY1819S1-F11-4/main/issues/170[1], https://github.com/CS2103-AY1819S1-F11-4/main/issues/192[2])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfuzzysearch]"
      }
    ],
    "authorContributionMap": {
      "vig42": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 8,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelManagerToDo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ReadOnlyToDoList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ToDoList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.storage.SchedulerStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.storage.ToDoListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.storage.XmlSchedulerStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.storage.XmlToDoListStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    protected ModelToDo modelToDo;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing U-Schedule ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "        SchedulerStorage schedulerStorage \u003d new XmlSchedulerStorage(userPrefs.getSchedulerFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListStorage toDoListStorage \u003d new XmlToDoListStorage(userPrefs.getToDoListFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        storage \u003d new StorageManager(schedulerStorage, toDoListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        modelToDo \u003d initModelManagerToDo(storage, userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        logic \u003d new LogicManager(model, modelToDo);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s scheduler and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * The data from the sample scheduler will be used instead if {@code storage}\u0027s scheduler is not found,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * or an empty scheduler will be used instead if errors occur when reading {@code storage}\u0027s scheduler."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Optional\u003cReadOnlyScheduler\u003e schedulerOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ReadOnlyScheduler initialData;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": "            schedulerOptional \u003d storage.readScheduler();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "            if (!schedulerOptional.isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Scheduler\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "            initialData \u003d schedulerOptional.orElseGet(SampleDataUtil::getSampleScheduler);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Scheduler\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "            initialData \u003d new Scheduler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Scheduler\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "            initialData \u003d new Scheduler();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns a {@code ModelManagerToDo} with the data from {@code storage}\u0027s todolist and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * The data from the sample todolist will be used instead if {@code storage}\u0027s todolist is not found,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * or an empty todolist will be used instead if errors occur when reading {@code storage}\u0027s todolist."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private ModelToDo initModelManagerToDo(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Optional\u003cReadOnlyToDoList\u003e toDoListOptional;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ReadOnlyToDoList initialData;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            toDoListOptional \u003d storage.readToDoList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            if (!toDoListOptional.isPresent()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ToDoList\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            initialData \u003d toDoListOptional.orElseGet(SampleDataUtil::getSampleToDoList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ToDoList\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            initialData \u003d new ToDoList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ToDoList\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            initialData \u003d new ToDoList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return new ModelManagerToDo(initialData, userPrefs);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "vig42"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Scheduler\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "vig42"
        },
        "content": "        logger.info(\"Starting Scheduler \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping U-Schedule ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 9,
      "vig42": 16,
      "SleepySanjinLi": 38,
      "-": 179
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private String appTitle \u003d \"U-Schedule\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    // TODO review preferences, scheduler.xml could probably be renamed to calendar.xml"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        sb.append(\"\\nPreference file Venue : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String LOG_FILE \u003d \"scheduler.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "vig42": 1,
      "-": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command.\\nEnter \u0027help\u0027 to see the list of commands.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX \u003d \"The calendar event index provided \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        + \"is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String MESSAGE_INVALID_TODOLIST_EVENTS_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \"The todo item index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String MESSAGE_CALENDAR_EVENTS_LISTED_OVERVIEW \u003d \"%1$d calendar events listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 4,
      "vig42": 1,
      "SleepySanjinLi": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 15,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 9,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message creation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/SchedulerChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Indicates the Scheduler in the model has changed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class SchedulerChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public final ReadOnlyScheduler data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public SchedulerChangedEvent(ReadOnlyScheduler data) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return \"number of events \" + data.getCalendarEventList().size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "vig42": 18,
      "pangjiahao": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/ToDoListChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ReadOnlyToDoList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Indicates the ToDoList in the modelToDo has changed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ToDoListChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public final ReadOnlyToDoList data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListChangedEvent(ReadOnlyToDoList data) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return \"number of events \" + data.getToDoList().size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 1,
      "SleepySanjinLi": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/CalendarDisplayTimeChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * Indicates a change in the time displayed by the calendar ui"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "public class CalendarDisplayTimeChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public final LocalDateTime newLocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public CalendarDisplayTimeChangedEvent(LocalDateTime newLocalDateTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        this.newLocalDateTime \u003d newLocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 2,
      "pangjiahao": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/CalendarPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Represents a selection change in the Calendar Event List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "public class CalendarPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public final CalendarEvent newSelection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public CalendarPanelSelectionChangedEvent(CalendarEvent newSelection) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 2,
      "pangjiahao": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ExitAppRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request for App termination"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitAppRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToDateTimeEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * Indicates a request for the calendar ui to display a particular localDateTime."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * The {@code targetLocalDateTime} will have nanoseconds set to 0."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "public class JumpToDateTimeEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public final LocalDateTime targetLocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public JumpToDateTimeEvent(LocalDateTime targetLocalDateTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        this.targetLocalDateTime \u003d targetLocalDateTime.withNano(0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 22,
      "SleepySanjinLi": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * Indicates a request to jump to an index in the list of calendar events"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/SwitchToSearchTabEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": " * An event requesting to switch to the Calendar Event Search tab"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class SwitchToSearchTabEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/SwitchToTasksTabEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": " * An event requesting to switch to the To Do List tab"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class SwitchToTasksTabEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/TaskPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Represents a selection change in the Task List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class TaskPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public final ToDoListEvent newSelection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public TaskPanelSelectionChangedEvent(ToDoListEvent newSelection) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 1,
      "SleepySanjinLi": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ToggleTabEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * An event requesting to switch to the To Do List tab"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class ToggleTabEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 14,
      "vig42": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 4,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import me.xdrop.fuzzywuzzy.FuzzySearch;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Checks if {@code collection} of strings contains {@code string} (ignoring case)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param collection collection to be checked"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param string     that is being searched for"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @return whether string is present in the collection"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static boolean containsIgnoreCase(Collection\u003cString\u003e collection, String string) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(string);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(collection);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String preppedString \u003d string.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "        checkArgument(!preppedString.isEmpty(), \"String parameter cannot be empty\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "        for (String str : collection) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "            if (str.trim().equalsIgnoreCase(string)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Checks if {@code sentence} contains {@code word}, or words similar to {@code word}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tolerance higher tolerance means only very similar words will match, value between 0 to 100"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence  sentence to be checked"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word      that is being searched for, does not need to be single word"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return whether words are similar within the tolerance"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordFuzzy(String sentence, String word, int tolerance) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "        int score \u003d fuzzyMatchScore(sentence, word);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return (score \u003e tolerance);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Checks if {@code sentence} contains {@code word}, or words similar to {@code word}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns an integer score representing the degree to which the word matches the sentence"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Closer match would return a higher integer"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param sentence sentence to be checked"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param word     that is being searched for, does not need to be single word"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @return int between 0 and 100"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static int fuzzyMatchScore(String sentence, String word) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": "        int score \u003d Integer.max(computePartialRatio(preppedSentence, preppedWord),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vig42"
        },
        "content": "                computeTokenSetRatio(preppedSentence, preppedWord));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Computes the partial ratio test between 2 strings."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Roughly speaking, this tests if 2 strings are the same sequence of characters, or if one is a substring of the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * other"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * More similar strings return a higher number"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * @return int between 0 and 100. A higher number means a better match"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static int computePartialRatio(String string1, String string2) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return FuzzySearch.partialRatio(string1, string2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Computes the token set ratio test between 2 strings."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Roughly speaking, this tests for presence of keywords, regardless of order"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * More similar strings return a higher number"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * @return int between 0 and 100. A higher number means a better match"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static int computeTokenSetRatio(String string1, String string2) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return FuzzySearch.tokenSetRatio(string1, string2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "vig42": 50,
      "pangjiahao": 7,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns an unmodifiable view of the full list of calendar events"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "    ObservableList\u003cCalendarEvent\u003e getFullCalendarEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of calendar events"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    ObservableList\u003cCalendarEvent\u003e getFilteredCalendarEventList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of todolist events"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    ObservableList\u003cToDoListEvent\u003e getFilteredToDoListEventList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 7,
      "vig42": 7,
      "SleepySanjinLi": 6,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.logic.parser.SchedulerParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final ModelToDo modelToDo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final SchedulerParser schedulerParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public LogicManager(Model model, ModelToDo modelToDo) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.modelToDo \u003d modelToDo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        schedulerParser \u003d new SchedulerParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "            Command command \u003d schedulerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "            if (command.isToDoCommand()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "                return command.execute(modelToDo, history);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return command.execute(model, history);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ObservableList\u003cCalendarEvent\u003e getFullCalendarEventList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return model.getFullCalendarEventList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ObservableList\u003cCalendarEvent\u003e getFilteredCalendarEventList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return model.getFilteredAndSortedCalendarEventList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ObservableList\u003cToDoListEvent\u003e getFilteredToDoListEventList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return modelToDo.getFilteredToDoListEventList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 15,
      "SleepySanjinLi": 7,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Adds a calendar event to the calendar of the scheduler."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add event\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the calendar. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + PREFIX_START + \"START DATE \u0026 TIME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + PREFIX_END + \"END DATE \u0026 TIME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        + PREFIX_VENUE + \"VENUE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + PREFIX_TITLE + \"CS2103 Final Exam \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + PREFIX_DESCRIPTION + \"Bring calculator \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + PREFIX_START + \"2018-12-05 17:00 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + PREFIX_END + \"2018-12-05 19:00 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + PREFIX_VENUE + \"MPSH4 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + PREFIX_TAG + \"CS2103 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + PREFIX_TAG + \"Final\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CALENDAR_EVENT \u003d \"This event already exists in the calendar\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final CalendarEvent toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Creates an AddEventCommand to add the specified {@code CalendarEvent}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public AddEventCommand(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(calendarEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        toAdd \u003d calendarEvent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (model.hasCalendarEvent(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CALENDAR_EVENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.addCalendarEvent(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.commitScheduler();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_CALENDAR);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 15,
      "vig42": 26,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddToDoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.ui.SwitchToTasksTabEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Adds a todolist event to the toDoList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class AddToDoCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add todo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a event to the todo list. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        + PREFIX_TITLE + \"CS2103 Final Exam \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        + PREFIX_DESCRIPTION + \"Bring calculator \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        + PREFIX_PRIORITY + \"H \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New todo event added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TODO_EVENT \u003d \"This todo event already exists in the todolist\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final ToDoListEvent toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Creates an AddToDoCommand to add the specified {@code ToDoListEvent}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public AddToDoCommand(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(toDoListEvent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toAdd \u003d toDoListEvent;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "        super.isToDoCommand \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_TODO);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(modelToDo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (modelToDo.hasToDoListEvent(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TODO_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        modelToDo.addToDoListEvent(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "        EventsCenter.getInstance().post(new SwitchToTasksTabEvent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            || (other instanceof AddToDoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddToDoCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 13,
      "SleepySanjinLi": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCalendarCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Clears the calendar."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class ClearCalendarCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear calendar\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Calendar has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.resetData(new Scheduler());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        model.clearAllPredicatesAndComparators();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.commitScheduler();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_CALENDAR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 5,
      "vig42": 9,
      "pangjiahao": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_INCORRECT_MODEL_TODO \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \"Incorrect Model: To Do Commands should operate on the ModelTodo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_INCORRECT_MODEL_CALENDAR \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \"Incorrect Model: Calendar Commands should operate on the Model\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "    protected boolean isToDoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns whether command is a todolist command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean isToDoCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return isToDoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Executes the todolist command and returns the result message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param modelToDo {@code ModelToDo} which the todolist command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param history   {@code CommandHistory} which the todolist command should operate on."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public abstract CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 24,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Deletes a calendar event identified using it\u0027s displayed index from the calendar."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete event\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + \": Deletes the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_DELETE_CALENDAR_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public DeleteEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cCalendarEvent\u003e lastShownList \u003d model.getFilteredAndSortedCalendarEventList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent calendarEventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.deleteCalendarEvent(calendarEventToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.commitScheduler();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CALENDAR_EVENT_SUCCESS, calendarEventToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_CALENDAR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            || (other instanceof DeleteEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 6,
      "vig42": 15,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteToDoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.ui.SwitchToTasksTabEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Deletes a todolist event identified using it\u0027s displayed index from the todolist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class DeleteToDoCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete todo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        + \": Deletes the event identified by the index number used in the displayed todo list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String MESSAGE_DELETE_TODOLIST_EVENT_SUCCESS \u003d \"Deleted ToDo Event: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public DeleteToDoCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        super.isToDoCommand \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_TODO);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(modelToDo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        List\u003cToDoListEvent\u003e lastShownList \u003d modelToDo.getFilteredToDoListEventList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TODOLIST_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent toDoListEventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        modelToDo.deleteToDoListEvent(toDoListEventToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        modelToDo.commitToDoList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        EventsCenter.getInstance().post(new SwitchToTasksTabEvent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TODOLIST_EVENT_SUCCESS, toDoListEventToDelete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            || (other instanceof DeleteToDoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteToDoCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 13,
      "SleepySanjinLi": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTimeInfo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Venue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Edits the details of an existing calendar event in the calendar of the scheduler."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class EditEventCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit event\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + \"by the index number used in the displayed event list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + \"[\" + PREFIX_START + \"START DATE \u0026 TIME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + \"[\" + PREFIX_END + \"END DATE \u0026 TIME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        + \"[\" + PREFIX_VENUE + \"VENUE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        + PREFIX_DESCRIPTION + \"91234567 \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_EDIT_CALENDAR_EVENT_SUCCESS \u003d \"Edited Event: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CALENDAR_EVENT \u003d \"This event already exists in the calendar.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final EditCalendarEventDescriptor editCalendarEventDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param index                       of the calendar event in the filtered calendar event list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param editCalendarEventDescriptor details to edit the calendar event with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public EditEventCommand(Index index, EditCalendarEventDescriptor editCalendarEventDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(editCalendarEventDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.editCalendarEventDescriptor \u003d new EditCalendarEventDescriptor(editCalendarEventDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Creates and returns a {@code CalendarEvent} with the details of {@code calendarEventToEdit}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * edited with {@code editCalendarEventDescriptor}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static CalendarEvent createEditedCalendarEvent(CalendarEvent calendarEventToEdit,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                                                           EditCalendarEventDescriptor editCalendarEventDescriptor)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assert calendarEventToEdit !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Title updatedName \u003d editCalendarEventDescriptor.getTitle().orElse(calendarEventToEdit.getTitle());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Description updatedDescription \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            editCalendarEventDescriptor.getDescription().orElse(calendarEventToEdit.getDescriptionObject());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DateTime updatedStart \u003d editCalendarEventDescriptor.getStart().orElse(calendarEventToEdit.getStart());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DateTime updatedEnd \u003d editCalendarEventDescriptor.getEnd().orElse(calendarEventToEdit.getEnd());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (!DateTimeInfo.isValidStartAndEnd(updatedStart, updatedEnd)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            throw new CommandException(DateTimeInfo.MESSAGE_DATETIMEINFO_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Venue updatedVenue \u003d editCalendarEventDescriptor.getVenue().orElse(calendarEventToEdit.getVenue());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCalendarEventDescriptor.getTags().orElse(calendarEventToEdit.getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return new CalendarEvent(updatedName, updatedDescription,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            new DateTimeInfo(updatedStart, updatedEnd), updatedVenue, updatedTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cCalendarEvent\u003e lastShownList \u003d model.getFilteredAndSortedCalendarEventList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent calendarEventToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent editedCalendarEvent \u003d createEditedCalendarEvent(calendarEventToEdit, editCalendarEventDescriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (!calendarEventToEdit.isSameCalendarEvent(editedCalendarEvent)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u0026\u0026 model.hasCalendarEvent(editedCalendarEvent)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CALENDAR_EVENT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.updateCalendarEvent(calendarEventToEdit, editedCalendarEvent);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.commitScheduler();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CALENDAR_EVENT_SUCCESS, editedCalendarEvent));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_CALENDAR);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (!(other instanceof EditEventCommand)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand e \u003d (EditEventCommand) other;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 editCalendarEventDescriptor.equals(e.editCalendarEventDescriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Stores the details to edit the calendar event with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * corresponding field value of the calendar event."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static class EditCalendarEventDescriptor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vig42"
        },
        "content": "        private DateTime start;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "vig42"
        },
        "content": "        private DateTime end;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        private Venue venue;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        public EditCalendarEventDescriptor() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public EditCalendarEventDescriptor(EditCalendarEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vig42"
        },
        "content": "            setStart(toCopy.start);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vig42"
        },
        "content": "            setEnd(toCopy.end);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            setVenue(toCopy.venue);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, description, start, end, venue, tags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public Optional\u003cDateTime\u003e getStart() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return Optional.ofNullable(start);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        public void setStart(DateTime start) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            this.start \u003d start;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public Optional\u003cDateTime\u003e getEnd() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return Optional.ofNullable(end);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        public void setEnd(DateTime end) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            this.end \u003d end;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        public Optional\u003cVenue\u003e getVenue() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return Optional.ofNullable(venue);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        public void setVenue(Venue venue) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            this.venue \u003d venue;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "vig42"
        },
        "content": "            if (!(other instanceof EditCalendarEventDescriptor)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "vig42"
        },
        "content": "            EditCalendarEventDescriptor e \u003d (EditCalendarEventDescriptor) other;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "vig42"
        },
        "content": "                \u0026\u0026 getStart().equals(e.getStart())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "vig42"
        },
        "content": "                \u0026\u0026 getEnd().equals(e.getEnd())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                \u0026\u0026 getVenue().equals(e.getVenue())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 77,
      "vig42": 59,
      "pangjiahao": 1,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting U-Schedule as requested ...\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_CALENDAR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 1,
      "vig42": 6,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.ui.SwitchToSearchTabEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DatePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.FuzzySearchComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.FuzzySearchFilterPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.TagsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Finds and lists all events in the calendar of the scheduler whose title, venue"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": " * or description contain any of the argument keywords."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Optionally filters events based on date and tags"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class FindEventCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find event\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all events whose titles match any of \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + \"Optionally filters the search between the specified dates and times (using natural language parsing).\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + \"Also optionally filters the search by all the specified tags (case-insensitive).\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + \"Parameters: \" + COMMAND_WORD + \" [KEYWORD] [MORE_KEYWORDS]... [\" + PREFIX_FROM + \" DATE/TIME] [\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + PREFIX_TO + \" DATE/TIME] [\" + PREFIX_TAG + \" TAG] [\" + PREFIX_TAG + \" ANOTHER_TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \"project tutorial exam \" + PREFIX_FROM + \" monday \" + PREFIX_TAG + \" cs2103\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final FuzzySearchFilterPredicate titlePredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final FuzzySearchComparator fuzzySearchComparator;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final DatePredicate datePredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final TagsPredicate tagsPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public FindEventCommand(FuzzySearchFilterPredicate titlePredicate, FuzzySearchComparator fuzzySearchComparator,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "                            DatePredicate datePredicate, TagsPredicate tagsPredicate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.titlePredicate \u003d titlePredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.fuzzySearchComparator \u003d fuzzySearchComparator;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.datePredicate \u003d datePredicate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.tagsPredicate \u003d tagsPredicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        model.clearAllPredicatesAndComparators();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.updateFilteredCalendarEventList(titlePredicate, tagsPredicate, datePredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.sortFilteredCalendarEventList(fuzzySearchComparator);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        EventsCenter.getInstance().post(new SwitchToSearchTabEvent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            String.format(Messages.MESSAGE_CALENDAR_EVENTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "                model.getFilteredAndSortedCalendarEventList().size()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_CALENDAR);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            || (other instanceof FindEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 titlePredicate.equals(((FindEventCommand) other).titlePredicate) // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 fuzzySearchComparator.equals(((FindEventCommand) other).fuzzySearchComparator)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 datePredicate.equals(((FindEventCommand) other).datePredicate)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 tagsPredicate.equals(((FindEventCommand) other).tagsPredicate));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 4,
      "vig42": 47,
      "pangjiahao": 2,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_CALENDAR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 7,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_CALENDAR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 6,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.ui.SwitchToSearchTabEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Lists all events in the calendar of the scheduler to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class ListEventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all events\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        model.clearAllPredicatesAndComparators();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        EventsCenter.getInstance().post(new SwitchToSearchTabEvent());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_CALENDAR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "vig42": 14,
      "pangjiahao": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListToDoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.ui.SwitchToTasksTabEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Lists all events in the task list of the scheduler to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class ListToDoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list todo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ListToDoCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "        super.isToDoCommand \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_TODO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(modelToDo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        EventsCenter.getInstance().post(new SwitchToTasksTabEvent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Reverts the {@code model}\u0027s scheduler to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!model.canRedoScheduler()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.redoScheduler();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        model.clearAllPredicatesAndComparators();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_CALENDAR);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 9,
      "pangjiahao": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.ui.SwitchToSearchTabEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Selects a calendar event identified using its displayed index from the calendar event list in the scheduler."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class SelectEventCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select event\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "        + \": Selects the event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_SELECT_CALENDAR_EVENT_SUCCESS \u003d \"Selected Event: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public SelectEventCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cCalendarEvent\u003e filteredCalendarEventList \u003d model.getFilteredAndSortedCalendarEventList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredCalendarEventList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "        EventsCenter.getInstance().post(new SwitchToSearchTabEvent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_CALENDAR_EVENT_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_CALENDAR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            || (other instanceof SelectEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((SelectEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 6,
      "vig42": 15,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowDescriptionCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.ui.DescriptionDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Shows description of a todolist event identified using its displayed index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * from the calendar event list in the toDoList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ShowDescriptionCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show todo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + \": Shows description of the todo event identified by the index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String MESSAGE_SHOW_DESCRIPTION_TODO_SUCCESS \u003d \"Showed Event\u0027s Description: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ShowDescriptionCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        super.isToDoCommand \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * display a descriptionDisplay UI component {@code DescriptionDisplay}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @param root"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void display (Parent root) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Scene scene \u003d new Scene(root, 200, 150);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        stage.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        stage.showAndWait();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_TODO);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(modelToDo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        List\u003cToDoListEvent\u003e filteredToDoListEventList \u003d modelToDo.getFilteredToDoListEventList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredToDoListEventList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TODOLIST_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        DescriptionDisplay descriptionDisplay \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                    new DescriptionDisplay(filteredToDoListEventList.get(targetIndex.getZeroBased()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                            targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        display(descriptionDisplay.getRoot());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SHOW_DESCRIPTION_TODO_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                || (other instanceof ShowDescriptionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ShowDescriptionCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Reverts the {@code model}\u0027s scheduler to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!model.canUndoScheduler()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.undoScheduler();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        model.clearAllPredicatesAndComparators();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CommandResult execute(ModelToDo modelToDo, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        throw new CommandException(MESSAGE_INCORRECT_MODEL_CALENDAR);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 9,
      "pangjiahao": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTimeInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Venue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * and returns an AddEventCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "                PREFIX_START, PREFIX_END, PREFIX_VENUE, PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_START, PREFIX_END, PREFIX_VENUE, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime start \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime end \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!DateTimeInfo.isValidStartAndEnd(start, end)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            throw new ParseException(DateTimeInfo.MESSAGE_DATETIMEINFO_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Title name \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTimeInfo dateTimeInfo \u003d new DateTimeInfo(start, end);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Venue venue \u003d ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent calendarEvent \u003d new CalendarEvent(name, description, dateTimeInfo, venue, tagList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return new AddEventCommand(calendarEvent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 26,
      "vig42": 15,
      "pangjiahao": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddToDoCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.AddToDoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Parses input arguments and creates a new AddToDoCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class AddToDoCommandParser implements Parser\u003cAddToDoCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddToDoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * and returns an AddToDoCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public AddToDoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToDoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Title name \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent toDoListEvent \u003d new ToDoListEvent(name, description, priority);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return new AddToDoCommand(toDoListEvent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 8,
      "vig42": 1,
      "SleepySanjinLi": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                        prefixPosition + prefix.getPrefix().length());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // If fromIndex is 0, checks if prefix is found starting at index 0"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (fromIndex \u003d\u003d 0 \u0026\u0026 argsString.regionMatches(0, prefix, 0, prefix.length())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Check if there is a preamble:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // i.e. if there are either no prefixes or the first prefix does not start at position 0"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "        boolean hasPreamble \u003d prefixPositions.isEmpty() || (prefixPositions.get(0).getStartPosition() !\u003d 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // If there is a preamble, insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (hasPreamble) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "vig42": 13,
      "-": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final Prefix PREFIX_START \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final Prefix PREFIX_END \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final Prefix PREFIX_FROM \u003d new Prefix(\"from/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final Prefix PREFIX_TO \u003d new Prefix(\"to/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 4,
      "vig42": 4,
      "SleepySanjinLi": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Parses input arguments and creates a new DeleteEventCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * and returns an DeleteEventCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return new DeleteEventCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 9,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteToDoCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.DeleteToDoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Parses input arguments and creates a new DeleteToDoCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class DeleteToDoCommandParser implements Parser\u003cDeleteToDoCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteToDoCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * and returns an DeleteToDoCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public DeleteToDoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return new DeleteToDoCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteToDoCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 1,
      "SleepySanjinLi": 9,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand.EditCalendarEventDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Parses input arguments and creates a new EditEventCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditEventCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * and returns an EditEventCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public EditEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "                PREFIX_START, PREFIX_END, PREFIX_VENUE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        EditCalendarEventDescriptor editCalendarEventDescriptor \u003d new EditCalendarEventDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            editCalendarEventDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            editCalendarEventDescriptor.setDescription(ParserUtil"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "            editCalendarEventDescriptor.setStart(ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "            editCalendarEventDescriptor.setEnd(ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VENUE).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            editCalendarEventDescriptor.setVenue(ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                .get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCalendarEventDescriptor::setTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!editCalendarEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return new EditEventCommand(index, editCalendarEventDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 22,
      "vig42": 15,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.FindEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DatePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.FuzzySearchComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.FuzzySearchFilterPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.TagsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Parses input arguments and creates a new FindEventCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class FindEventCommandParser implements Parser\u003cFindEventCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindEventCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * and returns an FindEventCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public FindEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FROM, PREFIX_TO, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String trimmedKeywords \u003d argMultimap.getPreamble().trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Throws parse exception if no keywords are provided and there are no other prefixes"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (trimmedKeywords.isEmpty() \u0026\u0026 !argMultimap.getValue(PREFIX_TAG).isPresent()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_FROM).isPresent() \u0026\u0026 !argMultimap.getValue(PREFIX_TO).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Parse list of keywords (if any)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cString\u003e keywordList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (trimmedKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "            keywordList \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "            keywordList \u003d Arrays.stream(trimmedKeywords.split(\"\\\\s+\")).collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Parses date/time from and date/time to (if any)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime dateFrom \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FROM).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "            String dateFromString \u003d argMultimap.getValue(PREFIX_FROM).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "            dateFrom \u003d ParserUtil.parseDateTime(dateFromString);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime dateTo \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TO).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "            String dateToString \u003d argMultimap.getValue(PREFIX_TO).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "            dateTo \u003d ParserUtil.parseDateTime(dateToString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (dateTo !\u003d null \u0026\u0026 dateFrom !\u003d null \u0026\u0026 dateFrom.isAfter(dateTo)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                                    DatePredicate.MESSAGE_DATE_PREDICATE_CONSTRAINTS));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Parse set of tag strings (if any)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Set\u003cString\u003e tagSet \u003d argMultimap.getAllValues(PREFIX_TAG).stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                                                .map(String::trim)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                                                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (tagSet.stream().anyMatch(String::isEmpty)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, Tag.MESSAGE_TAG_CONSTRAINTS));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return new FindEventCommand(new FuzzySearchFilterPredicate(keywordList),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new FuzzySearchComparator(keywordList),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new DatePredicate(dateFrom, dateTo),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new TagsPredicate(tagSet));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 7,
      "vig42": 58,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Venue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.Priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int ROUND_MINUTES_TO \u003d 15;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (!Title.isValid(trimmedTitle)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Parses a {@code String description} into a {@code Phone}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (!Description.isValid(trimmedDescription)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!Priority.isValid(trimmedPriority)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Parses a {@code String dateTimeInput} into a {@code DateTime}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * If multiple dates are supplied, only the first will be parsed"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Rounds to the nearest 15 minutes"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DateTime parseDateTime(String dateAndTime) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(dateAndTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cDateGroup\u003e groups \u003d parser.parse(dateAndTime.trim());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // If 0 groups found, date is invalid"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (groups.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            // TODO: Change the message to something less specific"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            // TODO: Stronger condition to detect invalid date"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cDate\u003e dates \u003d groups.get(0).getDates();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            //List\u003cLocalDateTime\u003e datetimes \u003d dates.stream()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            // .map(date -\u003e dateToLocalDateTime(date)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime firstDate \u003d dateToLocalDateTime(dates.get(0));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime rounded \u003d firstDate.withMinute("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                roundToNearestMultiple(firstDate.getMinute(), ROUND_MINUTES_TO));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DateTime(rounded);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Rounds {@code number} to the nearest multiple of {@code multiple}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param number   the number to be rounded"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param multiple the multiple to round to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a rounded number"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static int roundToNearestMultiple(int number, int multiple) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        int epsilon \u003d (number % multiple) / ((multiple + 1) / 2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return (number / multiple + epsilon) * multiple;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a Date to a LocalDateTime"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date a Date Object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A LocalDateTime with TImezone set to system Timezone"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static LocalDateTime dateToLocalDateTime(Date date) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Parses a {@code String venue} into an {@code Venue}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @throws ParseException if the given {@code venue} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static Venue parseVenue(String venue) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String trimmedAddress \u003d venue.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (!Venue.isValid(trimmedAddress)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            throw new ParseException(Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return new Venue(trimmedAddress);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 27,
      "vig42": 7,
      "pangjiahao": 1,
      "SleepySanjinLi": 14,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SchedulerParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.AddToDoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.ClearCalendarCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.DeleteToDoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.FindEventCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.ListEventCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.logic.commands.ListToDoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.SelectEventCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.ShowDescriptionCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Both Scheduler and ToDoList Parser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class SchedulerParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e(\\\\w+\\\\s?(?!\\\\w/|[0-9])){1,2})\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        + \"(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        case EditEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return new EditEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "        case AddToDoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return new AddToDoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        case SelectEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return new SelectEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        case DeleteToDoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return new DeleteToDoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        case ClearCalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return new ClearCalendarCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        case FindEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return new FindEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        case ShowDescriptionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return new ShowDescriptionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        case ListEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return new ListEventCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "        case ListToDoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return new ListToDoCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 24,
      "vig42": 11,
      "SleepySanjinLi": 7,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.SelectEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Parses input arguments and creates a new SelectEventCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class SelectEventCommandParser implements Parser\u003cSelectEventCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectEventCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * and returns an SelectEventCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public SelectEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return new SelectEventCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 9,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowDescriptionCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.ShowDescriptionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Parses input arguments and creates a new ShowDescriptionCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ShowDescriptionCommandParser implements Parser\u003cShowDescriptionCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShowDescriptionCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * and returns an ShowDescriptionCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ShowDescriptionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return new ShowDescriptionCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new ParseException ("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                    String.format (MESSAGE_INVALID_COMMAND_FORMAT, ShowDescriptionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "    void resetData(ReadOnlyScheduler newData);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Returns the Scheduler"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "    ReadOnlyScheduler getScheduler();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns true if a calendar event with the same identity as {@code calendarevent} exists in the scheduler."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    boolean hasCalendarEvent(CalendarEvent calendarEvent);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Deletes the given calendar event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code target} must exist in the scheduler."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    void deleteCalendarEvent(CalendarEvent target);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Adds the given calendar event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code calendarEvent} must not already exist in the scheduler."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    void addCalendarEvent(CalendarEvent calendarEvent);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Replaces the given calendar event {@code target} with {@code editedCalendarEvent}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code target} must exist in the scheduler."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * The calendar event identity of {@code editedCalendarEvent} must not be the same as another existing calendar"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * event in the scheduler."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "    void updateCalendarEvent(CalendarEvent target, CalendarEvent editedCalendarEvent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns an unmodifiable view of the full calendar event list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "    ObservableList\u003cCalendarEvent\u003e getFullCalendarEventList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns an unmodifiable view of the filtered and sorted of calendar events"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "    ObservableList\u003cCalendarEvent\u003e getFilteredAndSortedCalendarEventList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Updates the filter of the filtered calendar event list to filter by all of the given {@code predicates}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Note: if multiple predicates are passed, it will filter by the logical AND of all the predicates"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "    void updateFilteredCalendarEventList(Predicate\u003cCalendarEvent\u003e... predicates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Sorts the filtered calendar event list by the given {@code comparator}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @throws NullPointerException if {@code comparator} is null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "    void sortFilteredCalendarEventList(Comparator\u003cCalendarEvent\u003e comparator);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Removes all predicates from the {@code FilteredList} and {@code SortedList} of calendar events."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    void clearAllPredicatesAndComparators();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns the predicate currently used to filter the {@code FilteredList} of calendar events."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "    Predicate\u003c? super CalendarEvent\u003e getPredicate();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns the comparator currently used to sort the {@code SortedList} of calendar events."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "    Comparator\u003c? super CalendarEvent\u003e getComparator();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns true if the model has previous scheduler states to restore."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "    boolean canUndoScheduler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns true if the model has undone scheduler states to restore."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "    boolean canRedoScheduler();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Restores the model\u0027s scheduler to its previous state."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "    void undoScheduler();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Restores the model\u0027s scheduler to its previously undone state."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "    void redoScheduler();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Saves the current scheduler state for undo/redo."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "    void commitScheduler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 9,
      "vig42": 50,
      "pangjiahao": 3,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.model.SchedulerChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Represents the in-memory model of the scheduler data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final VersionedScheduler versionedScheduler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private FilteredList\u003cCalendarEvent\u003e filteredCalendarEvents;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private SortedList\u003cCalendarEvent\u003e sortedFilteredCalendarEvents;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Initializes a ModelManager with the given scheduler and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ModelManager(ReadOnlyScheduler scheduler, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireAllNonNull(scheduler, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        logger.fine(\"Initializing with scheduler: \" + scheduler + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        versionedScheduler \u003d new VersionedScheduler(scheduler);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "        filteredCalendarEvents \u003d new FilteredList\u003c\u003e(versionedScheduler.getCalendarEventList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "        sortedFilteredCalendarEvents \u003d new SortedList\u003c\u003e(filteredCalendarEvents);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Initializes a ModelManager with the given scheduler, userPrefs,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * as well as filtering and sorting the list with the given predicate and comparator"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ModelManager(ReadOnlyScheduler scheduler, UserPrefs userPrefs,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        Predicate\u003c? super CalendarEvent\u003e predicate, Comparator\u003c? super CalendarEvent\u003e comparator) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this(scheduler, userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "        filteredCalendarEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "        sortedFilteredCalendarEvents.setComparator(comparator);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this(new Scheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void resetData(ReadOnlyScheduler newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "        versionedScheduler.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ReadOnlyScheduler getScheduler() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return versionedScheduler;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void indicateSchedulerChanged() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "        raise(new SchedulerChangedEvent(versionedScheduler));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean hasCalendarEvent(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(calendarEvent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return versionedScheduler.hasCalendarEvent(calendarEvent);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void deleteCalendarEvent(CalendarEvent target) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "        versionedScheduler.removeCalendarEvent(target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void addCalendarEvent(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "        versionedScheduler.addCalendarEvent(calendarEvent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void updateCalendarEvent(CalendarEvent target, CalendarEvent editedCalendarEvent) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireAllNonNull(target, editedCalendarEvent);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "        versionedScheduler.updateCalendarEvent(target, editedCalendarEvent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered and Sorted List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code CalendarEvent} backed by the internal list of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code versionedScheduler}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ObservableList\u003cCalendarEvent\u003e getFullCalendarEventList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return FXCollections.unmodifiableObservableList(versionedScheduler.getCalendarEventList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns an unmodifiable view of the Filtered and {@code SortedList} of {@code CalendarEvent} backed by"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * the internal list of {@code versionedScheduler}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ObservableList\u003cCalendarEvent\u003e getFilteredAndSortedCalendarEventList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return FXCollections.unmodifiableObservableList(sortedFilteredCalendarEvents);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void updateFilteredCalendarEventList(Predicate\u003cCalendarEvent\u003e... predicates) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(predicates);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Predicate\u003cCalendarEvent\u003e combinedPredicate \u003d Arrays.stream(predicates).reduce(Predicate::and).orElse(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": "        filteredCalendarEvents.setPredicate(combinedPredicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void sortFilteredCalendarEventList(Comparator\u003cCalendarEvent\u003e comparator) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": "        sortedFilteredCalendarEvents.setComparator(comparator);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void clearAllPredicatesAndComparators() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vig42"
        },
        "content": "        filteredCalendarEvents.setPredicate(null);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "        sortedFilteredCalendarEvents.setComparator(null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Predicate\u003c? super CalendarEvent\u003e getPredicate() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return filteredCalendarEvents.getPredicate();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Comparator\u003c? super CalendarEvent\u003e getComparator() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return sortedFilteredCalendarEvents.getComparator();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean canUndoScheduler() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return versionedScheduler.canUndo();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean canRedoScheduler() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return versionedScheduler.canRedo();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void undoScheduler() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vig42"
        },
        "content": "        versionedScheduler.undo();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "vig42"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void redoScheduler() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "vig42"
        },
        "content": "        versionedScheduler.redo();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "vig42"
        },
        "content": "        indicateSchedulerChanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void commitScheduler() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vig42"
        },
        "content": "        versionedScheduler.commit();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return versionedScheduler.equals(other.versionedScheduler)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "vig42"
        },
        "content": "                \u0026\u0026 filteredCalendarEvents.equals(other.filteredCalendarEvents)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "vig42"
        },
        "content": "                \u0026\u0026 sortedFilteredCalendarEvents.equals(other.sortedFilteredCalendarEvents);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "vig42": 89,
      "pangjiahao": 7,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManagerToDo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.events.model.ToDoListChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Represents the in-memory model of the todolist data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ModelManagerToDo extends ComponentManager implements ModelToDo {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final VersionedToDoList versionedToDoList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final FilteredList\u003cToDoListEvent\u003e filteredToDoListEvents;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Initializes a ModelManagerToDo with the given todolist and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * todo: remove the userPrefs from this class (since it is completely unused)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ModelManagerToDo(ReadOnlyToDoList toDoList, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireAllNonNull(toDoList, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        logger.fine(\"Initializing with scheduler: \" + toDoList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        versionedToDoList \u003d new VersionedToDoList(toDoList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        filteredToDoListEvents \u003d new FilteredList\u003c\u003e(versionedToDoList.getToDoList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ModelManagerToDo() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this(new ToDoList(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void resetData(ReadOnlyToDoList newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        versionedToDoList.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        indicateToDoListChanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ReadOnlyToDoList getToDoList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return versionedToDoList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Raises an event to indicate the modelToDo has changed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void indicateToDoListChanged() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        raise(new ToDoListChangedEvent(versionedToDoList));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean hasToDoListEvent(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(toDoListEvent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return versionedToDoList.hasToDoListEvent(toDoListEvent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void deleteToDoListEvent(ToDoListEvent target) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        versionedToDoList.removeToDoListEvent(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        indicateToDoListChanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void addToDoListEvent(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        versionedToDoList.addToDoListEvent(toDoListEvent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        updateFilteredToDoListEventList(PREDICATE_SHOW_ALL_TODOLIST_EVENTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        indicateToDoListChanged();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void updateToDoListEvent(ToDoListEvent target, ToDoListEvent editedToDoListEvent) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireAllNonNull(target, editedToDoListEvent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        versionedToDoList.updateToDoListEvent(target, editedToDoListEvent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        indicateToDoListChanged();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered CalendarEvent List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code CalendarEvent} backed by the internal list of"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code versionedScheduler}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ObservableList\u003cToDoListEvent\u003e getFilteredToDoListEventList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredToDoListEvents);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void updateFilteredToDoListEventList(Predicate\u003cToDoListEvent\u003e predicate) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        filteredToDoListEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void commitToDoList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        versionedToDoList.commit();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!(obj instanceof ModelManagerToDo)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelManagerToDo other \u003d (ModelManagerToDo) obj;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return versionedToDoList.equals(other.versionedToDoList)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 filteredToDoListEvents.equals(other.filteredToDoListEvents);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 1,
      "SleepySanjinLi": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelToDo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * The API of the Model component of todolist."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public interface ModelToDo {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    Predicate\u003cToDoListEvent\u003e PREDICATE_SHOW_ALL_TODOLIST_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    void resetData(ReadOnlyToDoList newData);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns the ToDoList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    ReadOnlyToDoList getToDoList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns true if a todolist event with the same identity as {@code todolistevent} exists in the todolist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    boolean hasToDoListEvent(ToDoListEvent toDoListEvent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Deletes the given todolist event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * The todolist event must exist in the todolist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    void deleteToDoListEvent(ToDoListEvent target);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Adds the given todolist event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code todolistevent} must not already exist in the todolist."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    void addToDoListEvent(ToDoListEvent toDoListEvent);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Replaces the given todolist event {@code target} with {@code editedToDoListEvent}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code target} must exist in the todolist."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * The todolist event identity of {@code editedToDoListEvent} must not be the same as another existing todolist"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * event in the scheduler."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    void updateToDoListEvent(ToDoListEvent target, ToDoListEvent editedToDoListEvent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns an unmodifiable view of the filtered todolist event list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    ObservableList\u003cToDoListEvent\u003e getFilteredToDoListEventList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Updates the filter of the filtered todolist event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    void updateFilteredToDoListEventList(Predicate\u003cToDoListEvent\u003e predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Saves the current toDoList state."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    void commitToDoList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyScheduler.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Unmodifiable view of an scheduler"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "public interface ReadOnlyScheduler {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns an unmodifiable view of the calendar event list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * This list will not contain any duplicate calendar events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "    ObservableList\u003cCalendarEvent\u003e getCalendarEventList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyToDoList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Unmodifiable view of a ToDoList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public interface ReadOnlyToDoList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns an unmodifiable view of the ToDoList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * This list will not contain any duplicate ToDoList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    ObservableList\u003cToDoListEvent\u003e getToDoList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Scheduler.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.UniqueCalendarEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Wraps all data at the scheduler level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Duplicates are not allowed (by .isSameCalendarEvent comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class Scheduler implements ReadOnlyScheduler {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    // TODO rename Scheduler to Calendar"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final UniqueCalendarEventList calendarEvents;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "        calendarEvents \u003d new UniqueCalendarEventList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public Scheduler() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Creates an Scheduler using the Calendar Events in the {@code toBeCopied}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Scheduler(ReadOnlyScheduler toBeCopied) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Replaces the contents of the calendar event list with {@code calendarEvents}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code calendarEvents} must not contain duplicate calendarEvents."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setCalendarEvents(List\u003cCalendarEvent\u003e calendarEvents) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.calendarEvents.setCalendarEvents(calendarEvents);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Resets the existing data of this {@code Scheduler} with {@code newData}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void resetData(ReadOnlyScheduler newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        setCalendarEvents(newData.getCalendarEventList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "    //// calendarevent-level operations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns true if a calendar event with the same identity as {@code calendarevent} exists in the scheduler"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean hasCalendarEvent(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(calendarEvent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return calendarEvents.contains(calendarEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Adds a calendar event to the scheduler"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * The calendar event must not already exist in the scheduler"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void addCalendarEvent(CalendarEvent p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "        calendarEvents.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Replaces the given calendar event {@code target} in the list with {@code editedCalendarEvent}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code target} must exist in the scheduler."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * The calendar event identity of {@code editedCalendarEvent} must not be the same as another existing calendar"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * event in the scheduler"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void updateCalendarEvent(CalendarEvent target, CalendarEvent editedCalendarEvent) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(editedCalendarEvent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "        calendarEvents.setCalendarEvent(target, editedCalendarEvent);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Removes {@code key} from this {@code Scheduler}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code key} must exist in the scheduler"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void removeCalendarEvent(CalendarEvent key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "        calendarEvents.remove(key);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return calendarEvents.asUnmodifiableObservableList().size() + \" events\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ObservableList\u003cCalendarEvent\u003e getCalendarEventList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return calendarEvents.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "            || (other instanceof Scheduler // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 calendarEvents.equals(((Scheduler) other).calendarEvents));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return calendarEvents.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 10,
      "vig42": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ToDoList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.UniqueToDoEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Wraps all data at the toDoList level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Duplicates are not allowed (by .isSameCalendarEvent comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ToDoList implements ReadOnlyToDoList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final UniqueToDoEventList toDoListEvents;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListEvents \u003d new UniqueToDoEventList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Creates an ToDoList using the ToDoList Events in the {@code toBeCopied}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoList(ReadOnlyToDoList toBeCopied) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Replaces the contents of the todolist event list with {@code toDoListEvents}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code calendarEvents} must not contain duplicate calendarEvents."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setToDoListEvents(List\u003cToDoListEvent\u003e toDoListEvents) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.toDoListEvents.setToDoListEvents(toDoListEvents);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Resets the existing data of this {@code ToDoList} with {@code newData}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void resetData(ReadOnlyToDoList newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        setToDoListEvents(newData.getToDoList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    //// todolistevent-level operations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns true if a todolist event with the same identity as {@code toDoListEvent} exists in the ToDoList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean hasToDoListEvent(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(toDoListEvent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return toDoListEvents.contains(toDoListEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Adds a todolist event to the todolist"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * The todolist event must not already exist in the todolist"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void addToDoListEvent(ToDoListEvent p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListEvents.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Replaces the given todolist event {@code target} in the list with {@code editedToDoListEvent}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code target} must exist in the todolist."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * The todolist event identity of {@code editedToDoListEvent} must not be the same as another existing"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * todolist event in the todolist"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void updateToDoListEvent(ToDoListEvent target, ToDoListEvent editedToDoListEvent) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(editedToDoListEvent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListEvents.setToDoListEvent(target, editedToDoListEvent);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Removes {@code key} from this {@code ToDoList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code key} must exist in the todolist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void removeToDoListEvent(ToDoListEvent key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListEvents.remove(key);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return toDoListEvents.asUnmodifiableObservableList().size() + \" events\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ObservableList\u003cToDoListEvent\u003e getToDoList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return toDoListEvents.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            || (other instanceof ToDoList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 toDoListEvents.equals(((ToDoList) other).toDoListEvents));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return toDoListEvents.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private Path schedulerFilePath \u003d Paths.get(\"data\", \"scheduler.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Path toDoListFilePath \u003d Paths.get(\"data\", \"toDoList.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        setGuiSettings(1200, 675, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Path getSchedulerFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return schedulerFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setSchedulerFilePath(Path schedulerFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.schedulerFilePath \u003d schedulerFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public Path getToDoListFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return toDoListFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setToDoListFilePath(Path toDoListFilePath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.toDoListFilePath \u003d toDoListFilePath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 Objects.equals(schedulerFilePath, o.schedulerFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return Objects.hash(guiSettings, schedulerFilePath, toDoListFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        sb.append(\"\\nLocal scheduler data file location : \" + schedulerFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        sb.append(\"\\nLocal todolist data file locattion: \" + toDoListFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 1,
      "vig42": 6,
      "SleepySanjinLi": 10,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedScheduler.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": " * {@code Scheduler} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class VersionedScheduler extends Scheduler {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final List\u003cReadOnlyScheduler\u003e schedulerStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public VersionedScheduler(ReadOnlyScheduler initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "        schedulerStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "        schedulerStateList.add(new Scheduler(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Saves a copy of the current {@code Scheduler} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        schedulerStateList.add(new Scheduler(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        schedulerStateList.subList(currentStatePointer + 1, schedulerStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Restores the scheduler to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        resetData(schedulerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Restores the scheduler to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        resetData(schedulerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns true if {@code undo()} has scheduler states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns true if {@code redo()} has scheduler states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return currentStatePointer \u003c schedulerStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!(other instanceof VersionedScheduler)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler otherVersionedScheduler \u003d (VersionedScheduler) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return super.equals(otherVersionedScheduler)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 schedulerStateList.equals(otherVersionedScheduler.schedulerStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedScheduler.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "            super(\"Current state pointer at start of schedulerState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "            super(\"Current state pointer at end of schedulerState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedToDoList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * {@code ToDoList} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class VersionedToDoList extends ToDoList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final List\u003cReadOnlyToDoList\u003e toDoListStateList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public VersionedToDoList(ReadOnlyToDoList initialState) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListStateList.add(new ToDoList(initialState));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Saves a copy of the current {@code Scheduler} state at the end of the state list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListStateList.add(new ToDoList(this));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListStateList.subList(currentStatePointer + 1, toDoListStateList.size()).clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!(other instanceof VersionedToDoList)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        VersionedToDoList otherVersionedToDoList \u003d (VersionedToDoList) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return super.equals(otherVersionedToDoList)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 toDoListStateList.equals(otherVersionedToDoList.toDoListStateList)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedToDoList.currentStatePointer;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/CalendarEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import jfxtras.scene.control.agenda.Agenda;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Represents a Calendar Event in the scheduler."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "public class CalendarEvent extends Agenda.AppointmentImplLocal {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final Venue venue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final DateTimeInfo dateTimeInfo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private Agenda.AppointmentGroupImpl appointmentGroup;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CalendarEvent(Title title, Description description, DateTimeInfo dateTimeInfo, Venue venue, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        requireAllNonNull(title, description, venue, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.dateTimeInfo \u003d dateTimeInfo;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        this.appointmentGroup \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public Boolean isWholeDay() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return title.value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return description.value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return this.venue.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public Agenda.AppointmentGroup getAppointmentGroup() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return this.appointmentGroup;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void setAppointmentGroup(Agenda.AppointmentGroup s) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        this.appointmentGroup \u003d (Agenda.AppointmentGroupImpl) s;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public LocalDateTime getStartLocalDateTime() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return this.dateTimeInfo.start.localDateTime;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public LocalDateTime getEndLocalDateTime() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return this.dateTimeInfo.end.localDateTime;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public Description getDescriptionObject() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public DateTime getStart() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return dateTimeInfo.start;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public DateTime getEnd() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return dateTimeInfo.end;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public Venue getVenue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns an immutable set of tags as Strings, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Set\u003cString\u003e getTagStrings() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "        HashSet\u003cString\u003e tagStrings \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vig42"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": "            tagStrings.add(tag.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return Collections.unmodifiableSet(tagStrings);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns true if both calendar events of the same title also have the same start and end times."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * This defines a weaker notion of equality between two calendar events."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean isSameCalendarEvent(CalendarEvent otherCalendarEvent) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (otherCalendarEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return otherCalendarEvent !\u003d null"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u0026\u0026 otherCalendarEvent.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 otherCalendarEvent.getStart().equals(getStart())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 otherCalendarEvent.getEnd().equals(getEnd());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns true if both calendar events have the same identity and data fields."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * This defines a stronger notion of equality between two calendar events."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!(other instanceof CalendarEvent)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent otherCalendarEvent \u003d (CalendarEvent) other;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return otherCalendarEvent.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            \u0026\u0026 otherCalendarEvent.getDescriptionObject().equals(getDescriptionObject())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 otherCalendarEvent.getStart().equals(getStart())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 otherCalendarEvent.getEnd().equals(getEnd())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u0026\u0026 otherCalendarEvent.getVenue().equals(getVenue())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 otherCalendarEvent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return Objects.hash(title, description, venue, tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        builder.append(\" Title: \")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            .append(getTitle())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            .append(\" Description: \")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            .append(getDescriptionObject())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .append(\" Start Date \u0026 Time: \")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .append(getStart())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .append(\" End Date \u0026 Time: \")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .append(getEnd())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            .append(\" Venue: \")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            .append(getVenue())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Tags: \");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 21,
      "vig42": 43,
      "pangjiahao": 49,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/DatePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Tests that at least some portion of the {@code CalendarEvent} falls after the {@code dateFrom} (if any)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": " * and before the {@code dateTo} (if any)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class DatePredicate implements Predicate\u003cCalendarEvent\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_DATE_PREDICATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \"\u0027From\u0027 date \u0026 time must be chronologically earlier than \u0027To\u0027 date \u0026 time\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final DateTime dateFrom;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final DateTime dateTo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public DatePredicate(DateTime dateFrom, DateTime dateTo) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.dateFrom \u003d dateFrom;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.dateTo \u003d dateTo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean test(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return (!hasDateTo() \u0026\u0026 !hasDateFrom()) // If both dates are null, always accepts"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "                || (hasDateTo() \u0026\u0026 hasDateFrom() // If both dates are present, then only accept if start date is not"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "                    \u0026\u0026 !calendarEvent.getStart().isAfter(dateTo) // after \u0027from\u0027 and end date is not before \u0027to\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "                    \u0026\u0026 !calendarEvent.getEnd().isBefore(dateFrom))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "                || (!hasDateFrom() \u0026\u0026 !calendarEvent.getStart().isAfter(dateTo)) // If only 1 date is present, apply"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "                || (!hasDateTo() \u0026\u0026 !calendarEvent.getEnd().isBefore(dateFrom)); // 1-sided variant of above"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns whether {@code DatePredicate} has an {@code dateFrom}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean hasDateFrom() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return dateFrom !\u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns whether {@code DatePredicate} has an {@code dateTo}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean hasDateTo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return dateTo !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "                || (other instanceof DatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "                \u0026\u0026 ((!hasDateFrom() \u0026\u0026 !hasDateTo())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "                    || (hasDateFrom() \u0026\u0026 hasDateTo() \u0026\u0026 dateFrom.equals(((DatePredicate) other).dateFrom)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        \u0026\u0026 dateTo.equals(((DatePredicate) other).dateTo))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "                    || (!hasDateTo() \u0026\u0026 dateFrom.equals(((DatePredicate) other).dateFrom))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "                    || (!hasDateFrom() \u0026\u0026 dateTo.equals(((DatePredicate) other).dateTo)))); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/DateTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Wrapper class for LocalDateTime."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(int, int, int, int, int)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class DateTime implements Comparable\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String MESSAGE_DATETIME_INPUT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \"Format for date and time input should be YYYY-MM-DD HH:MM\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String DATETIME_INPUT_VALIDATION_REGEX \u003d \"(\\\\d{4})-(\\\\d{1,2})-(\\\\d{1,2}) (\\\\d{2}):(\\\\d{2})\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_DATETIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \"Ensure that the input year, month, day, hour and minute correspond to a valid date and time\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code DateTime} from LocalDateTime object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateTimeInput a LocalDateTime object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public DateTime(LocalDateTime dateTimeInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.localDateTime \u003d dateTimeInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Constructs a {@code DateTime} from input year, month, day, hour and minute"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Wrapper class for LocalDateTime"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param year   A valid int year"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param month  A valid int month"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param day    A valid int day"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param hour   A valid int hour"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param minute A valid int minute"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public DateTime(int year, int month, int day, int hour, int minute) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!DateTime.isValidDateTime(year, month, day, hour, minute)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new DateTimeException(DateTime.MESSAGE_DATETIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.localDateTime \u003d LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Constructs a {@code DateTime} from date time input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Wrapper class for LocalDateTime"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param dateTimeInput valid date time input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public DateTime(String dateTimeInput) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String[] dateTimeInputNumbers \u003d dateTimeInput.split(\"[- :]\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        int year \u003d Integer.parseInt(dateTimeInputNumbers[0]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        int month \u003d Integer.parseInt(dateTimeInputNumbers[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "        int day \u003d Integer.parseInt(dateTimeInputNumbers[2]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        int hour \u003d Integer.parseInt(dateTimeInputNumbers[3]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "        int minute \u003d Integer.parseInt(dateTimeInputNumbers[4]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!DateTime.isValidDateTime(year, month, day, hour, minute)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new DateTimeException(DateTime.MESSAGE_DATETIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.localDateTime \u003d LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns true if a given string is a valid date time input string."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static boolean isValidDateTimeInput(String test) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return test.matches(DATETIME_INPUT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns if a given year, month, day, hour and minute correspond to a valid datetime."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static boolean isValidDateTime(int year, int month, int day, int hour, int minute) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (year \u003c\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "            LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "        } catch (DateTimeException E) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Converts date to the input format."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public String toInputFormat() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return localDateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean isBefore(DateTime other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return this.localDateTime.isBefore(other.localDateTime);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean isAfter(DateTime other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return this.localDateTime.isAfter(other.localDateTime);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return localDateTime.format(DateTimeFormatter.ofPattern(\"E, dd MMM yyyy hh:mm a\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public int compareTo(DateTime other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // assert (other !\u003d null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return localDateTime.compareTo((other).localDateTime);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 localDateTime.isEqual(((DateTime) other).localDateTime)); // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return localDateTime.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 38,
      "vig42": 60,
      "pangjiahao": 10,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/DateTimeInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Represents a Calendar Event\u0027s start and end date/time in the scheduler."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStartAndEnd(DateTime, DateTime)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class DateTimeInfo {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String MESSAGE_DATETIMEINFO_CONSTRAINTS \u003d \"Start date \u0026 time must be before end date \u0026 time\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public final DateTime start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public final DateTime end;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code DateTime} from input start and end DateTimes"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param start, end A valid start and end datetime"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public DateTimeInfo(DateTime start, DateTime end) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns if a given start and end datetime are valid"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static boolean isValidStartAndEnd(DateTime start, DateTime end) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return !start.isAfter(end);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "            || (other instanceof DateTimeInfo // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 start.equals(((DateTimeInfo) other).start)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 end.equals(((DateTimeInfo) other).end)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 34,
      "pangjiahao": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Represents a Calendar Event\u0027s description in the scheduler."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class Description extends TextField {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String MESSAGE_FIELD_NAME \u003d \"Description\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/FuzzySearchComparator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Tests that a {@code CalendarEvent}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class FuzzySearchComparator implements Comparator\u003cCalendarEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public FuzzySearchComparator(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assert keywords !\u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public int compare(CalendarEvent calendarEvent1, CalendarEvent calendarEvent2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!hasKeywords()) { // If no keywords are present, then it does not sort"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "        int compareScore \u003d Integer.compare(maxFuzzyMatchScore(calendarEvent2), maxFuzzyMatchScore(calendarEvent1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (compareScore \u003d\u003d 0) { // If scores are equal, sort in chronological order"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return calendarEvent1.getStart().compareTo(calendarEvent2.getStart());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return compareScore;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns the max fuzzy match score out of all the {@code keywords} with the title of the {@code CalendarEvent}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public int maxFuzzyMatchScore(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            .mapToInt(keyword -\u003e Math.max(Math.max("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                    StringUtil.fuzzyMatchScore(calendarEvent.getTitle().value, keyword),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "                    StringUtil.fuzzyMatchScore(calendarEvent.getDescription(), keyword)),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "                    StringUtil.fuzzyMatchScore(calendarEvent.getVenue().value, keyword)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .max()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .orElse(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns whether  {@code FuzzySearchComparator} has any {@code keywords}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean hasKeywords() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return !keywords.isEmpty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "            || (other instanceof FuzzySearchComparator // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 keywords.equals(((FuzzySearchComparator) other).keywords)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 57,
      "pangjiahao": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/FuzzySearchFilterPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Tests that a {@code CalendarEvent}\u0027s {@code Title}, {@code Venue} and {@code Description} match any of the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": " * keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class FuzzySearchFilterPredicate implements Predicate\u003cCalendarEvent\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final int tolerance \u003d 70;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public FuzzySearchFilterPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assert keywords !\u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean test(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return !hasKeywords() // If no keywords are present, then always accepts"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "                || keywords.stream() // Accept if event title, venue or description match any of the keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordFuzzy(calendarEvent.getTitle().value, keyword, tolerance)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                || StringUtil.containsWordFuzzy(calendarEvent.getDescription(), keyword, tolerance)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                || StringUtil.containsWordFuzzy(calendarEvent.getVenue().value, keyword, tolerance));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns whether  {@code FuzzySearchFilterPredicate} has any {@code keywords}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean hasKeywords() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return !keywords.isEmpty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "            || (other instanceof FuzzySearchFilterPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 keywords.equals(((FuzzySearchFilterPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/TagsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Tests that a {@code CalendarEvent}\u0027s {@code Tags} match all of the tags given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class TagsPredicate implements Predicate\u003cCalendarEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final Set\u003cString\u003e tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public TagsPredicate(Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean test(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Always accepts if tag list is empty, otherwise accepts only if all tags have a (case-insensitive) full match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return !hasTags()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "                || tags.stream().allMatch(tag -\u003e StringUtil.containsIgnoreCase(calendarEvent.getTagStrings(), tag));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "            || (other instanceof TagsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 tags.equals(((TagsPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns whether {@code TagsPredicate} has any {@code tags}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean hasTags() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return !tags.isEmpty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/TextField.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Represents a parent class for text fields in a Calendar Event in the scheduler."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class TextField {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String MESSAGE_FIELD_NAME \u003d \"Text field\"; // default field name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d MESSAGE_FIELD_NAME"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + \" should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * The first character of the text field must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"\\\\S.+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Constructs a {@code TextField}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @param textField A valid textField."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public TextField(String textField) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        requireNonNull(textField);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        checkArgument(isValid(textField), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        value \u003d textField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Returns true if a given string is a valid textField."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static boolean isValid(String textField) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return textField.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            || (other instanceof TextField // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u0026\u0026 value.equals(((TextField) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 59,
      "vig42": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/Title.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Represents a Calendar Event\u0027s title in the scheduler."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class Title extends TextField {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String MESSAGE_FIELD_NAME \u003d \"Title\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        super(title);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/UniqueCalendarEventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.exceptions.CalendarEventNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.exceptions.DuplicateCalendarEventException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * A list of {@code CalendarEvent}s that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * A {@code CalendarEvent}s is considered unique by comparing using"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * {@code CalendarEvent#isSameCalendarEvent(CalendarEvent)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * As such, adding and updating of {@code CalendarEvent}s uses CalendarEvent#isSameCalendarEvent(CalendarEvent) for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * equality so as to ensure that the calendar event being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * UniqueCalendarEventList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * However, the removal of a calendar event uses CalendarEvent#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": " * as to ensure that the calendar event with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": " * @see CalendarEvent#isSameCalendarEvent(CalendarEvent)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class UniqueCalendarEventList implements Iterable\u003cCalendarEvent\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final ObservableList\u003cCalendarEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns true if the list contains an equivalent calendar event as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean contains(CalendarEvent toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCalendarEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Adds a calendar event to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * The calendar event must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void add(CalendarEvent toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new DuplicateCalendarEventException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Replaces the calendar event {@code target} in the list with {@code editedCalendarEvent}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * The calendar event identity of {@code editedCalendarEvent} must not be the same as another existing calendar"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * event in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setCalendarEvent(CalendarEvent target, CalendarEvent editedCalendarEvent) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireAllNonNull(target, editedCalendarEvent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new CalendarEventNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!target.isSameCalendarEvent(editedCalendarEvent) \u0026\u0026 contains(editedCalendarEvent)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new DuplicateCalendarEventException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "        internalList.set(index, editedCalendarEvent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Removes the equivalent calendar event from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * The calendar event must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void remove(CalendarEvent toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new CalendarEventNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setCalendarEvents(UniqueCalendarEventList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Replaces the contents of this list with {@code calendarEvents}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code calendarEvents} must not contain duplicate calendar events."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setCalendarEvents(List\u003cCalendarEvent\u003e calendarEvents) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireAllNonNull(calendarEvents);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!calendarEventsAreUnique(calendarEvents)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new DuplicateCalendarEventException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "        internalList.setAll(calendarEvents);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ObservableList\u003cCalendarEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Iterator\u003cCalendarEvent\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "            || (other instanceof UniqueCalendarEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueCalendarEventList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns true if {@code calendarEvents} contains only unique calendar events."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private boolean calendarEventsAreUnique(List\u003cCalendarEvent\u003e calendarEvents) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vig42"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarEvents.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": "            for (int j \u003d i + 1; j \u003c calendarEvents.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vig42"
        },
        "content": "                if (calendarEvents.get(i).isSameCalendarEvent(calendarEvents.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vig42"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vig42"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 5,
      "vig42": 128,
      "pangjiahao": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/Venue.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Represents a Calendar Event\u0027s location in the scheduler."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class Venue extends TextField {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String MESSAGE_FIELD_NAME \u003d \"Venue\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Constructs a {@code Venue}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public Venue(String location) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        super(location);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/exceptions/CalendarEventNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Signals that the operation is unable to find the specified calendar event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class CalendarEventNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "vig42": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendarevent/exceptions/DuplicateCalendarEventException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Signals that the operation will result in duplicate Calendar Events (Calendar Events are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class DuplicateCalendarEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public DuplicateCalendarEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "vig42": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Represents a Tag in the scheduler."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tag names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 2,
      "pangjiahao": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/todolist/Priority.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model.todolist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Represents the priority of a todoList event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Setting Rule: user can set H for High; M for Medium; L for Low"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"1\"; // default field name"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \"The valid user input for priority is p/[priority].\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + \"While [priority] is H/M/L,\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + \"and H for high priority, M for medium priority, L for low priority\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * There should be only one integer, and the integer should be 1, 2 or 3."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String VALIDATION_REGEX_HIGH \u003d \"H\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String VALIDATION_REGEX_MEDIUM \u003d \"M\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String VALIDATION_REGEX_LOW \u003d \"L\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Constructs a {@code Priority}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @param priority A valid priority."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        checkArgument(isValid(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        value \u003d priority;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns true if a given string is a valid priority."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static boolean isValid(String priority) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return (priority.matches(VALIDATION_REGEX_HIGH)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            || priority.matches(VALIDATION_REGEX_MEDIUM)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            || priority.matches(VALIDATION_REGEX_LOW));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 value.equals(((Priority) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/todolist/TitleToDoContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model.todolist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Tests that a {@code ToDoListEvent}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class TitleToDoContainsKeywordsPredicate implements Predicate\u003cToDoListEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final int tolerance \u003d 70;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public TitleToDoContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean test(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordFuzzy(toDoListEvent.getTitle().value, keyword, tolerance));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            || (other instanceof TitleToDoContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 keywords.equals(((TitleToDoContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/todolist/ToDoListEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model.todolist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Represents an event in todoList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ToDoListEvent {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListEvent(Title title, Description description, Priority priority) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns true if both todoList events of the same title have one other identity field that is the same."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * This defines a weaker notion of equality between two calendar events."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean isSameToDoListEvent(ToDoListEvent otherToDoListEvent) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (otherToDoListEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return otherToDoListEvent !\u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 otherToDoListEvent.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 otherToDoListEvent.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns true if both todoList events have the same identity fields and data fields."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * This defines a stronger notion of equality between two todoList events."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!(other instanceof ToDoListEvent)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent otherToDoListEvent \u003d (ToDoListEvent) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return otherToDoListEvent.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 otherToDoListEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 otherToDoListEvent.getPriority().equals(getPriority());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return Objects.hash(title, description, priority);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        builder.append(\" Title: \")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .append(getTitle())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .append(\" Description: \")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .append(getDescription())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .append(\" Priority: \")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .append(getPriority());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/todolist/UniqueToDoEventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model.todolist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.exceptions.DuplicateToDoListEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.exceptions.ToDoListEventNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * A list of todoEvents that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * A todoListEvent is considered unique by comparing using {@code ToDoListEvent#isSameToDoListEvent(ToDoListEvent)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * As such, adding and updating of todoListEvents uses ToDoListEvent#isSameToDoListEvent(ToDoListEvent)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * for equality so as to ensure that the todolist event being added or updated is unique"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * in terms of identity in the UniqueToDoEventList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * However, the removal of a todolist event uses ToDoListEvent#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * as to ensure that the todolist event with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * @see ToDoListEvent#isSameToDoListEvent(ToDoListEvent)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class UniqueToDoEventList implements Iterable\u003cToDoListEvent\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final ObservableList\u003cToDoListEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns true if the list contains an equivalent todolist event as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean contains(ToDoListEvent toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameToDoListEvent);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Adds a todolist event to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * The todolist event must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void add(ToDoListEvent toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new DuplicateToDoListEventException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Replaces the todolist event {@code target} in the list with {@code editedToDoListEvent}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * The todolist event identity of {@code editedToDoListEvent} must not be the same as another existing"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * todolist event in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setToDoListEvent(ToDoListEvent target, ToDoListEvent editedToDoListEvent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireAllNonNull(target, editedToDoListEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new ToDoListEventNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!target.isSameToDoListEvent(editedToDoListEvent) \u0026\u0026 contains(editedToDoListEvent)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new DuplicateToDoListEventException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        internalList.set(index, editedToDoListEvent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Removes the equivalent todolist event from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * The todolist event must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void remove(ToDoListEvent toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new ToDoListEventNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setToDoListEvents(UniqueToDoEventList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Replaces the contents of this list with {@code toDoListEvents}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code toDoListEvents} must not contain duplicate todolist events."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setToDoListEvents(List\u003cToDoListEvent\u003e toDoListEvents) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireAllNonNull(toDoListEvents);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!toDoListEventsAreUnique(toDoListEvents)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new DuplicateToDoListEventException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        internalList.setAll(toDoListEvents);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ObservableList\u003cToDoListEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public Iterator\u003cToDoListEvent\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            || (other instanceof UniqueToDoEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueToDoEventList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns true if {@code calendarEvents} contains only unique todolist events."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private boolean toDoListEventsAreUnique(List\u003cToDoListEvent\u003e toDoListEvents) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        for (int i \u003d 0; i \u003c toDoListEvents.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            for (int j \u003d i + 1; j \u003c toDoListEvents.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                if (toDoListEvents.get(i).isSameToDoListEvent(toDoListEvents.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/todolist/exceptions/DuplicateToDoListEventException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model.todolist.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Signals that the operation will result in duplicate ToDoList Events (ToDoList Events are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class DuplicateToDoListEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public DuplicateToDoListEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        super(\"Operation would result in duplicate ToDoList events\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/todolist/exceptions/ToDoListEventNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model.todolist.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Signals that the operation is unable to find the specified todolist event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ToDoListEventNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ReadOnlyToDoList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ToDoList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTimeInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Venue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Contains utility methods for populating {@code Scheduler} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Contains utility methods for populating {@code ToDoList} with sample data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static CalendarEvent[] getSampleCalendarEvents() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return new CalendarEvent[]{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            new CalendarEvent(new Title(\"MA1101 Tutorial\"), new Description(\"Intro to gaussian elimination\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                new DateTimeInfo(new DateTime(\"2018-10-16 14:00\"), new DateTime(\"2018-10-16 16:00\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                new Venue(\"Blk 30 Geylang Street 29, #06-40\"), getTagSet(\"numerical\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            new CalendarEvent(new Title(\"MA1102 Lecture\"), new Description(\"Inverse function theorem\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                new DateTimeInfo(new DateTime(\"2018-10-16 18:00\"), new DateTime(\"2018-10-16 20:00\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                new Venue(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), getTagSet(\"favourite\", \"bestseller\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            new CalendarEvent(new Title(\"Math Analysis Lecture\"), new Description(\"Topology of metric spaces\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                new DateTimeInfo(new DateTime(\"2018-10-17 15:00\"), new DateTime(\"2018-10-17 16:00\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                new Venue(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), getTagSet(\"important\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            new CalendarEvent(new Title(\"LSM1301 Lecture\"), new Description(\"Plant form and function\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                new DateTimeInfo(new DateTime(\"2018-10-17 18:00\"), new DateTime(\"2018-10-17 21:00\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                new Venue(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), getTagSet(\"labcoat\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            new CalendarEvent(new Title(\"Forensic Science Lab\"), new Description(\"Bring distilled water\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                new DateTimeInfo(new DateTime(\"2018-10-18 12:00\"), new DateTime(\"2018-10-18 14:00\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                new Venue(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                getTagSet(\"criminal\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            new CalendarEvent(new Title(\"Evidence Law Lecture\"), new Description(\"Refutable evidence\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                new DateTimeInfo(new DateTime(\"2018-10-18 11:00\"), new DateTime(\"2018-10-18 16:00\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                new Venue(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                getTagSet(\"justice\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static ToDoListEvent[] getSampleToDoListEvents() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return new ToDoListEvent[]{"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEvent(new Title(\"CS3230 Homework\"), new Description(\"divide and conquer\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                new Priority(\"M\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEvent(new Title(\"CS3241 Lab4\"), new Description(\"draw curve\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                new Priority(\"H\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEvent(new Title(\"JS1011 Homework\"), new Description(\"watch Akira movie\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                new Priority(\"L\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEvent(new Title(\"CS2103 Project\"), new Description(\"finish UI design\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                new Priority(\"H\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEvent(new Title(\"CS2106 Lab5\"), new Description(\"final lab\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                new Priority(\"M\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEvent(new Title(\"Modify resume\"), new Description(\"activities\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                new Priority(\"L\"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static ReadOnlyScheduler getSampleScheduler() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Scheduler sampleScheduler \u003d new Scheduler();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "        for (CalendarEvent sampleCalendarEvent : getSampleCalendarEvents()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "            sampleScheduler.addCalendarEvent(sampleCalendarEvent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return sampleScheduler;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static ReadOnlyToDoList getSampleToDoList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoList sampleToDoList \u003d new ToDoList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        for (ToDoListEvent sampleToDoListEvent : getSampleToDoListEvents()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            sampleToDoList.addToDoListEvent(sampleToDoListEvent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return sampleToDoList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 5,
      "vig42": 13,
      "pangjiahao": 18,
      "SleepySanjinLi": 27,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/SchedulerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Represents a storage for {@link Scheduler}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "public interface SchedulerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "    Path getSchedulerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns Scheduler data as a {@link ReadOnlyScheduler}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    Optional\u003cReadOnlyScheduler\u003e readScheduler() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see #getSchedulerFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    Optional\u003cReadOnlyScheduler\u003e readScheduler(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Saves the given {@link ReadOnlyScheduler} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param scheduler cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "    void saveScheduler(ReadOnlyScheduler scheduler) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see #saveScheduler(ReadOnlyScheduler)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "    void saveScheduler(ReadOnlyScheduler scheduler, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "vig42": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.model.SchedulerChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.events.model.ToDoListChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ReadOnlyToDoList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public interface Storage extends SchedulerStorage, UserPrefsStorage, ToDoListStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "    Path getSchedulerFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    Optional\u003cReadOnlyScheduler\u003e readScheduler() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    void saveScheduler(ReadOnlyScheduler scheduler) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Saves the current version of the Scheduler to the hard disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    void handleSchedulerChangedEvent(SchedulerChangedEvent sce);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    Path getToDoListFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    Optional\u003cReadOnlyToDoList\u003e readToDoList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    void saveToDoList(ReadOnlyToDoList toDoList) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Saves the current version of the ToDoList to the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    void handleToDoListChangedEvent(ToDoListChangedEvent sce);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 7,
      "SleepySanjinLi": 20,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.model.SchedulerChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.events.model.ToDoListChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ReadOnlyToDoList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Manages storage of Scheduler data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private SchedulerStorage schedulerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private ToDoListStorage toDoListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public StorageManager(SchedulerStorage schedulerStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                          ToDoListStorage toDoListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.schedulerStorage \u003d schedulerStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.toDoListStorage \u003d toDoListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Scheduler methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Path getSchedulerFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return schedulerStorage.getSchedulerFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Optional\u003cReadOnlyScheduler\u003e readScheduler() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return readScheduler(schedulerStorage.getSchedulerFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Optional\u003cReadOnlyScheduler\u003e readScheduler(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        logger.fine(\"Attempting to read data from scheduler file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return schedulerStorage.readScheduler(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void saveScheduler(ReadOnlyScheduler scheduler) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "        saveScheduler(scheduler, schedulerStorage.getSchedulerFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void saveScheduler(ReadOnlyScheduler scheduler, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        logger.fine(\"Attempting to write to data scheduler file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "        schedulerStorage.saveScheduler(scheduler, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void handleSchedulerChangedEvent(SchedulerChangedEvent event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            (event, \"Local data changed, saving to scheduler file\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "            saveScheduler(event.data);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ToDoList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public Path getToDoListFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return toDoListStorage.getToDoListFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public Optional\u003cReadOnlyToDoList\u003e readToDoList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return readToDoList(toDoListStorage.getToDoListFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public Optional\u003cReadOnlyToDoList\u003e readToDoList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        logger.fine(\"Attempting to read data from todolist file: \" + filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return toDoListStorage.readToDoList(filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void saveToDoList(ReadOnlyToDoList toDoList) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        saveToDoList(toDoList, toDoListStorage.getToDoListFilePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void saveToDoList(ReadOnlyToDoList toDoList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        logger.fine(\"Attempting to write to data todolist file: \" + filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListStorage.saveToDoList(toDoList, filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void handleToDoListChangedEvent(ToDoListChangedEvent event) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            (event, \"Local data changed, saving to todolist file\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            saveToDoList(event.data);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 18,
      "SleepySanjinLi": 45,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ToDoListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ReadOnlyToDoList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ToDoList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Represents a storage for {@link ToDoList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public interface ToDoListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    Path getToDoListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns ToDoList data as a {@link ReadOnlyToDoList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    Optional\u003cReadOnlyToDoList\u003e readToDoList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see #getToDoListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    Optional\u003cReadOnlyToDoList\u003e readToDoList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Saves the given {@link ReadOnlyToDoList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @param toDoList cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    void saveToDoList(ReadOnlyToDoList toDoList) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see #saveToDoList(ReadOnlyToDoList)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    void saveToDoList(ReadOnlyToDoList toDoList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.UserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedCalendarEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTimeInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Venue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": " * JAXB-friendly version of the Calendar Event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class XmlAdaptedCalendarEvent {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private String start;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private String end;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Constructs an XmlAdaptedCalendarEvent."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public XmlAdaptedCalendarEvent() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Constructs an {@code XmlAdaptedCalendarEvent} with the given calendar event details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public XmlAdaptedCalendarEvent(String title, String description, String start, String end,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                   String venue, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Converts a given Calendar Event into this class for JAXB use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedCalendarEvent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public XmlAdaptedCalendarEvent(CalendarEvent source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        description \u003d source.getDescriptionObject().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        start \u003d source.getStart().toInputFormat();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "        end \u003d source.getEnd().toInputFormat();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        venue \u003d source.getVenue().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Converts this jaxb-friendly adapted calendar event object into the model\u0027s CalendarEvent object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted calendar event"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CalendarEvent toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "        final List\u003cTag\u003e calendarEventTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "            calendarEventTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (!Title.isValid(title)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        final Title modelName \u003d new Title(title);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (!Description.isValid(description)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (venue \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                Venue.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (!Venue.isValid(venue)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            throw new IllegalValueException(Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        final Venue modelVenue \u003d new Venue(venue);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (start \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Start\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!DateTime.isValidDateTimeInput(start)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "        final DateTime modelStart \u003d new DateTime(start);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (end \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"End\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!DateTime.isValidDateTimeInput(end)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": "        final DateTime modelEnd \u003d new DateTime(end);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(calendarEventTags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return new CalendarEvent(modelName, modelDescription,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new DateTimeInfo(modelStart, modelEnd), modelVenue, modelTags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!(other instanceof XmlAdaptedCalendarEvent)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlAdaptedCalendarEvent otherCalendarEvent \u003d (XmlAdaptedCalendarEvent) other;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return Objects.equals(title, otherCalendarEvent.title)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u0026\u0026 Objects.equals(description, otherCalendarEvent.description)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 Objects.equals(start, otherCalendarEvent.start)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 Objects.equals(end, otherCalendarEvent.end)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u0026\u0026 Objects.equals(venue, otherCalendarEvent.venue)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 tagged.equals(otherCalendarEvent.tagged);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 33,
      "vig42": 48,
      "pangjiahao": 3,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public XmlAdaptedTag() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted calendarevent"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "vig42": 1,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedToDoListEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * JAXB-friendly version of the ToDoList Event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class XmlAdaptedToDoListEvent {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String MISSING_TODOLIST_FIELD_MESSAGE_FORMAT \u003d \"ToDoLost event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private String priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Constructs an XmlAdaptedToDoListEvent."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public XmlAdaptedToDoListEvent() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Constructs an {@code XmlAdaptedCalendarEvent} with the given calendar event details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public XmlAdaptedToDoListEvent(String title, String description, String priority) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Converts a given ToDoList Event into this class for JAXB use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedToDoListEvent"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public XmlAdaptedToDoListEvent(ToDoListEvent source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        priority \u003d source.getPriority().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Converts this jaxb-friendly adapted todolistevent object into the model\u0027s ToDoListEvent object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted calendar event"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListEvent toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                String.format(MISSING_TODOLIST_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!Title.isValid(title)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        final Title modelName \u003d new Title(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_TODOLIST_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!Description.isValid(description)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_TODOLIST_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!Priority.isValid(priority)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return new ToDoListEvent(modelName, modelDescription, modelPriority);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!(other instanceof XmlAdaptedToDoListEvent)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlAdaptedToDoListEvent otherToDoListEvent \u003d (XmlAdaptedToDoListEvent) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return Objects.equals(title, otherToDoListEvent.title)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 Objects.equals(description, otherToDoListEvent.description)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 Objects.equals(priority, otherToDoListEvent.priority);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Stores scheduler data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Saves the given scheduler data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableScheduler scheduler)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "            XmlUtil.saveDataToFile(file, scheduler);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Saves the given toDoList data to the specified file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static void saveToDoListDataToFile(Path file, XmlSerializableToDoList toDoList)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            XmlUtil.saveDataToFile(file, toDoList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns scheduler in the file or an empty scheduler"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static XmlSerializableScheduler loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableScheduler.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns toDoList in the file or an empty toDoList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static XmlSerializableToDoList loadToDoListDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableToDoList.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 7,
      "SleepySanjinLi": 17,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSchedulerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": " * A class to access Scheduler data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class XmlSchedulerStorage implements SchedulerStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlSchedulerStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public XmlSchedulerStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Path getSchedulerFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Optional\u003cReadOnlyScheduler\u003e readScheduler() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return readScheduler(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Similar to {@link #readScheduler()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Optional\u003cReadOnlyScheduler\u003e readScheduler(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "            logger.info(\"Scheduler file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlSerializableScheduler xmlScheduler \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return Optional.of(xmlScheduler.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void saveScheduler(ReadOnlyScheduler scheduler) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "        saveScheduler(scheduler, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Similar to {@link #saveScheduler(ReadOnlyScheduler)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void saveScheduler(ReadOnlyScheduler scheduler, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "        requireNonNull(scheduler);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableScheduler(scheduler));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "vig42": 19,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableScheduler.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": " * An Immutable Scheduler that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "@XmlRootElement(name \u003d \"scheduler\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class XmlSerializableScheduler {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CALENDAR_EVENT \u003d \"Calendar Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private List\u003cXmlAdaptedCalendarEvent\u003e calendarEvents;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Creates an empty XmlSerializableScheduler."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public XmlSerializableScheduler() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "        calendarEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public XmlSerializableScheduler(ReadOnlyScheduler src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        calendarEvents.addAll(src.getCalendarEventList()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            .map(XmlAdaptedCalendarEvent::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Converts this scheduler into the model\u0027s {@code Scheduler} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "     *                               {@code XmlAdaptedCalendarEvent}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Scheduler toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Scheduler scheduler \u003d new Scheduler();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        for (XmlAdaptedCalendarEvent p : calendarEvents) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "            CalendarEvent calendarEvent \u003d p.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "            if (scheduler.hasCalendarEvent(calendarEvent)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CALENDAR_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "            scheduler.addCalendarEvent(calendarEvent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return scheduler;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!(other instanceof XmlSerializableScheduler)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return calendarEvents.equals(((XmlSerializableScheduler) other).calendarEvents);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 5,
      "vig42": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableToDoList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ReadOnlyToDoList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ToDoList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * An Immutable ToDoList that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "@XmlRootElement(name \u003d \"toDoList\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class XmlSerializableToDoList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TODOLIST_EVENT \u003d \"ToDoList Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private List\u003cXmlAdaptedToDoListEvent\u003e toDoListEvents;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Creates an empty XmlSerializableToDoList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public XmlSerializableToDoList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public XmlSerializableToDoList(ReadOnlyToDoList src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListEvents.addAll(src.getToDoList()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .map(XmlAdaptedToDoListEvent::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Converts this toDoList into the model\u0027s {@code ToDoList} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *                               {@code XmlAdaptedToDoListEvent}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoList toDoList \u003d new ToDoList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        for (XmlAdaptedToDoListEvent p : toDoListEvents) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            ToDoListEvent toDoListEvent \u003d p.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            if (toDoList.hasToDoListEvent(toDoListEvent)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TODOLIST_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            toDoList.addToDoListEvent(toDoListEvent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return toDoList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!(other instanceof XmlSerializableToDoList)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return toDoListEvents.equals(((XmlSerializableToDoList) other).toDoListEvents);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlToDoListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ReadOnlyToDoList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * A class to access ToDoList data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class XmlToDoListStorage implements ToDoListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlToDoListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public XmlToDoListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public Path getToDoListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public Optional\u003cReadOnlyToDoList\u003e readToDoList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return readToDoList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Similar to {@link #readToDoList()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public Optional\u003cReadOnlyToDoList\u003e readToDoList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            logger.info(\"ToDoList file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlSerializableToDoList xmlToDoList \u003d XmlFileStorage.loadToDoListDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return Optional.of(xmlToDoList.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void saveToDoList(ReadOnlyToDoList toDoList) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        saveToDoList(toDoList, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Similar to {@link #saveToDoList(ReadOnlyToDoList)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void saveToDoList(ReadOnlyToDoList toDoList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(toDoList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlFileStorage.saveToDoListDataToFile(filePath, new XmlSerializableToDoList(toDoList));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static javafx.scene.input.KeyEvent.KEY_PRESSED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import jfxtras.internal.scene.control.skin.agenda.AgendaWeekSkin;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import jfxtras.scene.control.agenda.Agenda;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.commons.events.ui.CalendarDisplayTimeChangedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.commons.events.ui.CalendarPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.commons.events.ui.JumpToDateTimeEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * The Ui component that is responsible for displaying a Calendar CalendarEvents to the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "public class CalendarDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final String FXML \u003d \"CalendarDisplay.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final String CSS \u003d \"view/ModifiedAgenda.css\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final String STYLE_CLASS \u003d \"group18\"; // style class for agenda appointments"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarDisplay.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private ObservableList\u003cCalendarEvent\u003e calendarEventList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private Agenda agenda;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private Agenda.AppointmentGroupImpl appointmentGroup;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private LocalDateTime currentDateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private VBox calendarDisplayBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public CalendarDisplay(ObservableList\u003cCalendarEvent\u003e calendarEventList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        this.calendarEventList \u003d calendarEventList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        this.currentDateTime \u003d LocalDateTime.now().withNano(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        initAgenda();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        setConnections(calendarEventList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        setControls();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        agenda.getStylesheets().add(CSS); // \"src/main/resources/view/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        setDisplayedDateTime(currentDateTime); // jump to the current time"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Starts up the internal Agenda Object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Disables unwanted inbuilt functions of agenda."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Adds the agenda Control into the scene."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void initAgenda() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        agenda \u003d new Agenda();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        appointmentGroup \u003d new Agenda.AppointmentGroupImpl().withStyleClass(STYLE_CLASS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // this actionCallBack is called when the user double clicks on an appointment in the display"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // Opens a dialog containing the details of the clicked event"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        agenda.actionCallbackProperty().set(param -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            logger.info(\"User double clicked on \" + param.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            CalendarEventDialog dialog \u003d new CalendarEventDialog((CalendarEvent) param);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            displayPopUp(dialog.getRoot());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        agenda.setAllowDragging(false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        agenda.setAppointmentChangedCallback(param -\u003e null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        agenda.setEditAppointmentCallback(param -\u003e null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        agenda.setSkin(new AgendaWeekSkin(agenda));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        agenda.setId(\"agenda\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        calendarDisplayBox.getChildren().add(agenda);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Creates a new window to display root."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * CalendarDisplay will block until the new window is closed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void displayPopUp(Parent root) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        Scene scene \u003d new Scene(root, 300, 200);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        stage.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        stage.showAndWait();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Sync the list of CalendarEvents to the calendar display."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * @param calendarEventList the list of CalendarEvents to display."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void setConnections(ObservableList\u003cCalendarEvent\u003e calendarEventList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // populate the calendar"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // setting the appointment group applies the correct CSS to it"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        calendarEventList.forEach((calendarEvent -\u003e calendarEvent.setAppointmentGroup(appointmentGroup)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        agenda.appointments().addAll(calendarEventList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // push the changes to agenda"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        calendarEventList.addListener(this::forwardChanges);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Forward changes in calendar event list to agenda"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void forwardChanges(ListChangeListener.Change\u003c? extends CalendarEvent\u003e c) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        while (c.next()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            if (c.wasRemoved()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                for (CalendarEvent removedEvent : c.getRemoved()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                    agenda.appointments().remove(removedEvent);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            if (c.wasAdded()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                for (CalendarEvent addedEvent : c.getAddedSubList()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                    addedEvent.setAppointmentGroup(appointmentGroup);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                    agenda.appointments().add(c.getFrom(), addedEvent);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Set up the controls for interacting with the calendar display."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * The calendarDisplay must be in focus."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void setControls() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        calendarDisplayBox.addEventFilter(KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            switch (event.getCode()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            case LEFT:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                logger.info(\"LEFT arrow Pressed.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                displayPreviousWeek();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                indicateCalendarDisplayTimeChanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            case RIGHT:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                logger.info(\"RIGHT arrow Pressed.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                displayNextWeek();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                indicateCalendarDisplayTimeChanged();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vig42"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Raises event to event center of change in display time"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Depends on the current date, not on the first date displayed in the calendar"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void indicateCalendarDisplayTimeChanged() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        raise(new CalendarDisplayTimeChangedEvent(currentDateTime));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Calendar will display the period containing the specified LocalDateTime"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void handleJumpToDateTimeEvent(JumpToDateTimeEvent event) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        setDisplayedDateTime(event.targetLocalDateTime);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Calendar will display the period containing the selected CalendarEvent"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void handleCalendarPanelSelectionChangedEvent(CalendarPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        setDisplayedDateTime(event.newSelection.getStartLocalDateTime());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Sets the {@code LocaDateTime} that agenda will display."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Raises a CalendarDisplayTimeChangedEvent."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void setDisplayedDateTime(LocalDateTime newLocalDateTime) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        currentDateTime \u003d newLocalDateTime;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        /* if user jumps to this LocalDateTime, scrolls away, and jumps back to the same"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        time, agenda will not center the display again. So must perturb the display time slightly"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        before setting it to the actual target"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "vig42"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        agenda.setDisplayedLocalDateTime(currentDateTime.plusSeconds(1));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        agenda.setDisplayedLocalDateTime(currentDateTime);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        indicateCalendarDisplayTimeChanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Navigate by setting agenda\u0027s displayed DateTime."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void displayNextWeek() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        setDisplayedDateTime(currentDateTime.plusWeeks(1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void displayPreviousWeek() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        setDisplayedDateTime(currentDateTime.minusWeeks(1));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "vig42": 4,
      "pangjiahao": 200,
      "SleepySanjinLi": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarEventCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": " * An UI component that displays information of a {@code CalendarEvent}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class CalendarEventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String FXML \u003d \"CalendarEventCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Scheduler level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public final CalendarEvent calendarEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private Label start;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private Label end;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label venue;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CalendarEventCard(CalendarEvent calendarEvent, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.calendarEvent \u003d calendarEvent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        title.setText(calendarEvent.getTitle().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        start.setText(\"Start:  \" + calendarEvent.getStart().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        end.setText(\"End:   \" + calendarEvent.getEnd().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        description.setText(calendarEvent.getDescriptionObject().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        venue.setText(calendarEvent.getVenue().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        calendarEvent.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!(other instanceof CalendarEventCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEventCard card \u003d (CalendarEventCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 calendarEvent.equals(card.calendarEvent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 5,
      "vig42": 17,
      "pangjiahao": 1,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarEventDialog.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * A pop-up dialog to display the information of a {@code CalendarEvent} to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "public class CalendarEventDialog extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final String FXML \u003d \"CalendarEventDialog.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public final CalendarEvent calendarEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private Label venue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public CalendarEventDialog(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        this.calendarEvent \u003d calendarEvent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        fillLabels();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Fills up the labels using the information of the calendar event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void fillLabels() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        title.setText(calendarEvent.getTitle().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        description.setText(calendarEvent.getDescriptionObject().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        venue.setText(calendarEvent.getVenue().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        dateTime.setText(calendarEvent.getStartLocalDateTime().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Closes the dialog."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void onOkButtonClicked(ActionEvent event) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        closeStage(event);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Closes this Dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void closeStage(javafx.event.ActionEvent event) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        logger.info(\"Closing dialog.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        Node source \u003d (Node) event.getSource();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        Stage stage \u003d (Stage) source.getScene().getWindow();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        if (!(other instanceof CalendarEventDialog)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        CalendarEventDialog dialog \u003d (CalendarEventDialog) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return calendarEvent.equals(dialog.calendarEvent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 8,
      "pangjiahao": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.commons.events.ui.CalendarPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Panel containing the list of calendar events."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private ListView\u003cCalendarEvent\u003e calendarView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public CalendarPanel(ObservableList\u003cCalendarEvent\u003e calendarEventList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "        setConnections(calendarEventList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void setConnections(ObservableList\u003cCalendarEvent\u003e calendarEventList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        calendarView.setItems(calendarEventList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        calendarView.setCellFactory(listView -\u003e new CalendarViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        calendarView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "                if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "                    logger.fine(\"Selection in calendar event list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                    raise(new CalendarPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "            });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Scrolls to the {@code CalendarEventCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            calendarView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            calendarView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code CalendarEvent} using a {@code CalendarEventCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    class CalendarViewCell extends ListCell\u003cCalendarEvent\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "        protected void updateItem(CalendarEvent calendarEvent, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "            super.updateItem(calendarEvent, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "            if (empty || calendarEvent \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "                setGraphic(new CalendarEventCard(calendarEvent, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 11,
      "vig42": 70,
      "pangjiahao": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            String command \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 1,
      "SleepySanjinLi": 1,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DescriptionDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * An UI component that displays selected description of a {@code ToDoListEvent}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class DescriptionDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final String FXML \u003d \"DescriptionDisplay.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public final ToDoListEvent toDoListEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private int selectedIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private TextArea description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public DescriptionDisplay(ToDoListEvent toDoListEvent, int displayedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.selectedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.toDoListEvent \u003d toDoListEvent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        id.setText(displayedIndex + 1 + \". \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        description.setText(toDoListEvent.getDescription().value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        description.setEditable(false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        if (!(other instanceof DescriptionDisplay)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        DescriptionDisplay display \u003d (DescriptionDisplay) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return id.getText().equals(display.id.getText())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            \u0026\u0026 toDoListEvent.equals(display.toDoListEvent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 20,
      "SleepySanjinLi": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import javafx.scene.control.SelectionModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import javafx.scene.input.KeyCodeCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.ui.SwitchToSearchTabEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.ui.SwitchToTasksTabEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.ui.ToggleTabEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final int toDoListPanelTab \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final int searchPanelTab \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final int numberOfTabs \u003d 2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private CalendarDisplay calendarDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private StackPane calendarDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private StackPane calendarPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private VBox monthYearPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "        setAccelerator(() -\u003e handleToggleTab(new ToggleTabEvent()), new KeyCodeCombination(KeyCode.TAB,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            KeyCombination.SHIFT_ANY, KeyCombination.CONTROL_DOWN));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // disable TabPane switching by left and right arrow keys"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        setAccelerator(() -\u003e {}, new KeyCodeCombination(KeyCode.LEFT));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        setAccelerator(() -\u003e {}, new KeyCodeCombination(KeyCode.RIGHT));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Sets the accelerator of an action."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @param action         the action to execute when the keyCombination is pressed"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private void setAccelerator(Runnable action, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            if (!(event.getTarget() instanceof TextInputControl) \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                action.run();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                // consume event unless the target is the calendar display"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                if (!(event.getTarget() instanceof ScrollPane)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                    event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        TaskListPanel taskListPanel \u003d new TaskListPanel(logic.getFilteredToDoListEventList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": "        calendarDisplay \u003d new CalendarDisplay(logic.getFullCalendarEventList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        calendarDisplayPlaceholder.getChildren().add(calendarDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        MonthYearPanel monthYearPanel \u003d new MonthYearPanel(logic.getFilteredCalendarEventList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        monthYearPanelPlaceholder.getChildren().add(monthYearPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarPanel calendarPanel \u003d new CalendarPanel(logic.getFilteredCalendarEventList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        calendarPanelPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Switches to the tab for the task list panel (if it is not already open)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void showTaskListPanel() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!tabPane.getSelectionModel().isSelected(toDoListPanelTab)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "vig42"
        },
        "content": "            tabPane.getSelectionModel().select(toDoListPanelTab);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Updates the calendar event search panel and switches to its tab (if it is not already open)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void showCalendarEventPanel() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!tabPane.getSelectionModel().isSelected(searchPanelTab)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "vig42"
        },
        "content": "            tabPane.getSelectionModel().select(searchPanelTab);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private void switchPanel() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        SelectionModel selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        int currentIndex \u003d selectionModel.getSelectedIndex();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        selectionModel.select((currentIndex + 1) % numberOfTabs);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public CalendarPanel getCalendarPanel() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return calendarPanel;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void handleSwitchToTasksTabEvent(SwitchToTasksTabEvent event) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "vig42"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "vig42"
        },
        "content": "        showTaskListPanel();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void handleSwitchToSearchTabEvent(SwitchToSearchTabEvent event) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "vig42"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "vig42"
        },
        "content": "        showCalendarEventPanel();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void handleToggleTab(ToggleTabEvent event) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        switchPanel();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 41,
      "vig42": 41,
      "pangjiahao": 11,
      "SleepySanjinLi": 4,
      "-": 156
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MonthYearPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.commons.events.ui.CalendarDisplayTimeChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Day Month Panel. Displays the month and day in the calendar."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class MonthYearPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String FXML \u003d \"MonthYearPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MonthYearPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String MONTH_YEAR_DISPLAY_FORMAT \u003d \"MMMM uuuu\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final DateTimeFormatter MONTH_YEAR_LABEL_FORMATTER \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DateTimeFormatter.ofPattern(MONTH_YEAR_DISPLAY_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private Label monthYearLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private AnchorPane monthYearPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public MonthYearPanel(ObservableList\u003cCalendarEvent\u003e calendarEventList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        renderDayMonthPanel(calendarEventList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        calendarEventList.addListener(new ListChangeListener\u003cCalendarEvent\u003e() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            public void onChanged(Change\u003c? extends CalendarEvent\u003e c) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                c.next();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                if (c.wasUpdated()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                    renderDayMonthPanel(calendarEventList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void handleCalendarDisplayChangeEvent(CalendarDisplayTimeChangedEvent event) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        setMonthYearLabelText(event.newLocalDateTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private void setMonthYearLabelText(LocalDateTime startOfWeek) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        monthYearLabel.setText(startOfWeek.format(MONTH_YEAR_LABEL_FORMATTER));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private LocalDateTime getStartOfWeek(ObservableList\u003cCalendarEvent\u003e calendarEventList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        if (!calendarEventList.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            CalendarEvent earliestCalendarEvent \u003d calendarEventList.get(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return earliestCalendarEvent.getStart().localDateTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return LocalDateTime.now();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * renderDayMonthPanel."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private void renderDayMonthPanel(ObservableList\u003cCalendarEvent\u003e calendarEventList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        LocalDateTime startOfWeek \u003d getStartOfWeek(calendarEventList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        setMonthYearLabelText(startOfWeek);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 68,
      "vig42": 1,
      "pangjiahao": 8,
      "SleepySanjinLi": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.model.SchedulerChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void handleSchedulerChangedEvent(SchedulerChangedEvent abce) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 9,
      "vig42": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.events.ui.TaskPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Panel containing the list of tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private ListView\u003cToDoListEvent\u003e toDoListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public TaskListPanel(ObservableList\u003cToDoListEvent\u003e toDoListEventList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        setConnections(toDoListEventList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void setConnections(ObservableList\u003cToDoListEvent\u003e toDoListEventList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListView.setItems(toDoListEventList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListView.setCellFactory(listView -\u003e new ToDoListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                    logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                    raise(new TaskPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Scrolls to the {@code ToDoListEventCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            toDoListView.scrollTo(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            toDoListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code ToDoListEvent} using a {@code ToDoListEventCard}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    class ToDoListViewCell extends ListCell\u003cToDoListEvent\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        protected void updateItem(ToDoListEvent toDoListEvent, boolean empty) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            super.updateItem(toDoListEvent, empty);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            if (empty || toDoListEvent \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                setGraphic(new ToDoListEventCard(toDoListEvent, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 18,
      "SleepySanjinLi": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ToDoListEventCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.control.CheckBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * An UI component that displays information of a {@code ToDoListEvent}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ToDoListEventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final String FXML \u003d \"ToDoListEventCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Scheduler level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public final ToDoListEvent toDoListEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private CheckBox checkBox;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Button description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private int selectedIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListEventCard(ToDoListEvent toDoListEvent, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.selectedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.toDoListEvent \u003d toDoListEvent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        title.setText(toDoListEvent.getTitle().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String priorityValue \u003d toDoListEvent.getPriority().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (priorityValue.contains(\"H\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            priority.setText(\"High\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            priority.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                Color.color(0.929, 0.325, 0.325), null, null)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } else if (priorityValue.contains(\"M\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            priority.setText(\"Medium\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            priority.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                Color.color(1.000, 0.647, 0.000), null, null)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            priority.setText(\"Low\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            priority.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                Color.color(0.408, 0.718, 0.137), null, null)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!(other instanceof ToDoListEventCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEventCard card \u003d (ToDoListEventCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 toDoListEvent.equals(card.toDoListEvent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 1,
      "SleepySanjinLi": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Stops the UI."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 6,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/calendar.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        //mainWindow.releaseResources(); for the previous browser panel"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 21,
      "vig42": 1,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @param location Venue of the FXML document."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 19,
      "-": 94
    }
  },
  {
    "path": "src/main/resources/view/CalendarDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"calendarDisplayBox\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "pangjiahao": 7
    }
  },
  {
    "path": "src/main/resources/view/CalendarEventCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u003cLabel fx:id\u003d\"start\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$start\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u003cLabel fx:id\u003d\"end\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$end\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"venue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$venue\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "vig42": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/CalendarEventDialog.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003c!-- the fxml for gridpane was taken from"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "https://www.callicoder.com/javafx-fxml-form-gui-tutorial/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "as I was unable to get my own implementation to format nicely --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003cGridPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "          stylesheets\u003d\"@DarkTheme.css\" alignment\u003d\"center\" hgap\u003d\"10\" vgap\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003cpadding\u003e\u003cInsets top\u003d\"40\" right\u003d\"40\" bottom\u003d\"40\" left\u003d\"40\"/\u003e\u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        \u003cColumnConstraints minWidth\u003d\"100\" prefWidth\u003d\"100\" maxWidth\u003d\"Infinity\" halignment\u003d\"RIGHT\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        \u003c/ColumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        \u003cColumnConstraints minWidth\u003d\"200\" prefWidth\u003d\"200\" maxWidth\u003d\"Infinity\" hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        \u003c/ColumnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003c!-- Title Label --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003cLabel fx:id\u003d\"title\" text\u003d\"Event Title\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "           GridPane.columnSpan\u003d\"2\" GridPane.rowSpan\u003d\"1\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "           GridPane.halignment\u003d\"CENTER\" \u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            \u003cFont size\u003d\"24\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            \u003cInsets top\u003d\"20\" bottom\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003c!-- Description Label --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003cLabel text\u003d\"Description : \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003cLabel fx:id\u003d\"description\" text\u003d\"Some description\" prefHeight\u003d\"40\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "           GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003c!-- Venue Label --\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003cLabel text\u003d\"Venue : \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003cLabel fx:id\u003d\"venue\" text\u003d\"Some venue\" prefHeight\u003d\"40\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "           GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003c!-- Date and Time Label --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003cLabel text\u003d\"Date and Time : \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003cLabel fx:id\u003d\"dateTime\" text\u003d\"Some DateTime\" prefHeight\u003d\"40\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "           GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003c!-- Ok Button --\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003cButton text\u003d\"OK\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            prefWidth\u003d\"100\" prefHeight\u003d\"40\" defaultButton\u003d\"true\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"4\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            GridPane.columnSpan\u003d\"2\" GridPane.rowSpan\u003d\"1\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            onAction\u003d\"#onOkButtonClicked\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            \u003cInsets top\u003d\"20\" right\u003d\"0\" bottom\u003d\"20\" left\u003d\"0\"\u003e\u003c/Insets\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    \u003c/Button\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 65
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003cListView fx:id\u003d\"calendarView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 7
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "               promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/* style sheet for the application"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * styles are organized by their locations"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * /"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/* base style */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-text-fill: #CCCCCC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".split-pane-divider {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "/* tab styles */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": ".tab-header-background {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-background-color: #282828;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": ".tab-pane:top *.tab-header-area {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-padding: 0em 0em 0em 0em;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": ".tab-pane:bottom *.tab-header-area {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-padding: 0em 0em 0em 0em;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": ".tab-pane:focused \u003e .tab-header-area \u003e .headers-region \u003e .tab:selected .focus-indicator {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-background-color: #282828;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-border-color: #282828;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-border-color: #3c3e3f;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": ".tab-label {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-font-size: 14;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-text-fill: #CCCCCC;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/* task list styles */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "#taskListHeader {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-text-fill: #CCCCCC;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #273445;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "#taskListPanel {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #333333;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "#taskListLabel {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #273445;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "#taskCardHeader {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #333333;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-opacity: 0.0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "#taskTags {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "#taskTags .label {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #3e7b91; /* these are the intended ones 68B723, F37329, C6262E */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "/* calendar styles */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "#monthYearPanelPlaceholder {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #282828;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "#monthYearPanel {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #282828;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-text-fill: #CCCCCC;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "#monthYearLabel {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-size: 24;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-text-fill: #CCCCCC;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".separator .line { /* separator between month and calendar below */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background: #666666;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-width: 3;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": "#calendarDisplayBox {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #282828;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "/* dark theme for todolist and search pane items */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "vig42"
        },
        "content": "/* font for todolist panel */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vig42"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "vig42"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vig42"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vig42"
        },
        "content": "#priority {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "vig42"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/* command box styles */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #1B1B1B;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-radius: 0;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-radius: 0 0;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-text-box-border: #DBB1B1;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-text-fill: #CCCCCC;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "#commandBoxPlaceholder {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #1B1B1B;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-radius: 0;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "#resultDisplayPlaceholder {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #1B1B1B;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #1B1B1B #1B1B1B;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-width: 0 0 0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-color: #1B1B1B #1B1B1B;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-width: 0 0 0 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-text-fill: #CCCCCC;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/* tags styles */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/* alert box */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "vig42"
        },
        "content": "/* dark scroll bar for todolist */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "vig42"
        },
        "content": "/* todo use this scrollbar style for the calendar too, it looks really nice */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 93,
      "vig42": 41,
      "pangjiahao": 1,
      "-": 168
    }
  },
  {
    "path": "src/main/resources/view/DescriptionDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"109.0\" prefWidth\u003d\"175.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "      \u003cTextArea fx:id\u003d\"description\" layoutY\u003d\"31.0\" prefHeight\u003d\"169.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "      \u003cLabel layoutX\u003d\"2.0\" layoutY\u003d\"3.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"153.0\" text\u003d\"Description\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" layoutX\u003d\"140.0\" layoutY\u003d\"3.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"31.0\" text\u003d\"\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 14
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" minHeight\u003d\"450.0\" minWidth\u003d\"800.0\" onCloseRequest\u003d\"#handleExit\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "         type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cImage url\u003d\"@/images/calendar.png\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.25\" prefHeight\u003d\"675.0\" prefWidth\u003d\"1200.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "                \u003cTabPane fx:id\u003d\"tabPane\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                    \u003cTab text\u003d\"To Do List\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"675.0\" prefWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                    \u003cTab text\u003d\"Calendar Events\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"675.0\" prefWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"calendarPanelPlaceholder\" minWidth\u003d\"600.0\" prefHeight\u003d\"380\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                                       prefWidth\u003d\"900\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                                       VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                \u003cVBox prefHeight\u003d\"675.0\" prefWidth\u003d\"900.0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                    \u003cVBox fx:id\u003d\"monthYearPanelPlaceholder\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                          prefHeight\u003d\"50\" prefWidth\u003d\"900\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"calendarDisplayPlaceholder\" prefWidth\u003d\"900\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"calendarCommandBoxBorder\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                               prefHeight\u003d\"25.0\" prefWidth\u003d\"900\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"25\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                               prefWidth\u003d\"900\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                               prefHeight\u003d\"135.0\" prefWidth\u003d\"900.0\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 22,
      "vig42": 1,
      "pangjiahao": 1,
      "SleepySanjinLi": 9,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/ModifiedAgenda.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .Week {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #282828;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-width: 0px 0px 0px 0px;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .HourLabel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #CCCCCC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .DayLabel {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #CCCCCC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-text-alignment: right;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .HourLine {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: transparent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-stroke: #666666;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .HalfHourLine {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: transparent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-stroke-dash-array: 4 4 4 4;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .DayHeader {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-width: 0px 0px 0px 0px;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .Day {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: transparent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-width: 0px 0px 0px 0px;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .weekend {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .today {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .Appointment {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-color: WHITE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .AppointmentTimeLabel {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: BLACK;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-font-size: 0.8em;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .AppointmentLabel {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: BLACK;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group0 {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #AC725E;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #AC725E;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group1 {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #D06B64;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #D06B64;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group2 {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #F83A22;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #F83A22;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group3 {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #FA573C;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #FA573C;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group4 {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #FF7537;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #FF7537;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group5 {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #FFAD46;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #FFAD46;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group6 {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #42D692;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #42D692;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group7 {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #16A765;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #16A765;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group8 {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #7BD148;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #7BD148;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group9 {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #B3DC6C;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #B3DC6C;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group10 {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #FBE983;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #FBE983;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group11 {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #FAD165;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #FAD165;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group12 {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #92E1C0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #92E1C0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group13 {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #9FE1E7;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #9FE1E7;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group14 {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #9FC6E7;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #9FC6E7;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group15 {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #4986E7;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #4986E7;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group16 {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #9A9CFF;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #9A9CFF;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group17 {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #B99AFF;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #B99AFF;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group18 {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #C2C2C2;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #C2C2C2;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group19 {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #CABDBF;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #CABDBF;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group20 {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #CCA6AC;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #CCA6AC;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group21 {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #F691B2;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #F691B2;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group22 {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #CD74E6;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #CD74E6;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group23 {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #A47AE2;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #A47AE2;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "/* same colors as the bar chart"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group0 { -fx-background-color: #f9d900; }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group1 { -fx-background-color: #a9e200; }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group2 { -fx-background-color: #22bad9; }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group3 { -fx-background-color: #0181e2; }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group4 { -fx-background-color: #2f357f; }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group5 { -fx-background-color: #860061; }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group6 { -fx-background-color: #c62b00; }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".group7 { -fx-background-color: #ff5700; }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .DurationDragger {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #00000040;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .MenuIcon {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #00000040;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .GhostRectangle {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: transparent;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-stroke: #00000080;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-stroke-width: 1;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-stroke-dash-array: 4 4 4 4;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .Selected {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -xfx-color: -fx-focused-base;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-body-color;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-insets: -1.4, 0, 1, 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-radius: 6.4, 5, 4, 3;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .Now {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #FF000088;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".Agenda .History {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-stroke: transparent;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-fill: #FFFFFF70;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".AgendaPopup {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-insets: 0 0 -1 0, 0, 1, 2;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-radius: 5, 5, 4, 3;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-padding: 0.766667em 0.733333em 0.75em 0.733333em;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-text-fill: -fx-text-base-color;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".AgendaPopup .AppointmentGroups {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".AgendaPopup .AppointmentGroup {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-color: WHITE;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".AgendaPopup .close-icon {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-image: url(\"AgendaWeekSkinPopupCloseWindowIcon.png\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".AgendaPopup .delete-icon {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-image: url(\"AgendaWeekSkinDeleteIcon.png\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".AgendaPopup .action-icon {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-image: url(\"AgendaWeekSkinActionIcon.png\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".scroll-bar:vertical {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #1a1a1a;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ".scroll-bar:vertical .thumb {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-color: #666666;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    -fx-background-radius: 5em;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 266
    }
  },
  {
    "path": "src/main/resources/view/MonthYearPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"MonthYearPanel\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                \u003cLabel fx:id\u003d\"monthYearLabel\" layoutX\u003d\"235.0\" layoutY\u003d\"32.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                       AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cSeparator minHeight\u003d\"3.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                \u003cInsets left\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003c/Separator\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 22
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import org.controlsfx.control.StatusBar?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"grid-pane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"syncStatus\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "               nodeOrientation\u003d\"RIGHT_TO_LEFT\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"675.0\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003cListView fx:id\u003d\"toDoListView\" style\u003d\"-fx-background-color: #383838;\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "SleepySanjinLi": 4
    }
  },
  {
    "path": "src/main/resources/view/ToDoListEventCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?import javafx.scene.control.CheckBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPaneToDo\" fx:id\u003d\"cardPaneToDo\" prefHeight\u003d\"25.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "      styleClass\u003d\"container\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003cCheckBox mnemonicParsing\u003d\"false\" prefHeight\u003d\"25.0\" prefWidth\u003d\"16.0\" styleClass\u003d\"button-bar\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "              stylesheets\u003d\"@DarkTheme.css\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003cLabel fx:id\u003d\"id\" prefHeight\u003d\"24.0\" prefWidth\u003d\"25.0\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"$id\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003cLabel fx:id\u003d\"title\" prefHeight\u003d\"24.0\" prefWidth\u003d\"175.0\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"$title\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "           HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003cLabel fx:id\u003d\"priority\" prefHeight\u003d\"22.0\" prefWidth\u003d\"100.0\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"$priority\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "           HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 7,
      "pangjiahao": 1,
      "SleepySanjinLi": 8
    }
  },
  {
    "path": "src/test/data/XmlSchedulerStorageTest/invalidAndValidCalendarEventScheduler.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003cscheduler\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c!-- Valid CalendarEvent --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eHans Muster\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e9482424\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003c!-- CalendarEvent with invalid description field --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eHans Muster\u003c/title\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003c/scheduler\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 7,
      "vig42": 7,
      "-": 3
    }
  },
  {
    "path": "src/test/data/XmlSchedulerStorageTest/invalidCalendarEventScheduler.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003cscheduler\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003c!-- CalendarEvent with invalid title field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003e\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e9482424\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003c/scheduler\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 4,
      "vig42": 4,
      "-": 2
    }
  },
  {
    "path": "src/test/data/XmlSerializableSchedulerTest/duplicateCalendarEventScheduler.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003cscheduler\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eAlice Pauline\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription\u003e94351253\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c!-- CalendarEvent with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eAlice Pauline\u003c/title\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription\u003e94351253\u003c/description\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003c/scheduler\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 6,
      "vig42": 11,
      "-": 5
    }
  },
  {
    "path": "src/test/data/XmlSerializableSchedulerTest/invalidCalendarEventScheduler.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003cscheduler\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003c!-- CalendarEvent with invalid venue field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eHans Muster\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e9482424\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e\u003c/venue\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003c/scheduler\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 4,
      "vig42": 4,
      "-": 1
    }
  },
  {
    "path": "src/test/data/XmlSerializableSchedulerTest/typicalCalendarEventsScheduler.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003c!-- Scheduler save file which contains the same CalendarEvent values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003cscheduler\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eCS2103 Lecture\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription\u003eAbstraction, Gradle, JUnit\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue\u003ei3 Auditorium\u003c/venue\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cstart\u003e2018-11-15 16:00\u003c/start\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cend\u003e2018-11-15 18:00\u003c/end\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctagged\u003electure\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctagged\u003eCS2103\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eCS2104 Tutorial\u003c/title\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription\u003eMonadic Parsers\u003c/description\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue\u003eAS6 04-21\u003c/venue\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cstart\u003e2018-11-13 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cend\u003e2018-11-13 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctagged\u003etutorial\u003c/tagged\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctagged\u003eCS2104\u003c/tagged\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eCS2040 Lab\u003c/title\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription\u003eLinked Lists\u003c/description\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue\u003eCOM1 02-09\u003c/venue\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cstart\u003e2018-11-14 08:00\u003c/start\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cend\u003e2018-11-14 10:00\u003c/end\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eFIN3101 Seminar\u003c/title\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription\u003eOne-Fund Theorem\u003c/description\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue\u003eMarina Boulevard\u003c/venue\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cstart\u003e2018-11-16 10:00\u003c/start\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cend\u003e2018-11-16 15:00\u003c/end\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctagged\u003eFIN3101\u003c/tagged\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctagged\u003eseminar\u003c/tagged\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eChoir Practice\u003c/title\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription\u003eBring songbook\u003c/description\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue\u003eLittle Tokyo\u003c/venue\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cstart\u003e2018-11-16 19:00\u003c/start\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cend\u003e2018-11-16 22:00\u003c/end\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eCareer Fair\u003c/title\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription\u003eBring resume\u003c/description\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue\u003eMPSH 1\u003c/venue\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cstart\u003e2018-11-17 09:00\u003c/start\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cend\u003e2018-11-17 18:00\u003c/end\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eGoogle Interview\u003c/title\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription\u003eBring water bottle\u003c/description\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue\u003eMountain View\u003c/venue\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cstart\u003e2018-11-14 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cend\u003e2018-11-14 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003ctagged\u003einterview\u003c/tagged\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003c/scheduler\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 42,
      "vig42": 18,
      "-": 1
    }
  },
  {
    "path": "src/test/data/XmlSerializableToDoListTest/duplicateToDoListEventToDoList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003ctoDoList\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eCS2103 Midterm\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription\u003ecover all materials from week 1 to week 7\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority\u003eH\u003c/priority\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c!-- ToDoListEvent with same identity as CS2103 Midterm --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eCS2103 Midterm\u003c/title\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription\u003ecover all materials from week 1 to week 7\u003c/description\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority\u003eH\u003c/priority\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c/toDoList\u003e"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 17
    }
  },
  {
    "path": "src/test/data/XmlSerializableToDoListTest/invalidToDoListEventToDoList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003ctoDoList\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c!--ToDoListEvent with invalid priority field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eCS2106 LAB4\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003ewrite mymalloc() and myfree()\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003e\u003c/priority\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c/toDoList\u003e"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 9
    }
  },
  {
    "path": "src/test/data/XmlSerializableToDoListTest/typicalToDoListEventsToDoList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c!-- ToDoList save file which contains the same ToDoListEvent values as in TypicalTodoListEvents#getTypicalToDoListEvents() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003ctoDoList\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eCS2103 Midterm\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription\u003ecover all materials from week 1 to week 7\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority\u003eH\u003c/priority\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eJS1011 Tutorial\u003c/title\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription\u003eMonadic parsers\u003c/description\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority\u003eL\u003c/priority\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eInterview workshop\u003c/title\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription\u003ewill be helpful for interview\u003c/description\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority\u003eL\u003c/priority\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eDaniel\u0027s birthday party\u003c/title\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription\u003eremember to buy gifts\u003c/description\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority\u003eM\u003c/priority\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eCS1000\u003c/title\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription\u003eteach to friends\u003c/description\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority\u003eL\u003c/priority\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eCS2000\u003c/title\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription\u003eteach to friends\u003c/description\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority\u003eM\u003c/priority\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eCS3000\u003c/title\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription\u003eteach to friends\u003c/description\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority\u003eH\u003c/priority\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eCS4000\u003c/title\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription\u003eseek help from prof\u003c/description\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority\u003eL\u003c/priority\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eCS5000\u003c/title\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription\u003eseek help from prof\u003c/description\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority\u003eM\u003c/priority\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eCS6000\u003c/title\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription\u003eseek help from prof\u003c/description\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority\u003eH\u003c/priority\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c/toDoList\u003e"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 54
    }
  },
  {
    "path": "src/test/data/XmlToDoListStorageTest/NotXmlFormatToDoList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "not xml format!"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 1
    }
  },
  {
    "path": "src/test/data/XmlToDoListStorageTest/invalidAndValidToDoListEventToDoList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003ctoDoList\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c!-- Valid ToDoListEvent --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eCS2100 final\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003ecan bring calculator\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003eH\u003c/priority\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c!-- ToDoListEvent with invalid description field --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003eCS2100 final\u003c/title\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e\u003c/description\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003eH\u003c/priority\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c/toDoList\u003e"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 15
    }
  },
  {
    "path": "src/test/data/XmlToDoListStorageTest/invalidToDoListEventToDoList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003ctoDoList\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c!-- ToDoListEvent with invalid title field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003ctoDoListEvents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003ctitle\u003e\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003ecan bring calculator\u003c/description\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \u003cpriority isPrivate\u003d\"false\"\u003eH\u003c/priority\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    \u003c/toDoListEvents\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "\u003c/toDoList\u003e"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidCalendarEventField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c!-- CalendarEvent with an invalid description field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003ccalendarEvent\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003ctitle\u003eHans Muster\u003c/title\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003cdescription\u003e9482asf424\u003c/description\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003cvenue\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003c/calendarEvent\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 4,
      "vig42": 4,
      "-": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingCalendarEventField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c!-- CalendarEvent with missing title field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003ccalendarEvent\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003cdescription\u003e9482424\u003c/description\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003cvenue\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003c/calendarEvent\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "vig42": 4,
      "-": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempScheduler.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003cscheduler\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eCS2103 Lecture\u003c/title\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription\u003eAbstraction, Gradle, JUnit\u003c/description\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue\u003ei3 Auditorium\u003c/venue\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cstart\u003e2018-11-15 16:00\u003c/start\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cend\u003e2018-11-15 18:00\u003c/end\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctagged\u003eCS2103\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctagged\u003electure\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003c/scheduler\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 7,
      "vig42": 4,
      "-": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validCalendarEvent.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003ccalendarEvent\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003ctitle\u003eHans Muster\u003c/title\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003cdescription\u003e9482424\u003c/description\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    \u003cvenue\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003c/calendarEvent\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "vig42": 4,
      "-": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validScheduler.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003cscheduler\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eHans Muster\u003c/title\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e9482424\u003c/description\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eRuth Mueller\u003c/title\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e87249245\u003c/description\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e81th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eHeinz Kurz\u003c/title\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e95352563\u003c/description\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003ewall street\u003c/venue\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eCornelia Meier\u003c/title\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e87652533\u003c/description\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e10th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eWerner Meyer\u003c/title\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e9482224\u003c/description\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003emichegan ave\u003c/venue\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eLydia Kunz\u003c/title\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e9482427\u003c/description\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003elittle tokyo\u003c/venue\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eAnna Best\u003c/title\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e9482442\u003c/description\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003e4th street\u003c/venue\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eStefan Meier\u003c/title\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e8482424\u003c/description\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003elittle india\u003c/venue\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003ccalendarEvents\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003ctitle\u003eMartin Mueller\u003c/title\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cdescription isPrivate\u003d\"false\"\u003e8482131\u003c/description\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cstart\u003e2018-10-16 14:00\u003c/start\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "        \u003cend\u003e2018-10-16 16:00\u003c/end\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \u003cvenue isPrivate\u003d\"false\"\u003echicago ave\u003c/venue\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "    \u003c/calendarEvents\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "\u003c/scheduler\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 27,
      "vig42": 38,
      "-": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CalendarDisplayHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import jfxtras.internal.scene.control.skin.agenda.AgendaWeekSkin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import jfxtras.scene.control.agenda.Agenda;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * A handle to the {@code CalendarDisplay} in the GUI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * The limitations of this class are that the agenda ui cannot be access through ui."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * Therefore, most of the methods get the state of the agenda ui through its data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "public class CalendarDisplayHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String CALENDAR_DISPLAY_BOX_ID \u003d \"#calendarDisplayBox\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String CALENDAR_DISPLAY_ID \u003d \"#agenda\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private Agenda agenda;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public CalendarDisplayHandle(Node calendarDisplayBox) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        super(calendarDisplayBox);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        agenda \u003d getChildNode(CALENDAR_DISPLAY_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public LocalDateTime getDisplayedLocalDateTime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return agenda.getDisplayedLocalDateTime();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Gets the list of events that the calendar is currently displaying."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public List\u003cCalendarEvent\u003e getDisplayedCalendarEvents() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        ArrayList\u003cCalendarEvent\u003e calendarEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        for (Agenda.Appointment appointment : agenda.appointments()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            if (appointment instanceof CalendarEvent) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                calendarEvents.add((CalendarEvent) appointment);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return calendarEvents;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public boolean isWeeklyView() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return agenda.getSkin() instanceof AgendaWeekSkin;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 50
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CalendarEventCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Provides a handle to a calendar event card in the calendar event list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class CalendarEventCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String TITLE_FIELD_ID \u003d \"#title\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String VENUE_FIELD_ID \u003d \"#venue\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final Label titleLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final Label venueLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final Label descriptionLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CalendarEventCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        titleLabel \u003d getChildNode(TITLE_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        venueLabel \u003d getChildNode(VENUE_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptionLabel \u003d getChildNode(DESCRIPTION_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Label.class::cast)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return titleLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return venueLabel.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return descriptionLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Label::getText)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns true if this handle contains {@code calendarevent}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public boolean equals(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return getTitle().equals(calendarEvent.getTitle().value)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u0026\u0026 getVenue().equals(calendarEvent.getVenue().value)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            \u0026\u0026 getDescription().equals(calendarEvent.getDescriptionObject().value)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "            \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(calendarEvent.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 17,
      "vig42": 7,
      "pangjiahao": 1,
      "-": 54
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CalendarEventDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * Provides a handle to a calendar event dialog."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "public class CalendarEventDialogHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final String TITLE_FIELD_ID \u003d \"#title\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final String VENUE_FIELD_ID \u003d \"#venue\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final String DATETIME_FIELD_ID \u003d \"#dateTime\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private Label titleLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private Label descriptionLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private Label venueLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private Label dateTimeLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public CalendarEventDialogHandle(Node dialogNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        super(dialogNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        titleLabel \u003d getChildNode(TITLE_FIELD_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        descriptionLabel \u003d getChildNode(DESCRIPTION_FIELD_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        venueLabel \u003d getChildNode(VENUE_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        dateTimeLabel \u003d getChildNode(DATETIME_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return titleLabel.getText();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return descriptionLabel.getText();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return venueLabel.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public String getDateTimeString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return dateTimeLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Returns true if this dialog handle contains {@code calendarevent}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public boolean equals(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return getTitle().equals(calendarEvent.getTitle().value)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            \u0026\u0026 getDescription().equals(calendarEvent.getDescriptionObject().value)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            \u0026\u0026 getVenue().equals(calendarEvent.getVenue().value)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            \u0026\u0026 getDateTimeString().equals(calendarEvent.getStartLocalDateTime().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 55
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CalendarPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Provides a handle for {@code CalendarPanel} containing the list of {@code CalendarEventCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class CalendarPanelHandle extends NodeHandle\u003cListView\u003cCalendarEvent\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String CALENDAR_VIEW_ID \u003d \"#calendarView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private Optional\u003cCalendarEvent\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public CalendarPanelHandle(ListView\u003cCalendarEvent\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns a handle to the selected {@code CalendarEventCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError        if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CalendarEventCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cCalendarEvent\u003e selectedCalendarEventList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (selectedCalendarEventList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new AssertionError(\"CalendarEvent list size expected 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .map(CalendarEventCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .filter(handle -\u003e handle.equals(selectedCalendarEventList.get(0)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cCalendarEvent\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Navigates the listview to display {@code calendarevent}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void navigateToCard(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!getRootNode().getItems().contains(calendarEvent)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new IllegalArgumentException(\"CalendarEvent does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "            getRootNode().scrollTo(calendarEvent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Selects the {@code CalendarEventCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns the calendarevent card handle of a calendarevent associated with the {@code index} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CalendarEventCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .map(CalendarEventCardHandle::new)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private CalendarEvent getPerson(int index) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Remembers the selected {@code CalendarEventCard} in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void rememberSelectedCalendarEventCard() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cCalendarEvent\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns true if the selected {@code CalendarEventCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * {@code rememberSelectedCalendarEventCard()} call."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public boolean isSelectedCalendarEventCardChanged() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cCalendarEvent\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 9,
      "vig42": 24,
      "-": 128
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DescriptionDisplayHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " * Provides a handle to a calendar event dialog."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "public class DescriptionDisplayHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private Label idLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private TextArea descriptionTextArea;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public DescriptionDisplayHandle(Node dialogNode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        super(dialogNode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        descriptionTextArea \u003d getChildNode(DESCRIPTION_FIELD_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return descriptionTextArea.getText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Returns true if this description display handle contains {@code calendarevent}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public boolean equals(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return getDescription().equals(toDoListEvent.getDescription().value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 39
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final CalendarPanelHandle calendarPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final TaskListPanelHandle toDoListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private final CalendarDisplayHandle calendarDisplay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        calendarPanel \u003d new CalendarPanelHandle(getChildNode(CalendarPanelHandle.CALENDAR_VIEW_ID));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoListPanel \u003d new TaskListPanelHandle(getChildNode(TaskListPanelHandle.TODOLIST_VIEW_ID));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        calendarDisplay \u003d new CalendarDisplayHandle(getChildNode(CalendarDisplayHandle.CALENDAR_DISPLAY_BOX_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public CalendarPanelHandle getCalendarPanel() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return calendarPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public TaskListPanelHandle getToDoListPanel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return toDoListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public CalendarDisplayHandle getCalendarDisplay() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return calendarDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 4,
      "pangjiahao": 4,
      "SleepySanjinLi": 4,
      "-": 33
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Provides a handle for {@code TaskListPanel} containing the list of {@code ToDoListEventCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class TaskListPanelHandle extends NodeHandle\u003cListView\u003cToDoListEvent\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String TODOLIST_VIEW_ID \u003d \"#toDoListView\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPaneToDo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Optional\u003cToDoListEvent\u003e lastRememberedSelectedToDoListEventCard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public TaskListPanelHandle(ListView\u003cToDoListEvent\u003e taskListPanelNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        super(taskListPanelNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns a handle to the selected {@code ToDoListEventCardHandle}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @throws AssertionError        if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListEventCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        List\u003cToDoListEvent\u003e selectedToDoListEventList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (selectedToDoListEventList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"ToDoList size expected 1.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .map(ToDoListEventCardHandle::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .filter(handle -\u003e handle.equals(selectedToDoListEventList.get(0)))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        List\u003cToDoListEvent\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Navigates the listview to display {@code todolistevent}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void navigateToCard(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (!getRootNode().getItems().contains(toDoListEvent)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new IllegalArgumentException(\"ToDoListEvent does not exist.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            getRootNode().scrollTo(toDoListEvent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Selects the {@code ToDoListEventCard} at {@code index} in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns the todolistevent card handle of a todolistevent associated with the {@code index} in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListEventCardHandle getToDoListCardHandle(int index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .map(ToDoListEventCardHandle::new)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .filter(handle -\u003e handle.equals(getToDoListEvent(index)))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private ToDoListEvent getToDoListEvent(int index) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Remembers the selected {@code ToDoListEventCard} in the list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void rememberSelectedToDoListCard() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        List\u003cToDoListEvent\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            lastRememberedSelectedToDoListEventCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            lastRememberedSelectedToDoListEventCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns true if the selected {@code ToDoListEventCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code rememberSelectedToDoListCard()} call."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean isSelectedToDolistCardChanged() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        List\u003cToDoListEvent\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return lastRememberedSelectedToDoListEventCard.isPresent();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return !lastRememberedSelectedToDoListEventCard.isPresent()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                || !lastRememberedSelectedToDoListEventCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 1,
      "SleepySanjinLi": 161
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ToDoListEventCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Provides a handle to a todolist event card in the task panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ToDoListEventCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final String TITLE_FIELD_ID \u003d \"#title\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final String PRIORITY_FIELD_ID \u003d \"#priority\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final Label titleLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final Label priorityLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListEventCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        titleLabel \u003d getChildNode(TITLE_FIELD_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        priorityLabel \u003d getChildNode(PRIORITY_FIELD_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return titleLabel.getText();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public String getPriority() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String priority \u003d priorityLabel.getText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        if (priority.contains(\"High\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return \"H\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } else if (priority.contains(\"Medium\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return \"M\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return \"L\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns true if this handle contains {@code toDoListevent}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public boolean equals(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return getTitle().equals(toDoListEvent.getTitle().value)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \u0026\u0026 getPriority().equals(toDoListEvent.getPriority().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelManagerToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.model.ReadOnlyToDoList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ToDoList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.storage.XmlSerializableScheduler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.storage.XmlSerializableToDoList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING_TODO \u003d TestUtil.getFilePathInSandboxFolder(\"sampleDataToDo.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    protected Supplier\u003cReadOnlyScheduler\u003e initialDataSupplierCalendarEvent \u003d () -\u003e null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    protected Supplier\u003cReadOnlyToDoList\u003e initialDataSupplierToDo \u003d () -\u003e null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    protected Path saveFileLocationCalendarEvent \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    protected Path saveFileLocationToDo \u003d SAVE_LOCATION_FOR_TESTING_TODO;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyScheduler\u003e initialDataSupplierCalendarEvent,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                   Supplier\u003cReadOnlyToDoList\u003e initialDataSupplierToDo,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                   Path saveFileLocationCalendarEvent,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                   Path saveFileLocationToDo) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        this.initialDataSupplierCalendarEvent \u003d initialDataSupplierCalendarEvent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        this.saveFileLocationCalendarEvent \u003d saveFileLocationCalendarEvent;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        this.initialDataSupplierToDo \u003d initialDataSupplierToDo;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        this.saveFileLocationToDo \u003d saveFileLocationToDo;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // If some initial local data has been provided, write those to the files"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        if (initialDataSupplierCalendarEvent.get() !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            createDataFileWithData(new XmlSerializableScheduler(this.initialDataSupplierCalendarEvent.get()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                this.saveFileLocationCalendarEvent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        if (initialDataSupplierCalendarEvent.get() !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            createDataFileWithData(new XmlSerializableToDoList(this.initialDataSupplierToDo.get()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                this.saveFileLocationToDo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        userPrefs.setSchedulerFilePath(saveFileLocationCalendarEvent);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        userPrefs.setToDoListFilePath(saveFileLocationToDo);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Returns a defensive copy of the scheduler data stored inside the storage file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public Scheduler readStorageScheduler() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return new Scheduler(storage.readScheduler().get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new AssertionError(\"Data is not in the Scheduler format.\", dce);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns a defensive copy of the todolist data stored inside the storage file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoList readStorageToDoList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return new ToDoList(storage.readToDoList().get());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"Data is not in the ToDoList format.\", dce);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return storage.getSchedulerFilePath();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns the todolist file path of the storage file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public Path getStorageSaveLocationToDo() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return storage.getToDoListFilePath();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * The new Model has the same predicate and comparator, and thus the same filters and sorting"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * as the original {@code ObservableList}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return new ModelManager(model.getScheduler(), new UserPrefs(), model.getPredicate(), model.getComparator());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns a defensive copy of the modelToDo."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ModelToDo getModelToDo() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return new ModelManagerToDo(modelToDo.getToDoList(), new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 8,
      "vig42": 8,
      "pangjiahao": 26,
      "SleepySanjinLi": 16,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : U-Schedule\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            + \"Preference file Venue : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/calendar.png\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 1,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                                       Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void assertExceptionThrownFuzzy(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                       Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "        StringUtil.fuzzyMatchScore(sentence, word);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 7,
      "-": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.storage.XmlAdaptedCalendarEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.storage.XmlSerializableScheduler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.SchedulerBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validScheduler.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final Path MISSING_CALENDAR_EVENT_FIELD_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .resolve(\"missingCalendarEventField\" + \".xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final Path INVALID_CALENDAR_EVENT_FIELD_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .resolve(\"invalidCalendarEventField\" + \".xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final Path VALID_CALENDAR_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"validCalendarEvent.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempScheduler.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"9482424\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String VALID_START \u003d \"2018-10-16 14:00\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String VALID_END \u003d \"2018-10-16 16:00\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String VALID_VENUE \u003d \"4th street\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlUtil.getDataFromFile(null, Scheduler.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, Scheduler.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, Scheduler.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Scheduler dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableScheduler.class).toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(9, dataFromFile.getCalendarEventList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void xmlAdaptedCalendarEventFromFile_fileWithMissingCalendarEventField_validResult() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        XmlAdaptedCalendarEvent actualCalendarEvent \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "            MISSING_CALENDAR_EVENT_FIELD_FILE, XmlAdaptedCalendarEventWithRootElement.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        XmlAdaptedCalendarEvent expectedCalendarEvent \u003d new XmlAdaptedCalendarEvent("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "            null, VALID_DESCRIPTION, VALID_START, VALID_END, VALID_VENUE, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedCalendarEvent, actualCalendarEvent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void xmlAdaptedCalendarEventFromFile_fileWithInvalidCalendarEventField_validResult() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        XmlAdaptedCalendarEvent actualCalendarEvent \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            XmlUtil.getDataFromFile(INVALID_CALENDAR_EVENT_FIELD_FILE, XmlAdaptedCalendarEventWithRootElement.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        XmlAdaptedCalendarEvent expectedCalendarEvent \u003d new XmlAdaptedCalendarEvent("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "            VALID_TITLE, INVALID_DESCRIPTION, VALID_START, VALID_END, VALID_VENUE, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedCalendarEvent, actualCalendarEvent);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void xmlAdaptedCalendarEventFromFile_fileWithValidCalendarEvent_validResult() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        XmlAdaptedCalendarEvent actualCalendarEvent \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "            VALID_CALENDAR_EVENT_FILE, XmlAdaptedCalendarEventWithRootElement.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        XmlAdaptedCalendarEvent expectedCalendarEvent \u003d new XmlAdaptedCalendarEvent("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "            VALID_TITLE, VALID_DESCRIPTION, VALID_START, VALID_END, VALID_VENUE, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedCalendarEvent, actualCalendarEvent);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlUtil.saveDataToFile(null, new Scheduler());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new Scheduler());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlSerializableScheduler dataToWrite \u003d new XmlSerializableScheduler(new Scheduler());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlSerializableScheduler dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableScheduler.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        SchedulerBuilder builder \u003d new SchedulerBuilder(new Scheduler());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vig42"
        },
        "content": "        dataToWrite \u003d new XmlSerializableScheduler("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            builder.withCalendarEvent(new CalendarEventBuilder().build()).build());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableScheduler.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * XmlAdaptedCalendarEvent}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @XmlRootElement(name \u003d \"calendarEvent\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static class XmlAdaptedCalendarEventWithRootElement extends XmlAdaptedCalendarEvent {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 26,
      "vig42": 28,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TODOLIST_EVENTS_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.AddToDoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.ListEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelManagerToDo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.ToDoListEventBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private ModelToDo modelToDo \u003d new ModelManagerToDo();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Logic logic \u003d new LogicManager(model, modelToDo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void execute_invalidCommandToDoFormat_throwsParseToDoException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String invalidCommand \u003d \"lihtf\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseToDoException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String deleteCommand \u003d \"delete event 9\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX); // test failing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void execute_commandToDoExecutionError_throwsCommandToDoException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String deleteToDoCommand \u003d \"delete todo 9\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandToDoException(deleteToDoCommand, MESSAGE_INVALID_TODOLIST_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertHistoryCorrect(deleteToDoCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String listCommand \u003d ListEventCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(listCommand, ListEventCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void execute_validCommandToDo_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent validToDoListEvent \u003d new ToDoListEventBuilder().withTitle(\"CS\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"aaa\").withPriority(\"L\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String event \u003d \" t/CS d/aaa p/L\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String addToDoCommand \u003d AddToDoCommand.COMMAND_WORD + event;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandToDoSuccess(addToDoCommand, String.format(AddToDoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            validToDoListEvent.toString()), modelToDo);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertHistoryCorrect(addToDoCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "        logic.getFilteredCalendarEventList().remove(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void getFilteredToDoList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        logic.getFilteredToDoListEventList().remove(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Executes the commandToDo, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see #assertCommandToDoBehavior(Class, String, String, ModelToDo)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertCommandToDoSuccess(String inputCommand, String expectedMessage, ModelToDo expectedModel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandToDoBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Executes the commandToDo, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see #assertCommandToDoBehavior(Class, String, String, ModelToDo)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertParseToDoException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandToDoFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Executes the commandToDo, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see #assertCommandToDoBehavior(Class, String, String, ModelToDo)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertCommandToDoException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandToDoFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Executes the commandToDo, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see #assertCommandToDoBehavior(Class, String, String, ModelToDo)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertCommandToDoFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelToDo expectedModel \u003d new ModelManagerToDo(modelToDo.getToDoList(), new UserPrefs());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandToDoBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                                       String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Executes the commandToDo, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * - {@code expectedModel}\u0027s todolist was saved to the storage file."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertCommandToDoBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                                           String expectedMessage, ModelToDo expectedModel) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "vig42"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedModel, modelToDo);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 9,
      "vig42": 4,
      "SleepySanjinLi": 95,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddEventCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class AddEventCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void execute_newCalendarEvent_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent validCalendarEvent \u003d new CalendarEventBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.addCalendarEvent(validCalendarEvent);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(new AddEventCommand(validCalendarEvent), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            String.format(AddEventCommand.MESSAGE_SUCCESS, validCalendarEvent), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void execute_duplicateCalendarEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent calendarEventInList \u003d model.getScheduler().getCalendarEventList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(new AddEventCommand(calendarEventInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            AddEventCommand.MESSAGE_DUPLICATE_CALENDAR_EVENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 11,
      "vig42": 6,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void constructor_nullCalendarEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        new AddEventCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void execute_calendarEventAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        ModelStubAcceptingCalendarEventAdded modelStub \u003d new ModelStubAcceptingCalendarEventAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent validCalendarEvent \u003d new CalendarEventBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validCalendarEvent).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validCalendarEvent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(Arrays.asList(validCalendarEvent), modelStub.calendarEventsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void execute_duplicateCalendarEvent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent validCalendarEvent \u003d new CalendarEventBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validCalendarEvent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validCalendarEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        thrown.expectMessage(AddEventCommand.MESSAGE_DUPLICATE_CALENDAR_EVENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        addEventCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent lecture \u003d new CalendarEventBuilder().withTitle(\"Lecture\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent tutorial \u003d new CalendarEventBuilder().withTitle(\"Tutorial\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        AddEventCommand addLectureCommand \u003d new AddEventCommand(lecture);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        AddEventCommand addTutorialCommand \u003d new AddEventCommand(tutorial);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(addLectureCommand.equals(addLectureCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        AddEventCommand addAliceCommandCopy \u003d new AddEventCommand(lecture);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(addLectureCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(addLectureCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(addLectureCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different calendarevent -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(addLectureCommand.equals(addTutorialCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public void addCalendarEvent(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public void resetData(ReadOnlyScheduler newData) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public ReadOnlyScheduler getScheduler() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public boolean hasCalendarEvent(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public void deleteCalendarEvent(CalendarEvent target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public void updateCalendarEvent(CalendarEvent target, CalendarEvent editedCalendarEvent) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public ObservableList\u003cCalendarEvent\u003e getFullCalendarEventList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public ObservableList\u003cCalendarEvent\u003e getFilteredAndSortedCalendarEventList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public void updateFilteredCalendarEventList(Predicate\u003cCalendarEvent\u003e... predicate) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vig42"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public void sortFilteredCalendarEventList(Comparator\u003cCalendarEvent\u003e comparator) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public void clearAllPredicatesAndComparators() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "vig42"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public Predicate\u003c? super CalendarEvent\u003e getPredicate() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public Comparator\u003c? super CalendarEvent\u003e getComparator() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "vig42"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public boolean canUndoScheduler() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public boolean canRedoScheduler() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public void undoScheduler() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public void redoScheduler() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public void commitScheduler() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * A Model stub that contains a single calendar event."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "vig42"
        },
        "content": "        private final CalendarEvent calendarEvent;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        ModelStubWithEvent(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "vig42"
        },
        "content": "            requireNonNull(calendarEvent);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "vig42"
        },
        "content": "            this.calendarEvent \u003d calendarEvent;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public boolean hasCalendarEvent(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "vig42"
        },
        "content": "            requireNonNull(calendarEvent);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return this.calendarEvent.isSameCalendarEvent(calendarEvent);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * A Model stub that always accepts the calendar event being added."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private class ModelStubAcceptingCalendarEventAdded extends ModelStub {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        final ArrayList\u003cCalendarEvent\u003e calendarEventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public boolean hasCalendarEvent(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "vig42"
        },
        "content": "            requireNonNull(calendarEvent);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            return calendarEventsAdded.stream().anyMatch(calendarEvent::isSameCalendarEvent);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public void addCalendarEvent(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "vig42"
        },
        "content": "            requireNonNull(calendarEvent);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            calendarEventsAdded.add(calendarEvent);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public void commitScheduler() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            // called by {@code AddEventCommand#execute()}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public ReadOnlyScheduler getScheduler() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return new Scheduler();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 35,
      "vig42": 53,
      "pangjiahao": 4,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddToDoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ReadOnlyToDoList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ToDoList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.ToDoListEventBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class AddToDoCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void constructor_nullToDoListEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        new AddToDoCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void execute_toDoListEventAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelStubAcceptingToDoAdded modelStub \u003d new ModelStubAcceptingToDoAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent validToDoListEvent \u003d new ToDoListEventBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        CommandResult commandResult \u003d new AddToDoCommand(validToDoListEvent).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(String.format(AddToDoCommand.MESSAGE_SUCCESS, validToDoListEvent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(Arrays.asList(validToDoListEvent), modelStub.toDoListEventsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void execute_duplicateToDoListEvent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent validToDoListEvent \u003d new ToDoListEventBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        AddToDoCommand addToDoCommand \u003d new AddToDoCommand(validToDoListEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithToDoEvent(validToDoListEvent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expectMessage(AddToDoCommand.MESSAGE_DUPLICATE_TODO_EVENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        addToDoCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent project \u003d new ToDoListEventBuilder().withTitle(\"CS2103 Project\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent demo \u003d new ToDoListEventBuilder().withTitle(\"CS2103 demo\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        AddToDoCommand addProjectCommand \u003d new AddToDoCommand(project);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        AddToDoCommand addDemoCommand \u003d new AddToDoCommand(demo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(addProjectCommand.equals(addProjectCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        AddToDoCommand addProjectCommandCopy \u003d new AddToDoCommand(project);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(addProjectCommand.equals(addProjectCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(addProjectCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(addProjectCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different todolistevent -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(addProjectCommand.equals(addDemoCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private class ModelStub implements ModelToDo {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public void addToDoListEvent(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public void resetData(ReadOnlyToDoList newData) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public ReadOnlyToDoList getToDoList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public boolean hasToDoListEvent(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public void deleteToDoListEvent(ToDoListEvent target) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public void updateToDoListEvent(ToDoListEvent target, ToDoListEvent editedToDoListEvent) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public ObservableList\u003cToDoListEvent\u003e getFilteredToDoListEventList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public void updateFilteredToDoListEventList(Predicate\u003cToDoListEvent\u003e predicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public void commitToDoList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * A Model stub that contains a single todolistevent."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private class ModelStubWithToDoEvent extends ModelStub {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        private final ToDoListEvent toDoListEvent;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelStubWithToDoEvent(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            requireNonNull(toDoListEvent);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            this.toDoListEvent \u003d toDoListEvent;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public boolean hasToDoListEvent(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            requireNonNull(toDoListEvent);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return this.toDoListEvent.isSameToDoListEvent(toDoListEvent);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * A Model stub that always accept the todolistevent being added."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private class ModelStubAcceptingToDoAdded extends ModelStub {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        final ArrayList\u003cToDoListEvent\u003e toDoListEventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public boolean hasToDoListEvent(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            requireNonNull(toDoListEvent);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return toDoListEventsAdded.stream().anyMatch(toDoListEvent::isSameToDoListEvent);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public void addToDoListEvent(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            requireNonNull(toDoListEvent);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            toDoListEventsAdded.add(toDoListEvent);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public ReadOnlyToDoList getToDoList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return new ToDoList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 180
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCalendarCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class ClearCalendarCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void execute_emptyCalendar_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandSuccess(new ClearCalendarCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            ClearCalendarCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void execute_nonEmptyCalendar_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.resetData(new Scheduler());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandSuccess(new ClearCalendarCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            ClearCalendarCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 5,
      "vig42": 5,
      "SleepySanjinLi": 4,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ToDoList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.FuzzySearchFilterPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.TitleToDoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.EditCalendarEventDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String VALID_TITLE_LECTURE \u003d \"CS2103 Lecture\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String VALID_TITLE_TUTORIAL \u003d \"JS1011 Tutorial\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String VALID_TITLE_MIDTERM \u003d \"CS2103 Midterm\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String VALID_TITLE_ASSIGNMENT \u003d \"CS3230 assignment\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String VALID_TITLE_SEMINAR \u003d \"FIN3101 Seminar\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String VALID_DESCRIPTION_LECTURE \u003d \"Abstraction, IntelliJ, Gradle\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String VALID_DESCRIPTION_TUTORIAL \u003d \"Monadic parsers\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String VALID_DESCRIPTION_MIDTERM \u003d \"cover all materials from week 1 to week 7\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String VALID_DESCRIPTION_ASSIGNMENT \u003d \"greedy algorithm\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String VALID_VENUE_LECTURE \u003d \"i3 Auditorium\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String VALID_VENUE_TUTORIAL \u003d \"COM1 02-09\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String VALID_TAG_LECTURE \u003d \"lecture\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String VALID_TAG_TUTORIAL \u003d \"tutorial\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String VALID_START_DATETIME_LECTURE \u003d \"2018-10-16 14:00\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String VALID_END_DATETIME_LECTURE \u003d \"2018-10-16 16:00\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String VALID_START_DATETIME_LECTURE_2 \u003d \"2018-11-15 16:00\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String VALID_END_DATETIME_LECTURE_2 \u003d \"2018-11-15 18:00\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String VALID_START_DATETIME_TUTORIAL \u003d \"2018-10-18 10:00\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String VALID_END_DATETIME_TUTORIAL \u003d \"2018-10-18 11:00\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String VALID_PRIORITY_TUTORIAL \u003d \"L\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String VALID_PRIORITY_LECTURE \u003d \"H\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String VALID_PRIORITY_MIDTERM \u003d \"H\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String VALID_PRIORITY_ASSIGNMENT \u003d \"M\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String TITLE_DESC_LECTURE \u003d \" \" + PREFIX_TITLE + VALID_TITLE_LECTURE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String TITLE_DESC_TUTORIAL \u003d \" \" + PREFIX_TITLE + VALID_TITLE_TUTORIAL;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String TITLE_DESC_MIDTERM \u003d \" \" + PREFIX_TITLE + VALID_TITLE_MIDTERM;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String TITLE_DESC_ASSIGNMENT \u003d \" \" + PREFIX_TITLE + VALID_TITLE_ASSIGNMENT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String DESCRIPTION_DESC_LECTURE \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_LECTURE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String DESCRIPTION_DESC_TUTORIAL \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String DESCRIPTION_DESC_MIDTERM \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_MIDTERM;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String DESCRIPTION_DESC_ASSIGNMENT \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_ASSIGNMENT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String PRIORITY_DESC_LECTURE \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_LECTURE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String PRIORITY_DESC_TUTORIAL \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String PRIORITY_DESC_MIDTERM \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_MIDTERM;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String PRIORITY_DESC_ASSIGNMENT \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_ASSIGNMENT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String START_DESC_LECTURE \u003d \" \" + PREFIX_START + VALID_START_DATETIME_LECTURE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String START_DESC_LECTURE_2 \u003d \" \" + PREFIX_START + VALID_START_DATETIME_LECTURE_2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String START_DESC_TUTORIAL \u003d \" \" + PREFIX_START + VALID_START_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String END_DESC_LECTURE \u003d \" \" + PREFIX_END + VALID_END_DATETIME_LECTURE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String END_DESC_LECTURE_2 \u003d \" \" + PREFIX_END + VALID_END_DATETIME_LECTURE_2;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String END_DESC_TUTORIAL \u003d \" \" + PREFIX_END + VALID_END_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String VENUE_DESC_LECTURE \u003d \" \" + PREFIX_VENUE + VALID_VENUE_LECTURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String VENUE_DESC_TUTORIAL \u003d \" \" + PREFIX_VENUE + VALID_VENUE_TUTORIAL;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String TAG_DESC_TUTORIAL \u003d \" \" + PREFIX_TAG + VALID_TAG_TUTORIAL;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String TAG_DESC_LECTURE \u003d \" \" + PREFIX_TAG + VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String TITLE_1 \u003d \"CS100\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String DESCRIPTION_1 \u003d \"lovely\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String PRIORITY_1 \u003d \"L\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String TITLE_2 \u003d \"CS200\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String DESCRIPTION_2 \u003d \"awesome\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String PRIORITY_2 \u003d \"M\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String TITLE_3 \u003d \"CS300\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String DESCRIPTION_3 \u003d \"amazing\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String PRIORITY_3 \u003d \"H\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String TITLE_1_WITH_PREFIX \u003d \" \" + PREFIX_TITLE + TITLE_1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String DESCRIPTION_1_WITH_PREFIX \u003d \" \" + PREFIX_DESCRIPTION + DESCRIPTION_1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String PRIORITY_1_WITH_PREFIX \u003d \" \" + PREFIX_PRIORITY + PRIORITY_1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String TITLE_2_WITH_PREFIX \u003d \" \" + PREFIX_TITLE + TITLE_2;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String DESCRIPTION_2_WITH_PREFIX \u003d \" \" + PREFIX_DESCRIPTION + DESCRIPTION_2;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String PRIORITY_2_WITH_PREFIX \u003d \" \" + PREFIX_PRIORITY + PRIORITY_2;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String TITLE_3_WITH_PREFIX \u003d \" \" + PREFIX_TITLE + TITLE_3;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String DESCRIPTION_3_WITH_PREFIX \u003d \" \" + PREFIX_DESCRIPTION + DESCRIPTION_3;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String PRIORITY_3_WITH_PREFIX \u003d \" \" + PREFIX_PRIORITY + PRIORITY_3;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String INVALID_TODO_COMMAND_WORD \u003d \"adds\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \" q\"; // start with whitespace not allowed"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \" \"; // empty string not allowed"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"a\"; // other alphabet not allowed"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_START_DESC \u003d \" \" + PREFIX_START + \"asdf\"; // not a readable time"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_END_DESC \u003d \" \" + PREFIX_END + \"asdf\"; // wrong format for date"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String INVALID_VENUE_DESC \u003d \" \" + PREFIX_VENUE; // empty string not allowed"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final EditEventCommand.EditCalendarEventDescriptor DESC_LECTURE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final EditEventCommand.EditCalendarEventDescriptor DESC_TUTORIAL;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DESC_LECTURE \u003d new EditCalendarEventDescriptorBuilder().withTitle(VALID_TITLE_LECTURE)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_LECTURE).withStart(VALID_START_DATETIME_LECTURE)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withEnd(VALID_END_DATETIME_LECTURE).withVenue(VALID_VENUE_LECTURE)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withTags(VALID_TAG_TUTORIAL).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DESC_TUTORIAL \u003d new EditCalendarEventDescriptorBuilder().withTitle(VALID_TITLE_TUTORIAL)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_TUTORIAL).withStart(VALID_START_DATETIME_TUTORIAL)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withEnd(VALID_END_DATETIME_TUTORIAL).withVenue(VALID_VENUE_TUTORIAL)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withTags(VALID_TAG_LECTURE, VALID_TAG_TUTORIAL).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Executes the given {@code commandToDo}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static void assertCommandToDoSuccess(Command commandToDo, ModelToDo actualModel,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                                                CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                                                String expectedMessage, ModelToDo expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            CommandResult result \u003d commandToDo.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"Execution of commandToDo should not fail.\", ce);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * - the address book and the filtered calendarevent list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Scheduler expectedScheduler \u003d new Scheduler(actualModel.getScheduler());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cCalendarEvent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAndSortedCalendarEventList());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "vig42"
        },
        "content": "            assertEquals(expectedScheduler, actualModel.getScheduler());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "vig42"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredAndSortedCalendarEventList());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Executes the given {@code commandToDo}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * - a {@code CommandToDoException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * - the CommandToDoException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * - the todolist and the filtered todolistevent list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * - {@code actualCommandToDoHistory} remains unchanged."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static void assertCommandToDoFailure(Command commandToDo, ModelToDo actualModel,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                                                CommandHistory actualCommandHistory, String expectedMessage) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoList expectedToDoList \u003d new ToDoList(actualModel.getToDoList());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        List\u003cToDoListEvent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredToDoListEventList());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            commandToDo.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertEquals(expectedToDoList, actualModel.getToDoList());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredToDoListEventList());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the calendar event at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static void showCalendarEventAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAndSortedCalendarEventList().size());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent calendarEvent \u003d model.getFilteredAndSortedCalendarEventList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        final String[] splitTitle \u003d calendarEvent.getTitle().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.updateFilteredCalendarEventList(new FuzzySearchFilterPredicate(Arrays.asList(splitTitle[1])));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // fuzzy search may cause the size to be more than 1, e.g. CS2103 and CS2104 are similar words"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(1, model.getFilteredAndSortedCalendarEventList().size());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Updates {@code modelToDo}\u0027s filtered list to show only the todolist event at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code modelToDo}\u0027s todolist."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static void showToDoListEventAtIndex(ModelToDo modelToDo, Index targetIndex) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c modelToDo.getFilteredToDoListEventList().size());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent toDoListEvent \u003d modelToDo.getFilteredToDoListEventList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        final String[] splitTitle \u003d toDoListEvent.getTitle().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        modelToDo.updateFilteredToDoListEventList(new TitleToDoContainsKeywordsPredicate(Arrays.asList(splitTitle[0])));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(1, modelToDo.getFilteredToDoListEventList().size());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Deletes the first calendar event in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static void deleteFirstCalendarEvent(Model model) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent firstCalendarEvent \u003d model.getFilteredAndSortedCalendarEventList().get(0);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.deleteCalendarEvent(firstCalendarEvent);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.commitScheduler();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 25,
      "vig42": 44,
      "pangjiahao": 24,
      "SleepySanjinLi": 71,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCalendarEventAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * {@code DeleteEventCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class DeleteEventCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent calendarEventToDelete \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "            model.getFilteredAndSortedCalendarEventList().get(INDEX_FIRST_ELEMENT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_CALENDAR_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            calendarEventToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.deleteCalendarEvent(calendarEventToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(deleteEventCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAndSortedCalendarEventList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(deleteEventCommand, model, commandHistory,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventAtIndex(model, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent calendarEventToDelete \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "            model.getFilteredAndSortedCalendarEventList().get(INDEX_FIRST_ELEMENT.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_CALENDAR_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            calendarEventToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.deleteCalendarEvent(calendarEventToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showNoCalendarEvent(expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(deleteEventCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventAtIndex(model, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getScheduler().getCalendarEventList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(deleteEventCommand, model, commandHistory,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent calendarEventToDelete \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "            model.getFilteredAndSortedCalendarEventList().get(INDEX_FIRST_ELEMENT.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.deleteCalendarEvent(calendarEventToDelete);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // delete -\u003e first calendarevent deleted"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleteEventCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered calendarevent list to show all persons"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // redo -\u003e same first calendarevent deleted again"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.redoScheduler();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAndSortedCalendarEventList().size() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(deleteEventCommand, model, commandHistory,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * 1. Deletes a {@code CalendarEvent} from a filtered list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted calendar event in the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the calendar event object regardless of indexing."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameCalendarEventDeleted() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventAtIndex(model, INDEX_SECOND_ELEMENT);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent calendarEventToDelete \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "            model.getFilteredAndSortedCalendarEventList().get(INDEX_FIRST_ELEMENT.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.deleteCalendarEvent(calendarEventToDelete);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // delete -\u003e deletes second calendar event in unfiltered calendar event list / first calendar event in filtered"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // calendar event list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleteEventCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // undo -\u003e reverts scheduler back to previous state and filtered calendar event list to show all events"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertNotEquals(calendarEventToDelete,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vig42"
        },
        "content": "            model.getFilteredAndSortedCalendarEventList().get(INDEX_FIRST_ELEMENT.getZeroBased()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // redo -\u003e deletes same second calendar event in unfiltered calendar event list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.redoScheduler();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteEventCommand deleteFirstCommand \u003d new DeleteEventCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteEventCommand deleteSecondCommand \u003d new DeleteEventCommand(INDEX_SECOND_ELEMENT);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteEventCommand deleteFirstCommandCopy \u003d new DeleteEventCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different calendarevent -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private void showNoCalendarEvent(Model model) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.updateFilteredCalendarEventList(p -\u003e false);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(model.getFilteredAndSortedCalendarEventList().isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 45,
      "vig42": 36,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteToDoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandToDoFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandToDoSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showToDoListEventAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.getTypicalToDoList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelManagerToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class DeleteToDoCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private ModelToDo model \u003d new ModelManagerToDo(getTypicalToDoList(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent toDoListEventToDelete \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            model.getFilteredToDoListEventList().get(INDEX_FIRST_ELEMENT.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteToDoCommand deleteToDoCommand \u003d new DeleteToDoCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteToDoCommand.MESSAGE_DELETE_TODOLIST_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            toDoListEventToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelManagerToDo expectedModel \u003d new ModelManagerToDo(model.getToDoList(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        expectedModel.deleteToDoListEvent(toDoListEventToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        expectedModel.commitToDoList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandToDoSuccess(deleteToDoCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredToDoListEventList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        DeleteToDoCommand deleteToDoCommand \u003d new DeleteToDoCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandToDoFailure(deleteToDoCommand, model, commandHistory,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            Messages.MESSAGE_INVALID_TODOLIST_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showToDoListEventAtIndex(model, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent toDoListEventToDelete \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            model.getFilteredToDoListEventList().get(INDEX_FIRST_ELEMENT.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteToDoCommand deleteToDoCommand \u003d new DeleteToDoCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteToDoCommand.MESSAGE_DELETE_TODOLIST_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            toDoListEventToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelToDo expectedModel \u003d new ModelManagerToDo(model.getToDoList(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        expectedModel.deleteToDoListEvent(toDoListEventToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        expectedModel.commitToDoList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        showNoToDoListEvent(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandToDoSuccess(deleteToDoCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showToDoListEventAtIndex(model, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of todolist"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getToDoList().getToDoList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        DeleteToDoCommand deleteToDoCommand \u003d new DeleteToDoCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandToDoFailure(deleteToDoCommand, model, commandHistory,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            Messages.MESSAGE_INVALID_TODOLIST_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteToDoCommand deleteFirstToDoCommand \u003d new DeleteToDoCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteToDoCommand deleteSecondToDoCommand \u003d new DeleteToDoCommand(INDEX_SECOND_ELEMENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(deleteFirstToDoCommand.equals(deleteFirstToDoCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteToDoCommand deleteFirstToDoCommandCopy \u003d new DeleteToDoCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(deleteFirstToDoCommand.equals(deleteFirstToDoCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(deleteFirstToDoCommand.equals(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(deleteFirstToDoCommand.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different todolist event -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(deleteFirstToDoCommand.equals(deleteSecondToDoCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void showNoToDoListEvent(ModelToDo modelToDo) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        modelToDo.updateFilteredToDoListEventList(p -\u003e false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(modelToDo.getFilteredToDoListEventList().isEmpty());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 13,
      "SleepySanjinLi": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCalendarEventDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_LECTURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.EditCalendarEventDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class EditCalendarEventDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand.EditCalendarEventDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            new EditEventCommand.EditCalendarEventDescriptor(DESC_LECTURE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(DESC_LECTURE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(DESC_LECTURE.equals(DESC_LECTURE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DESC_LECTURE.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DESC_LECTURE.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DESC_LECTURE.equals(DESC_TUTORIAL));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand.EditCalendarEventDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            new EditCalendarEventDescriptorBuilder(DESC_LECTURE).withTitle(VALID_TITLE_TUTORIAL).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DESC_LECTURE.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        editedAmy \u003d new EditCalendarEventDescriptorBuilder(DESC_LECTURE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DESC_LECTURE.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // different venue -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        editedAmy \u003d new EditCalendarEventDescriptorBuilder(DESC_LECTURE).withVenue(VALID_VENUE_TUTORIAL).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DESC_LECTURE.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "        editedAmy \u003d new EditCalendarEventDescriptorBuilder(DESC_LECTURE).withTags(VALID_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DESC_LECTURE.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 23,
      "vig42": 3,
      "SleepySanjinLi": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCalendarEventAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand.EditCalendarEventDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.EditCalendarEventDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": " * and unit tests for EditEventCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class EditEventCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent editedCalendarEvent \u003d new CalendarEventBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditCalendarEventDescriptor descriptor \u003d new EditCalendarEventDescriptorBuilder(editedCalendarEvent).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_ELEMENT, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            EditEventCommand.MESSAGE_EDIT_CALENDAR_EVENT_SUCCESS, editedCalendarEvent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Scheduler(model.getScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.updateCalendarEvent(model.getFilteredAndSortedCalendarEventList().get(0), editedCalendarEvent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(editEventCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredAndSortedCalendarEventList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent lastCalendarEvent \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "                model.getFilteredAndSortedCalendarEventList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEventBuilder personInList \u003d new CalendarEventBuilder(lastCalendarEvent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent editedCalendarEvent \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            personInList.withTitle(VALID_TITLE_TUTORIAL).withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .withTags(VALID_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "        EditCalendarEventDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new EditCalendarEventDescriptorBuilder().withTitle(VALID_TITLE_TUTORIAL)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TUTORIAL).withTags(VALID_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "            String.format(EditEventCommand.MESSAGE_EDIT_CALENDAR_EVENT_SUCCESS, editedCalendarEvent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Scheduler(model.getScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.updateCalendarEvent(lastCalendarEvent, editedCalendarEvent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(editEventCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "        EditEventCommand editEventCommand \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new EditEventCommand(INDEX_FIRST_ELEMENT, new EditCalendarEventDescriptor());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent editedCalendarEvent \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "            model.getFilteredAndSortedCalendarEventList().get(INDEX_FIRST_ELEMENT.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_CALENDAR_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "            editedCalendarEvent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Scheduler(model.getScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(editEventCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventAtIndex(model, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent calendarEventInFilteredList \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "            model.getFilteredAndSortedCalendarEventList().get(INDEX_FIRST_ELEMENT.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent editedCalendarEvent \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            new CalendarEventBuilder(calendarEventInFilteredList).withTitle(VALID_TITLE_TUTORIAL).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_ELEMENT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            new EditCalendarEventDescriptorBuilder().withTitle(VALID_TITLE_TUTORIAL).build());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_CALENDAR_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "            editedCalendarEvent);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Scheduler(model.getScheduler()), new UserPrefs(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                                        model.getPredicate(), model.getComparator());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.updateCalendarEvent(model.getFilteredAndSortedCalendarEventList().get(0), editedCalendarEvent);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(editEventCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void execute_duplicateCalendarEventUnfilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent firstCalendarEvent \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "                model.getFilteredAndSortedCalendarEventList().get(INDEX_FIRST_ELEMENT.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditCalendarEventDescriptor descriptor \u003d new EditCalendarEventDescriptorBuilder(firstCalendarEvent).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_SECOND_ELEMENT, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(editEventCommand, model, commandHistory,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            EditEventCommand.MESSAGE_DUPLICATE_CALENDAR_EVENT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void execute_duplicateCalendarEventFilteredList_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventAtIndex(model, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // edit calendarevent in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent calendarEventInList \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            model.getScheduler().getCalendarEventList().get(INDEX_SECOND_ELEMENT.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_ELEMENT,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            new EditCalendarEventDescriptorBuilder(calendarEventInList).build());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(editEventCommand, model, commandHistory,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            EditEventCommand.MESSAGE_DUPLICATE_CALENDAR_EVENT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void execute_invalidCalendarEventIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAndSortedCalendarEventList().size() + 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditCalendarEventDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            new EditCalendarEventDescriptorBuilder().withTitle(VALID_TITLE_TUTORIAL).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(editEventCommand, model, commandHistory,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void execute_invalidCalendarEventIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventAtIndex(model, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getScheduler().getCalendarEventList().size());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            new EditCalendarEventDescriptorBuilder().withTitle(VALID_TITLE_TUTORIAL).build());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(editEventCommand, model, commandHistory,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent editedCalendarEvent \u003d new CalendarEventBuilder().build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent calendarEventToEdit \u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "vig42"
        },
        "content": "            model.getFilteredAndSortedCalendarEventList().get(INDEX_FIRST_ELEMENT.getZeroBased());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditCalendarEventDescriptor descriptor \u003d new EditCalendarEventDescriptorBuilder(editedCalendarEvent).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_ELEMENT, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Scheduler(model.getScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.updateCalendarEvent(calendarEventToEdit, editedCalendarEvent);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // edit -\u003e first calendarevent edited"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        editEventCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered calendarevent list to show all persons"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // redo -\u003e same first calendarevent edited again"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.redoScheduler();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAndSortedCalendarEventList().size() + 1);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditCalendarEventDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            new EditCalendarEventDescriptorBuilder().withTitle(VALID_TITLE_TUTORIAL).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(editEventCommand, model, commandHistory,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * 1. Edits a {@code CalendarEvent} from a filtered list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited calendarevent in the"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the calendarevent object regardless of indexing."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent editedCalendarEvent \u003d new CalendarEventBuilder().build();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditCalendarEventDescriptor descriptor \u003d new EditCalendarEventDescriptorBuilder(editedCalendarEvent).build();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand editEventCommand \u003d new EditEventCommand(INDEX_FIRST_ELEMENT, descriptor);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Scheduler(model.getScheduler()), new UserPrefs());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventAtIndex(model, INDEX_SECOND_ELEMENT);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent calendarEventToEdit \u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "vig42"
        },
        "content": "            model.getFilteredAndSortedCalendarEventList().get(INDEX_FIRST_ELEMENT.getZeroBased());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.updateCalendarEvent(calendarEventToEdit, editedCalendarEvent);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.commitScheduler();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // edit -\u003e edits second calendarevent in unfiltered calendarevent list / first calendarevent in filtered"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // calendarevent list"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        editEventCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered calendarevent list to show all persons"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertNotEquals(model.getFilteredAndSortedCalendarEventList().get(INDEX_FIRST_ELEMENT.getZeroBased()),"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            calendarEventToEdit);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // redo -\u003e edits same second calendarevent in unfiltered calendarevent list"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.redoScheduler();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        final EditEventCommand standardCommand \u003d new EditEventCommand(INDEX_FIRST_ELEMENT, DESC_LECTURE);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditCalendarEventDescriptor copyDescriptor \u003d new EditCalendarEventDescriptor(DESC_LECTURE);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand commandWithSameValues \u003d new EditEventCommand(INDEX_FIRST_ELEMENT, copyDescriptor);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCalendarCommand()));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_SECOND_ELEMENT, DESC_LECTURE)));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_FIRST_ELEMENT, DESC_TUTORIAL)));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 75,
      "vig42": 64,
      "SleepySanjinLi": 6,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CALENDAR_EVENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CAREER_FAIR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CHOIR_PRACTICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2040_LAB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2103_LECTURE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2104_TUTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.FIN3101_SEMINAR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.GOOGLE_INTERVIEW;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DatePredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.FuzzySearchComparator;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.FuzzySearchFilterPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.TagsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindEventCommand}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class FindEventCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new FuzzySearchFilterPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new FuzzySearchFilterPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchComparator firstComparator \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new FuzzySearchComparator(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchComparator secondComparator \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new FuzzySearchComparator(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate firstDatePredicate \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new DatePredicate(new DateTime(\"2018-11-10 20:00\"), new DateTime(\"2018-11-10 22:00\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate secondDatePredicate \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new DatePredicate(new DateTime(\"2018-11-11 20:00\"), new DateTime(\"2018-11-11 22:00\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        TagsPredicate firstTagsPredicate \u003d new TagsPredicate(new HashSet\u003c\u003e(Arrays.asList(\"tag1\", \"tag2\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "        TagsPredicate secondTagsPredicate \u003d new TagsPredicate(new HashSet\u003c\u003e(Arrays.asList(\"tag3\", \"tag4\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand findFirstCommand \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "                new FindEventCommand(firstPredicate, firstComparator, firstDatePredicate, firstTagsPredicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand findSecondCommand \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "                new FindEventCommand(secondPredicate, secondComparator, secondDatePredicate, secondTagsPredicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand findFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "                new FindEventCommand(firstPredicate, firstComparator, firstDatePredicate, firstTagsPredicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different find event command -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void execute_onlyKeywords_multipleCalendarEventsFound() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CALENDAR_EVENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate predicate \u003d preparePredicate(\"Lab Practice Fair\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        FuzzySearchComparator comparator \u003d prepareComparator(\"Lab Practice Fair\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate datePredicate \u003d prepareDatePredicate(\"\", \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "        TagsPredicate tagsPredicate \u003d prepareTagsPredicate(\"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate, comparator, datePredicate, tagsPredicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.updateFilteredCalendarEventList(predicate, datePredicate, tagsPredicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.sortFilteredCalendarEventList(comparator);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(Arrays.asList(CS2040_LAB, CHOIR_PRACTICE, CAREER_FAIR),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                model.getFilteredAndSortedCalendarEventList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void execute_onlyDates_multipleCalendarEventsFound() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CALENDAR_EVENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate predicate \u003d preparePredicate(\"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchComparator comparator \u003d prepareComparator(\"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate datePredicate \u003d prepareDatePredicate(\"16 nov 2018 0800\", \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "        TagsPredicate tagsPredicate \u003d prepareTagsPredicate(\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate, comparator, datePredicate, tagsPredicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.updateFilteredCalendarEventList(predicate, datePredicate, tagsPredicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.sortFilteredCalendarEventList(comparator);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(Arrays.asList(FIN3101_SEMINAR, CHOIR_PRACTICE, CAREER_FAIR),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                model.getFilteredAndSortedCalendarEventList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void execute_onlyTag_singleCalendarEventFound() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CALENDAR_EVENTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate predicate \u003d preparePredicate(\"\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchComparator comparator \u003d prepareComparator(\"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate datePredicate \u003d prepareDatePredicate(\"\", \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": "        TagsPredicate tagsPredicate \u003d prepareTagsPredicate(\"Lecture\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate, comparator, datePredicate, tagsPredicate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.updateFilteredCalendarEventList(predicate, datePredicate, tagsPredicate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.sortFilteredCalendarEventList(comparator);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(Arrays.asList(CS2103_LECTURE), model.getFilteredAndSortedCalendarEventList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void execute_keywordsAndDates_multipleCalendarEventFound() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CALENDAR_EVENTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate predicate \u003d preparePredicate(\"lecture Tutorial lab\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchComparator comparator \u003d prepareComparator(\"lecture Tutorial lab\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate datePredicate \u003d prepareDatePredicate(\"\", \"14 nov 2018 9am\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": "        TagsPredicate tagsPredicate \u003d prepareTagsPredicate(\"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate, comparator, datePredicate, tagsPredicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.updateFilteredCalendarEventList(predicate, datePredicate, tagsPredicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.sortFilteredCalendarEventList(comparator);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(Arrays.asList(CS2104_TUTORIAL, CS2040_LAB), model.getFilteredAndSortedCalendarEventList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void execute_keywordsAndTag_singleCalendarEventFound() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CALENDAR_EVENTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate predicate \u003d preparePredicate(\"CS2104\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchComparator comparator \u003d prepareComparator(\"CS2104\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate datePredicate \u003d prepareDatePredicate(\"\", \"\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "vig42"
        },
        "content": "        TagsPredicate tagsPredicate \u003d prepareTagsPredicate(\"tutorial\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate, comparator, datePredicate, tagsPredicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.updateFilteredCalendarEventList(predicate, datePredicate, tagsPredicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.sortFilteredCalendarEventList(comparator);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(Arrays.asList(CS2104_TUTORIAL), model.getFilteredAndSortedCalendarEventList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void execute_keywordsDatesAndTag_singleCalendarEventFound() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CALENDAR_EVENTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate predicate \u003d preparePredicate(\"google\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchComparator comparator \u003d prepareComparator(\"google\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate datePredicate \u003d prepareDatePredicate(\"11 nov 18 5pm\", \"18 nov 18 5pm\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "vig42"
        },
        "content": "        TagsPredicate tagsPredicate \u003d prepareTagsPredicate(\"interview\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate, comparator, datePredicate, tagsPredicate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.updateFilteredCalendarEventList(predicate, datePredicate, tagsPredicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.sortFilteredCalendarEventList(comparator);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(Arrays.asList(GOOGLE_INTERVIEW), model.getFilteredAndSortedCalendarEventList());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Parses {@code userInput} into a {@code FuzzySearchFilterPredicate}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private FuzzySearchFilterPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!userInput.isEmpty()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return new FuzzySearchFilterPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "vig42"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return new FuzzySearchFilterPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Parses {@code userInput} into a {@code FuzzySearchComparator}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private FuzzySearchComparator prepareComparator(String userInput) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (!userInput.isEmpty()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return new FuzzySearchComparator(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "vig42"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return new FuzzySearchComparator(Collections.emptyList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Parses {@code userInput} into a {@code DatePredicate}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private DatePredicate prepareDatePredicate(String userInputFrom, String userInputTo) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime dateFrom \u003d null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime dateTo \u003d null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "vig42"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "vig42"
        },
        "content": "            if (!userInputFrom.isEmpty()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "vig42"
        },
        "content": "                dateFrom \u003d ParserUtil.parseDateTime(userInputFrom);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "vig42"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "vig42"
        },
        "content": "            if (!userInputTo.isEmpty()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "vig42"
        },
        "content": "                dateTo \u003d ParserUtil.parseDateTime(userInputTo);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "vig42"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "vig42"
        },
        "content": "        } catch (ParseException E) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return new DatePredicate(null, null);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return new DatePredicate(dateFrom, dateTo);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Parses {@code userInput} into a {@code TagsPredicate}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private TagsPredicate prepareTagsPredicate(String userInput) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "vig42"
        },
        "content": "        userInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "vig42"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return new TagsPredicate(Collections.emptySet());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "vig42"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return new TagsPredicate(new HashSet\u003c\u003e(Arrays.asList(userInput.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 4,
      "vig42": 170,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCalendarEventAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListEventCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class ListEventCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(new ListEventCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "            ListEventCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventAtIndex(model, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(new ListEventCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "            ListEventCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 6,
      "vig42": 6,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstCalendarEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleteFirstCalendarEvent(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleteFirstCalendarEvent(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.undoScheduler();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.undoScheduler();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleteFirstCalendarEvent(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleteFirstCalendarEvent(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.redoScheduler();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.redoScheduler();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 6,
      "vig42": 8,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCalendarEventAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ELEMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectEventCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class SelectEventCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredAndSortedCalendarEventList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_ELEMENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredAndSortedCalendarEventList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventAtIndex(model, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventAtIndex(expectedModel, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventAtIndex(model, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventAtIndex(expectedModel, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getScheduler().getCalendarEventList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        SelectEventCommand selectFirstCommand \u003d new SelectEventCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        SelectEventCommand selectSecondCommand \u003d new SelectEventCommand(INDEX_SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        SelectEventCommand selectFirstCommandCopy \u003d new SelectEventCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different calendarevent -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Executes a {@code SelectEventCommand} with the given {@code index} and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        SelectEventCommand selectEventCommand \u003d new SelectEventCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String expectedMessage \u003d String.format(SelectEventCommand.MESSAGE_SELECT_CALENDAR_EVENT_SUCCESS,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            index.getOneBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(selectEventCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Executes a {@code SelectEventCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        SelectEventCommand selectEventCommand \u003d new SelectEventCommand(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(selectEventCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 26,
      "vig42": 8,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ShowDescriptionCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandToDoFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandToDoSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showToDoListEventAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.getTypicalToDoList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelManagerToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Contains integration tests (interaction with the ModelToDo) for {@code ShowDescriptionCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ShowDescriptionCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private ModelToDo modelToDo \u003d new ModelManagerToDo(getTypicalToDoList(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private ModelToDo expectedModelToDo \u003d new ModelManagerToDo(getTypicalToDoList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(modelToDo.getFilteredToDoListEventList().size() + 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TODOLIST_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        showToDoListEventAtIndex(modelToDo, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        showToDoListEventAtIndex(expectedModelToDo, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of to do list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c modelToDo.getToDoList().getToDoList().size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TODOLIST_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ShowDescriptionCommand showFirstCommand \u003d new ShowDescriptionCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ShowDescriptionCommand showSecondCommand \u003d new ShowDescriptionCommand(INDEX_SECOND_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(showFirstCommand.equals(showFirstCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ShowDescriptionCommand showFirstCommandCopy \u003d new ShowDescriptionCommand(INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(showFirstCommand.equals(showFirstCommandCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(showFirstCommand.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(showFirstCommand.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different todolistevent -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(showFirstCommand.equals(showSecondCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Executes a {@code ShowDescriptionCommand} with the given {@code index}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ShowDescriptionCommand showDescriptionCommand \u003d new ShowDescriptionCommand(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedMessage \u003d String.format(ShowDescriptionCommand.MESSAGE_SHOW_DESCRIPTION_TODO_SUCCESS,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                index.getOneBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandToDoSuccess(showDescriptionCommand, modelToDo, commandHistory, expectedMessage, expectedModelToDo);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Executes a {@code ShowDescriptionCommand} with the given {@code index},"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ShowDescriptionCommand showDescriptionCommand \u003d new ShowDescriptionCommand(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandToDoFailure(showDescriptionCommand, modelToDo, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstCalendarEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalScheduler(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleteFirstCalendarEvent(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleteFirstCalendarEvent(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleteFirstCalendarEvent(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleteFirstCalendarEvent(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.undoScheduler();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 6,
      "vig42": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_LECTURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DESC_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VENUE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DESC_LECTURE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_LECTURE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TUTORIAL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TUTORIAL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_TUTORIAL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VENUE_DESC_LECTURE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VENUE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.LECTURE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.TUTORIAL;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Venue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class AddEventCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private AddEventCommandParser parser \u003d new AddEventCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent expectedCalendarEvent \u003d new CalendarEventBuilder(TUTORIAL).withTags(VALID_TAG_TUTORIAL).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + END_DESC_TUTORIAL + VENUE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + TAG_DESC_TUTORIAL, new AddEventCommand(expectedCalendarEvent));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_LECTURE + TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + END_DESC_TUTORIAL"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + VENUE_DESC_TUTORIAL + TAG_DESC_TUTORIAL, new AddEventCommand(expectedCalendarEvent));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // multiple descriptions - last descriptions accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_LECTURE + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + END_DESC_TUTORIAL"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + VENUE_DESC_TUTORIAL + TAG_DESC_TUTORIAL, new AddEventCommand(expectedCalendarEvent));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // multiple venues - last venue accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL + VENUE_DESC_LECTURE"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + END_DESC_TUTORIAL"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + VENUE_DESC_TUTORIAL + TAG_DESC_TUTORIAL, new AddEventCommand(expectedCalendarEvent));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // multiple start date/times - last start date/time accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_LECTURE + START_DESC_TUTORIAL + END_DESC_TUTORIAL"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + VENUE_DESC_TUTORIAL + TAG_DESC_TUTORIAL, new AddEventCommand(expectedCalendarEvent));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // multiple end date/times - last end date/times accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + END_DESC_LECTURE + END_DESC_TUTORIAL"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + VENUE_DESC_TUTORIAL + TAG_DESC_TUTORIAL, new AddEventCommand(expectedCalendarEvent));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent expectedCalendarEventMultipleTags \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new CalendarEventBuilder(TUTORIAL).withTags(VALID_TAG_TUTORIAL, VALID_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + END_DESC_TUTORIAL + VENUE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + TAG_DESC_LECTURE + TAG_DESC_TUTORIAL, new AddEventCommand(expectedCalendarEventMultipleTags));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent expectedCalendarEvent \u003d new CalendarEventBuilder(LECTURE).withTags().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_LECTURE + DESCRIPTION_DESC_LECTURE + START_DESC_LECTURE"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            + END_DESC_LECTURE + VENUE_DESC_LECTURE, new AddEventCommand(expectedCalendarEvent));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_TUTORIAL + DESCRIPTION_DESC_TUTORIAL + START_DESC_TUTORIAL"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + END_DESC_TUTORIAL + VENUE_DESC_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TUTORIAL + VALID_DESCRIPTION_TUTORIAL"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + END_DESC_TUTORIAL + VENUE_DESC_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // missing start prefix"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + VALID_START_DATETIME_TUTORIAL + END_DESC_TUTORIAL + VENUE_DESC_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // missing end prefix"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + VALID_END_DATETIME_TUTORIAL + VENUE_DESC_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // missing venue prefix"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + END_DESC_TUTORIAL + VALID_VENUE_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_TUTORIAL + VALID_DESCRIPTION_TUTORIAL"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + VALID_START_DATETIME_TUTORIAL + VALID_END_DATETIME_TUTORIAL"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + VALID_VENUE_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + END_DESC_TUTORIAL + VENUE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + TAG_DESC_LECTURE + TAG_DESC_TUTORIAL, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TUTORIAL + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + END_DESC_TUTORIAL + VENUE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + TAG_DESC_LECTURE + TAG_DESC_TUTORIAL, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // invalid venue"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + END_DESC_TUTORIAL + INVALID_VENUE_DESC"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + TAG_DESC_LECTURE + TAG_DESC_TUTORIAL, Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // invalid start date/time"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + INVALID_START_DESC + END_DESC_TUTORIAL + VENUE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + TAG_DESC_LECTURE + TAG_DESC_TUTORIAL, DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // invalid end date/time"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + INVALID_END_DESC + VENUE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + TAG_DESC_LECTURE + TAG_DESC_TUTORIAL, DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + END_DESC_TUTORIAL + VENUE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + INVALID_TAG_DESC + VALID_TAG_TUTORIAL, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_TUTORIAL + END_DESC_TUTORIAL + INVALID_VENUE_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vig42"
        },
        "content": "                + START_DESC_TUTORIAL + END_DESC_TUTORIAL"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "vig42"
        },
        "content": "                + VENUE_DESC_TUTORIAL + TAG_DESC_LECTURE + TAG_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 34,
      "vig42": 87,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddToDoCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_LECTURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_LECTURE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_LECTURE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TUTORIAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtilToDo.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtilToDo.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.TUTORIAL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.AddToDoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.Priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.ToDoListEventBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class AddToDoCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private AddToDoCommandParser parser \u003d new AddToDoCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent expectedToDoListEvent \u003d new ToDoListEventBuilder(TUTORIAL).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + PRIORITY_DESC_TUTORIAL, new AddToDoCommand(expectedToDoListEvent));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_LECTURE + TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + PRIORITY_DESC_TUTORIAL, new AddToDoCommand(expectedToDoListEvent));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // multiple descriptions - last descriptions accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_LECTURE + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + PRIORITY_DESC_TUTORIAL, new AddToDoCommand(expectedToDoListEvent));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // multiple priorities - last priority accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL + PRIORITY_DESC_LECTURE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + PRIORITY_DESC_TUTORIAL, new AddToDoCommand(expectedToDoListEvent));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToDoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + PRIORITY_DESC_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TUTORIAL + VALID_DESCRIPTION_TUTORIAL"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + PRIORITY_DESC_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // missing priority prefix"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + VALID_PRIORITY_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_TUTORIAL + VALID_DESCRIPTION_TUTORIAL"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + VALID_PRIORITY_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + PRIORITY_DESC_TUTORIAL, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TUTORIAL + INVALID_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + PRIORITY_DESC_TUTORIAL, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + INVALID_PRIORITY_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                + PRIORITY_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToDoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // No preamble, no starting whitespace"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "        argsString \u003d \"p/   Argument value \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Only prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "        argsString \u003d \"p/\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Repeated prefixes without preamble or whitespace at the start"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vig42"
        },
        "content": "        argsString \u003d \"p/  pSlash value1    \\t  p/    pSlash value2\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vig42"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value1\", \"pSlash value2\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 18,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtilToDo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Contains helper methods for testing commandToDo parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class CommandParserTestUtilToDo {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parserToDo} is successful and the commandToDo created"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * equals to {@code expectedCommandToDo}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommandToDo) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "            Command commandToDo \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertEquals(expectedCommandToDo, commandToDo);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parserToDo} is unsuccessful and the error message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "vig42": 4,
      "SleepySanjinLi": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteEventCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * outside of the DeleteEventCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * same path through the DeleteEventCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class DeleteEventCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private DeleteEventCommandParser parser \u003d new DeleteEventCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteEventCommand(INDEX_FIRST_ELEMENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 7,
      "vig42": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteToDoCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtilToDo.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtilToDo.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.DeleteToDoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * outside of the DeleteToDoCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * same path through the DeleteToDoCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class DeleteToDoCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private DeleteToDoCommandParser parser \u003d new DeleteToDoCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteToDoCommand(INDEX_FIRST_ELEMENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteToDoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "SleepySanjinLi": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditEventCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_LECTURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DESC_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VENUE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DESC_LECTURE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_LECTURE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_LECTURE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATETIME_LECTURE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATETIME_LECTURE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TUTORIAL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_LECTURE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_LECTURE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_TUTORIAL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VENUE_DESC_LECTURE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VENUE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ELEMENT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand.EditCalendarEventDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Venue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.EditCalendarEventDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class EditEventCommandParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private EditEventCommandParser parser \u003d new EditEventCommandParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_LECTURE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseFailure(parser, \"1\", EditEventCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseFailure(parser, \"-5\" + TITLE_DESC_LECTURE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseFailure(parser, \"0\" + TITLE_DESC_LECTURE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TITLE_DESC, Title.MESSAGE_CONSTRAINTS); // invalid title"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "            Description.MESSAGE_CONSTRAINTS); // invalid description"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_START_DESC,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS); // invalid start"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_END_DESC,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS); // invalid end"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_VENUE_DESC, Venue.MESSAGE_CONSTRAINTS); // invalid venue"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // invalid description followed by valid title"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC + TITLE_DESC_LECTURE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // valid description followed by invalid description. The test case for invalid description followed by valid"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseFailure(parser, \"1\" + DESCRIPTION_DESC_TUTORIAL + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code CalendarEvent} being edited,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_TUTORIAL + TAG_DESC_LECTURE + TAG_EMPTY,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_TUTORIAL + TAG_EMPTY + TAG_DESC_LECTURE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_TUTORIAL + TAG_DESC_LECTURE,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_LECTURE + TAG_DESC_LECTURE"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_LECTURE + END_DESC_LECTURE + VENUE_DESC_LECTURE + TITLE_DESC_LECTURE + TAG_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditCalendarEventDescriptor descriptor \u003d new EditCalendarEventDescriptorBuilder().withTitle(VALID_TITLE_LECTURE)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_LECTURE).withStart(VALID_START_DATETIME_LECTURE)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withEnd(VALID_END_DATETIME_LECTURE).withVenue(VALID_VENUE_LECTURE)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withTags(VALID_TAG_LECTURE, VALID_TAG_TUTORIAL).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditCalendarEventDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            new EditCalendarEventDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // title"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ELEMENT;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_LECTURE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditCalendarEventDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            new EditCalendarEventDescriptorBuilder().withTitle(VALID_TITLE_LECTURE).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_LECTURE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptor \u003d new EditCalendarEventDescriptorBuilder().withDescription(VALID_DESCRIPTION_LECTURE).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // start date/time"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vig42"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + START_DESC_LECTURE;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptor \u003d new EditCalendarEventDescriptorBuilder().withStart(VALID_START_DATETIME_LECTURE).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // end date/time"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "vig42"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + END_DESC_LECTURE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptor \u003d new EditCalendarEventDescriptorBuilder().withEnd(VALID_END_DATETIME_LECTURE).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // venue"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VENUE_DESC_LECTURE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptor \u003d new EditCalendarEventDescriptorBuilder().withVenue(VALID_VENUE_LECTURE).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vig42"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vig42"
        },
        "content": "        descriptor \u003d new EditCalendarEventDescriptorBuilder().withTags(VALID_TAG_TUTORIAL).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_LECTURE + VENUE_DESC_LECTURE"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + TAG_DESC_TUTORIAL + DESCRIPTION_DESC_LECTURE + START_DESC_LECTURE + END_DESC_LECTURE"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + VENUE_DESC_LECTURE + START_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL + VENUE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + TAG_DESC_LECTURE + END_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditCalendarEventDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            new EditCalendarEventDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .withStart(VALID_START_DATETIME_TUTORIAL).withEnd(VALID_END_DATETIME_TUTORIAL)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .withVenue(VALID_VENUE_TUTORIAL).withTags(VALID_TAG_TUTORIAL, VALID_TAG_LECTURE)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DESCRIPTION_DESC + DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand.EditCalendarEventDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            new EditCalendarEventDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_DESCRIPTION_DESC + VENUE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            + DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptor \u003d new EditCalendarEventDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            .withVenue(VALID_VENUE_TUTORIAL).build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ELEMENT;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditCalendarEventDescriptor descriptor \u003d new EditCalendarEventDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand expectedCommand \u003d new EditEventCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 84,
      "vig42": 43,
      "pangjiahao": 2,
      "SleepySanjinLi": 3,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindEventCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.FindEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DatePredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.FuzzySearchComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.FuzzySearchFilterPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.TagsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class FindEventCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private FindEventCommandParser parser \u003d new FindEventCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void parse_invalidDates_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // empty from or to date/time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"from/\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "                String.format(DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"to/\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "                String.format(DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"from/11 nov 8pm to/\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "                String.format(DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"to/11 nov 8pm from/\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "                String.format(DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // from date/time is chronologically after the before date/time"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"from/11 nov 8pm to/10/11/18 20:00\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DatePredicate.MESSAGE_DATE_PREDICATE_CONSTRAINTS));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void parse_invalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"tag/\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, Tag.MESSAGE_TAG_CONSTRAINTS));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"from/20 nov 8pm to/21 nov 8pm tag/\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, Tag.MESSAGE_TAG_CONSTRAINTS));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"some keywords tag/\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, Tag.MESSAGE_TAG_CONSTRAINTS));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseFailure(parser, \"some keywords tag/CS2103 tag/\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, Tag.MESSAGE_TAG_CONSTRAINTS));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void parse_onlyValidDates_returnsFindCommand() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand expectedCommand1 \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "                new FindEventCommand(new FuzzySearchFilterPredicate(Collections.emptyList()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new FuzzySearchComparator(Collections.emptyList()),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new DatePredicate(new DateTime(\"2018-11-11 20:00\"), null),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new TagsPredicate(Collections.emptySet()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, \"from/11 nov 2018 20:00\", expectedCommand1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand expectedCommand2 \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "                new FindEventCommand(new FuzzySearchFilterPredicate(Collections.emptyList()),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new FuzzySearchComparator(Collections.emptyList()),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new DatePredicate(null, new DateTime(\"2018-11-11 20:00\")),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new TagsPredicate(Collections.emptySet()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, \"to/11 nov 20:00\", expectedCommand2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand expectedCommand3 \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "                new FindEventCommand(new FuzzySearchFilterPredicate(Collections.emptyList()),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new FuzzySearchComparator(Collections.emptyList()),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new DatePredicate(new DateTime(\"2018-11-10 20:00\"), new DateTime(\"2018-11-11 20:00\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new TagsPredicate(Collections.emptySet()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, \"from/10 nov 8pm to/11/11/18 20:00\", expectedCommand3);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, \"   \\n\\t from/10 nov 8pm    \\t to/11/11/18 20:00   \\n\", expectedCommand3);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void parse_onlyValidTags_returnsFindCommand() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand expectedCommand1 \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "                new FindEventCommand(new FuzzySearchFilterPredicate(Collections.emptyList()),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new FuzzySearchComparator(Collections.emptyList()),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new DatePredicate(null, null),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new TagsPredicate(new HashSet\u003c\u003e(Collections.singletonList(\"cs2103\"))));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, \"tag/cs2103\", expectedCommand1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand expectedCommand2 \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "                new FindEventCommand(new FuzzySearchFilterPredicate(Collections.emptyList()),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new FuzzySearchComparator(Collections.emptyList()),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new DatePredicate(null, null),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new TagsPredicate(new HashSet\u003c\u003e(Arrays.asList(\"cs2103\", \"Lecture\"))));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, \"tag/cs2103 tag/Lecture\", expectedCommand2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, \"  \\n  tag/cs2103  \\n\\t  tag/Lecture \\t  \", expectedCommand2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // without dates or tags"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand expectedFindEventCommand1 \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new FindEventCommand(new FuzzySearchFilterPredicate(Arrays.asList(\"some\", \"keywords\")),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "                new FuzzySearchComparator(Arrays.asList(\"some\", \"keywords\")),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "                new DatePredicate(null, null),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "                new TagsPredicate(Collections.emptySet()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, \"some keywords\", expectedFindEventCommand1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, \" \\n some \\n \\t keywords \\t\", expectedFindEventCommand1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // with dates and tags"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FindEventCommand expectedFindEventCommand2 \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": "                new FindEventCommand(new FuzzySearchFilterPredicate(Arrays.asList(\"some\", \"keywords\")),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new FuzzySearchComparator(Arrays.asList(\"some\", \"keywords\")),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new DatePredicate(new DateTime(\"2018-11-10 20:00\"), new DateTime(\"2018-11-11 20:00\")),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vig42"
        },
        "content": "                        new TagsPredicate(new HashSet\u003c\u003e(Arrays.asList(\"CS2103\", \"Lecture\"))));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertParseSuccess(parser, \"some keywords from/10 nov 8pm to/11 nov 8pm tag/CS2103 tag/Lecture\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                expectedFindEventCommand2);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "vig42": 112,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Venue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String INVALID_TITLE \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String INVALID_START_DATETIME \u003d \"2018-09-31 16:00\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String INVALID_END_DATETIME \u003d \"0000-13-45 26:09\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String VALID_TITLE \u003d \"CS2103 Lecture\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Abstraction, IntelliJ, Gradle\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String VALID_LOCATION \u003d \"i3-AUD\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String VALID_START_DATETIME \u003d \"2018-10-16 14:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String VALID_END_DATETIME \u003d \"2018-10-16 16:00\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(INDEX_FIRST_ELEMENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(INDEX_FIRST_ELEMENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void parseTitle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsTitle() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedTitle() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String titleWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(titleWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void parseLocation_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseVenue((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void parseLocation_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseVenue(INVALID_LOCATION));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void parseLocation_validValueWithoutWhitespace_returnsLocation() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Venue expectedVenue \u003d new Venue(VALID_LOCATION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedVenue, ParserUtil.parseVenue(VALID_LOCATION));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void parseLocation_validValueWithWhitespace_returnsTrimmedLocation() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String locationWithWhitespace \u003d WHITESPACE + VALID_LOCATION + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Venue expectedVenue \u003d new Venue(VALID_LOCATION);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedVenue, ParserUtil.parseVenue(locationWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 45,
      "vig42": 4,
      "-": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SchedulerParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.AddToDoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.ClearCalendarCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.DeleteToDoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand.EditCalendarEventDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.FindEventCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.ListEventCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.SelectEventCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.ShowDescriptionCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DatePredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.FuzzySearchComparator;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.FuzzySearchFilterPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.TagsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.CalendarEventUtil;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.EditCalendarEventDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.ToDoListEventBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.ToDoListEventUtil;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class SchedulerParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final SchedulerParser parser \u003d new SchedulerParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent calendarEvent \u003d new CalendarEventBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(CalendarEventUtil.getAddCommand(calendarEvent));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(new AddEventCommand(calendarEvent), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCalendarCommand.COMMAND_WORD) instanceof ClearCalendarCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCalendarCommand.COMMAND_WORD + \" 3\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                instanceof ClearCalendarCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        DeleteEventCommand command \u003d (DeleteEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            DeleteEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ELEMENT.getOneBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(new DeleteEventCommand(INDEX_FIRST_ELEMENT), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent calendarEvent \u003d new CalendarEventBuilder().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditCalendarEventDescriptor descriptor \u003d new EditCalendarEventDescriptorBuilder(calendarEvent).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        EditEventCommand command \u003d (EditEventCommand) parser.parseCommand(EditEventCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + INDEX_FIRST_ELEMENT.getOneBased()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + \" \" + CalendarEventUtil.getEditCalendarEventDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(new EditEventCommand(INDEX_FIRST_ELEMENT, descriptor), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        FindEventCommand command \u003d (FindEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            FindEventCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(new FindEventCommand(new FuzzySearchFilterPredicate(keywords),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new FuzzySearchComparator(keywords), new DatePredicate(null, null),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new TagsPredicate(Collections.emptySet())), command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(parser.parseCommand(ListEventCommand.COMMAND_WORD) instanceof ListEventCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(parser.parseCommand(ListEventCommand.COMMAND_WORD + \" 3\") instanceof ListEventCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        SelectEventCommand command \u003d (SelectEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            SelectEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ELEMENT.getOneBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(new SelectEventCommand(INDEX_FIRST_ELEMENT), command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void parseCommand_addToDo() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent toDoListEvent \u003d new ToDoListEventBuilder().build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        AddToDoCommand commandToDo \u003d (AddToDoCommand) parser"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .parseCommand(ToDoListEventUtil.getAddToDoCommand(toDoListEvent));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(new AddToDoCommand(toDoListEvent), commandToDo);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void parseCommand_deleteToDo() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DeleteToDoCommand commandToDo \u003d (DeleteToDoCommand) parser.parseCommand("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            DeleteToDoCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ELEMENT.getOneBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(new DeleteToDoCommand(INDEX_FIRST_ELEMENT), commandToDo);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void parseCommand_showDescription() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ShowDescriptionCommand commandToDo \u003d (ShowDescriptionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                ShowDescriptionCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ELEMENT.getOneBased());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(new ShowDescriptionCommand(INDEX_FIRST_ELEMENT), commandToDo);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 29,
      "vig42": 13,
      "SleepySanjinLi": 31,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectEventCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.SelectEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * Test scope: similar to {@code DeleteEventCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * @see DeleteEventCommandParserTest"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class SelectEventCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private SelectEventCommandParser parser \u003d new SelectEventCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectEventCommand(INDEX_FIRST_ELEMENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            SelectEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 10,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ShowDescriptionCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtilToDo.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtilToDo.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.ShowDescriptionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Test scope: similar to {@code DeleteToDoCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * @see DeleteToDoCommandParserTest"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ShowDescriptionCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private ShowDescriptionCommandParser parser \u003d new ShowDescriptionCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ShowDescriptionCommand(INDEX_FIRST_ELEMENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                ShowDescriptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CHOIR_PRACTICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2103_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2104_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.FuzzySearchFilterPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.SchedulerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void hasCalendarEvent_nullCalendarEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        modelManager.hasCalendarEvent(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void hasCalendarEvent_calendarEventNotInScheduler_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(modelManager.hasCalendarEvent(CS2103_LECTURE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void hasCalendarEvent_calendarEventInScheduler_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "        modelManager.addCalendarEvent(CS2103_LECTURE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(modelManager.hasCalendarEvent(CS2103_LECTURE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void getFilteredCalendarEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        modelManager.getFilteredAndSortedCalendarEventList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Scheduler scheduler \u003d new SchedulerBuilder().withCalendarEvent(CS2103_LECTURE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                    .withCalendarEvent(CS2104_TUTORIAL).withCalendarEvent(CHOIR_PRACTICE).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Scheduler differentScheduler \u003d new Scheduler();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        modelManager \u003d new ModelManager(scheduler, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(scheduler, userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different scheduler -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentScheduler, userPrefs)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String[] keywords \u003d CS2103_LECTURE.getTitle().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "        modelManager.updateFilteredCalendarEventList(new FuzzySearchFilterPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(scheduler, userPrefs)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        modelManager.clearAllPredicatesAndComparators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "        differentUserPrefs.setSchedulerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(scheduler, differentUserPrefs)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 5,
      "vig42": 21,
      "pangjiahao": 1,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerToDoTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.model.ModelToDo.PREDICATE_SHOW_ALL_TODOLIST_EVENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.ToDoListBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ModelManagerToDoTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private ModelManagerToDo modelManagerToDo \u003d new ModelManagerToDo();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void hasToDo_nullToDo_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        modelManagerToDo.hasToDoListEvent(null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void hasToDo_todoNotInToDoList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(modelManagerToDo.hasToDoListEvent(LECTURE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void hasToDo_toDoInToDoList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        modelManagerToDo.addToDoListEvent(LECTURE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(modelManagerToDo.hasToDoListEvent(LECTURE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void getFilteredToDoList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        modelManagerToDo.getFilteredToDoListEventList().remove(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoList toDoList \u003d new ToDoListBuilder().withEvent(LECTURE).withEvent(TUTORIAL).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoList differentToDoList \u003d new ToDoList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        modelManagerToDo \u003d new ModelManagerToDo(toDoList, userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelManagerToDo modelManagerToDoCopy \u003d new ModelManagerToDo(toDoList, userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(modelManagerToDo.equals(modelManagerToDoCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(modelManagerToDo.equals(modelManagerToDo));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(modelManagerToDo.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(modelManagerToDo.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different scheduler -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(modelManagerToDo.equals(new ModelManagerToDo(differentToDoList, userPrefs)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        modelManagerToDo.updateFilteredToDoListEventList(PREDICATE_SHOW_ALL_TODOLIST_EVENTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        differentUserPrefs.setSchedulerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(modelManagerToDo.equals(new ModelManagerToDo(toDoList, differentUserPrefs)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/SchedulerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2103_LECTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.exceptions.DuplicateCalendarEventException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class SchedulerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final Scheduler scheduler \u003d new Scheduler();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(Collections.emptyList(), scheduler.getCalendarEventList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        scheduler.resetData(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Scheduler newData \u003d getTypicalScheduler();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        scheduler.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(newData, scheduler);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Two calendarEvents with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent editedLecture \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new CalendarEventBuilder(CS2103_LECTURE).withTags(VALID_TAG_LECTURE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cCalendarEvent\u003e newCalendarEvents \u003d Arrays.asList(CS2103_LECTURE, editedLecture);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        SchedulerStub newData \u003d new SchedulerStub(newCalendarEvents);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(DuplicateCalendarEventException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        scheduler.resetData(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "        scheduler.hasCalendarEvent(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(scheduler.hasCalendarEvent(CS2103_LECTURE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "        scheduler.addCalendarEvent(CS2103_LECTURE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(scheduler.hasCalendarEvent(CS2103_LECTURE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "        scheduler.addCalendarEvent(CS2103_LECTURE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent editedLecture \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new CalendarEventBuilder(CS2103_LECTURE).withTags(VALID_TAG_LECTURE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(scheduler.hasCalendarEvent(editedLecture));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "        scheduler.getCalendarEventList().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * A stub ReadOnlyScheduler whose calendarEvents list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static class SchedulerStub implements ReadOnlyScheduler {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "        private final ObservableList\u003cCalendarEvent\u003e calendarEvents \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "        SchedulerStub(Collection\u003cCalendarEvent\u003e calendarEvents) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": "            this.calendarEvents.setAll(calendarEvents);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public ObservableList\u003cCalendarEvent\u003e getCalendarEventList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "            return calendarEvents;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 5,
      "vig42": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ToDoListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.LECTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.getTypicalToDoList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.exceptions.DuplicateToDoListEventException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.ToDoListEventBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ToDoListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final ToDoList toDoList \u003d new ToDoList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(Collections.emptyList(), toDoList.getToDoList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoList.resetData(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void resetData_withValidReadOnlyToDoList_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoList newData \u003d getTypicalToDoList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoList.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(newData, toDoList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void resetData_withDuplicateToDo_throwsDuplicateToDoException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // Two toDoListEvent with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent editedLecture \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEventBuilder(LECTURE).withDescription(VALID_DESCRIPTION_LECTURE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        List\u003cToDoListEvent\u003e newToDoListEvents \u003d Arrays.asList(LECTURE, editedLecture);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListStub newData \u003d new ToDoListStub(newToDoListEvents);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(DuplicateToDoListEventException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoList.resetData(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void hasToDo_nullToDo_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoList.hasToDoListEvent(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void hasToDo_toDoNotInToDoList_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(toDoList.hasToDoListEvent(LECTURE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void hasToDo_personInToDoList_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoList.addToDoListEvent(LECTURE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(toDoList.hasToDoListEvent(LECTURE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void hasToDo_todoWithSameIdentityFieldsInToDoList_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoList.addToDoListEvent(LECTURE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent editedLecture \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEventBuilder(LECTURE).withDescription(VALID_DESCRIPTION_LECTURE)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(toDoList.hasToDoListEvent(editedLecture));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void getToDoList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDoList.getToDoList().remove(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * A stub ReadOnlyToDoList whose toDoListEvents list can violate interface constraints."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static class ToDoListStub implements ReadOnlyToDoList {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        private final ObservableList\u003cToDoListEvent\u003e toDoListEvents \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListStub(Collection\u003cToDoListEvent\u003e toDoListEvents) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            this.toDoListEvents.setAll(toDoListEvents);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public ObservableList\u003cToDoListEvent\u003e getToDoList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            return toDoListEvents;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedSchedulerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2040_LAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.LECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.SchedulerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class VersionedSchedulerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final ReadOnlyScheduler addressBookWithAmy \u003d new SchedulerBuilder().withCalendarEvent(LECTURE).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final ReadOnlyScheduler addressBookWithBob \u003d new SchedulerBuilder().withCalendarEvent(TUTORIAL).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final ReadOnlyScheduler addressBookWithCarl \u003d new SchedulerBuilder().withCalendarEvent(CS2040_LAB).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private final ReadOnlyScheduler emptyAddressBook \u003d new SchedulerBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertThrows(VersionedScheduler.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertThrows(VersionedScheduler.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertThrows(VersionedScheduler.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertThrows(VersionedScheduler.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void assertAddressBookListStatus(VersionedScheduler versionedAddressBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                             List\u003cReadOnlyScheduler\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                             ReadOnlyScheduler expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                             List\u003cReadOnlyScheduler\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(new Scheduler(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "vig42"
        },
        "content": "        for (ReadOnlyScheduler expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "vig42"
        },
        "content": "            assertEquals(expectedAddressBook, new Scheduler(versionedAddressBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "vig42"
        },
        "content": "        for (ReadOnlyScheduler expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "vig42"
        },
        "content": "            assertEquals(expectedAddressBook, new Scheduler(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Creates and returns a {@code VersionedScheduler} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code VersionedScheduler#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private VersionedScheduler prepareAddressBookList(ReadOnlyScheduler... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "vig42"
        },
        "content": "        VersionedScheduler versionedAddressBook \u003d new VersionedScheduler(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedScheduler versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 4,
      "vig42": 46,
      "-": 248
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendarevent/CalendarEventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2103_LECTURE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.TUTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class CalendarEventTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent calendarEvent \u003d new CalendarEventBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        calendarEvent.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void isSameEvent() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(CS2103_LECTURE.isSameCalendarEvent(CS2103_LECTURE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(CS2103_LECTURE.isSameCalendarEvent(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different start date/time -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent editedLecture \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new CalendarEventBuilder(CS2103_LECTURE).withStart(VALID_START_DATETIME_TUTORIAL).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(CS2103_LECTURE.isSameCalendarEvent(editedLecture));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different end date/time -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        editedLecture \u003d new CalendarEventBuilder(CS2103_LECTURE).withEnd(VALID_END_DATETIME_TUTORIAL).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(CS2103_LECTURE.isSameCalendarEvent(editedLecture));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // same title, same start date/time,same end date/time,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different venue, different description, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        editedLecture \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new CalendarEventBuilder(CS2103_LECTURE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                .withVenue(VALID_VENUE_TUTORIAL)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .withTags(VALID_TAG_LECTURE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(CS2103_LECTURE.isSameCalendarEvent(editedLecture));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // same title, same description, same venue, same attributes"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different start date/time, different end date/time -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "        editedLecture \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new CalendarEventBuilder(CS2103_LECTURE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .withStart(VALID_START_DATETIME_TUTORIAL)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .withEnd(VALID_END_DATETIME_TUTORIAL)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(CS2103_LECTURE.isSameCalendarEvent(editedLecture));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // TODO redefine what is considered sameEvent or decide whether this test is necessary"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // same title, same description, same start date/time, same end date/time,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different venue, different attributes                               -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        editedLecture \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new CalendarEventBuilder(CS2103_LECTURE).withVenue(VALID_VENUE_TUTORIAL)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                    .withTags(VALID_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(CS2103_LECTURE.isSameCalendarEvent(editedLecture));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent lectureCopy \u003d new CalendarEventBuilder(CS2103_LECTURE).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(CS2103_LECTURE.equals(lectureCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(CS2103_LECTURE.equals(CS2103_LECTURE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(CS2103_LECTURE.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(CS2103_LECTURE.equals(5));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different calendarevent -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(CS2103_LECTURE.equals(TUTORIAL));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent editedLecture \u003d new CalendarEventBuilder(CS2103_LECTURE).withTitle(VALID_TITLE_TUTORIAL).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(CS2103_LECTURE.equals(editedLecture));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "        editedLecture \u003d new CalendarEventBuilder(CS2103_LECTURE).withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(CS2103_LECTURE.equals(editedLecture));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // different venue -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "        editedLecture \u003d new CalendarEventBuilder(CS2103_LECTURE).withVenue(VALID_VENUE_TUTORIAL).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(CS2103_LECTURE.equals(editedLecture));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "        editedLecture \u003d new CalendarEventBuilder(CS2103_LECTURE).withTags(VALID_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(CS2103_LECTURE.equals(editedLecture));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 17,
      "vig42": 49,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendarevent/DatePredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class DatePredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime date1 \u003d new DateTime(\"2018-11-11 08:00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime date2 \u003d new DateTime(\"2018-11-12 09:00\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime date3 \u003d new DateTime(\"2018-11-13 10:00\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime date4 \u003d new DateTime(\"2018-11-14 11:00\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate firstPredicate \u003d new DatePredicate(date1, date2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate firstPredicateCopy \u003d new DatePredicate(date1, date2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different dates -\u003e return false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate secondPredicate \u003d new DatePredicate(date3, date4);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // same dates, different order -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate thirdPredicate \u003d new DatePredicate(date2, date1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(firstPredicate.equals(thirdPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate fourthPredicate \u003d new DatePredicate(date1, null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate fifthPredicate \u003d new DatePredicate(null, date2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // 1 null value, other value same -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate fourthPredicateCopy \u003d new DatePredicate(date1, null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(fourthPredicate.equals(fourthPredicateCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate fifthPredicateCopy \u003d new DatePredicate(null, date2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(fifthPredicate.equals(fifthPredicateCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // 1 null value vs 2 values -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(firstPredicate.equals(fourthPredicate));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(firstPredicate.equals(fifthPredicate));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // both 2 null values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate nullPredicate1 \u003d new DatePredicate(null, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate nullPredicate2 \u003d new DatePredicate(null, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(nullPredicate1.equals(nullPredicate2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // 2 null values vs 1 null value -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(fourthPredicate.equals(nullPredicate1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(fifthPredicate.equals(nullPredicate1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // 2 null values vs 2 values -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(firstPredicate.equals(nullPredicate1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void test_dateIsWithinRange_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String dateString1 \u003d \"2018-11-11 08:00\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String dateString2 \u003d \"2018-11-12 08:00\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String dateString3 \u003d \"2018-11-13 08:00\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String dateString4 \u003d \"2018-11-14 08:00\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String dateString5 \u003d \"2018-11-15 08:00\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String dateString6 \u003d \"2018-11-16 08:00\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime date2 \u003d new DateTime(dateString2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime date5 \u003d new DateTime(dateString5);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // predicate with both \u0027from\u0027 and \u0027to\u0027 date/time values (not null)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // note: \"within range\" refers to the interval after the \u0027from\u0027 date/time and before the \u0027to\u0027 date/time"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate predicate \u003d new DatePredicate(date2, date5);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start \u0026 end both within range  -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString3).withEnd(dateString4).build()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start on \u0027from\u0027 date/time, end within range -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString2).withEnd(dateString4).build()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start before \u0027from\u0027 date/time and end within range -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString1).withEnd(dateString4).build()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start before \u0027from\u0027 date/time, end on \u0027from\u0027 date/time -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString1).withEnd(dateString2).build()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start within range, end on \u0027to\u0027 date/time -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString3).withEnd(dateString5).build()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start within range, end after \u0027to\u0027 date/time -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString3).withEnd(dateString6).build()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start on \u0027to\u0027 date/time \u0026\u0026 end after \u0027to\u0027 date/time -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString5).withEnd(dateString6).build()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // predicate with only \u0027from\u0027 date/time value (\u0027to\u0027 value null)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new DatePredicate(date2, null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start \u0026 end after \u0027from\u0027 date/time -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString3).withEnd(dateString4).build()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start before \u0027from\u0027 date/time, end after \u0027from\u0027 date/time -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString1).withEnd(dateString4).build()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start on \u0027from\u0027 date/time, end after \u0027from\u0027 date/time -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString2).withEnd(dateString4).build()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start before \u0027from\u0027 date/time, end on \u0027from\u0027 date/time -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString1).withEnd(dateString2).build()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // predicate with only \u0027to\u0027 date/time value (\u0027from\u0027 value null)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new DatePredicate(null, date5);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start \u0026 end before \u0027to\u0027 date/time -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString3).withEnd(dateString4).build()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start before \u0027to\u0027 date/time, end after \u0027to\u0027 date/time -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString1).withEnd(dateString6).build()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start before \u0027to\u0027 date/time, end on \u0027to\u0027 date/time -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString1).withEnd(dateString5).build()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start on \u0027to\u0027 date/time \u0026\u0026 end after \u0027to\u0027 date/time -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withStart(dateString5).withEnd(dateString6).build()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // predicate with both \u0027to\u0027 and \u0027from\u0027 null -\u003e always returns true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate nullPredicate \u003d new DatePredicate(null, null);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(nullPredicate.test(new CalendarEventBuilder().withStart(dateString1).withEnd(dateString2).build()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void test_dateIsNotWithinRange_returnsFalse() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String dateString1 \u003d \"2018-11-11 08:00\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String dateString2 \u003d \"2018-11-12 08:00\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String dateString3 \u003d \"2018-11-13 08:00\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String dateString4 \u003d \"2018-11-14 08:00\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String dateString5 \u003d \"2018-11-15 08:00\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String dateString6 \u003d \"2018-11-16 08:00\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime date3 \u003d new DateTime(dateString3);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DateTime date4 \u003d new DateTime(dateString4);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // predicate with \u0027from\u0027 and \u0027to\u0027 values (not null)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "vig42"
        },
        "content": "        DatePredicate predicate \u003d new DatePredicate(date3, date4);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start \u0026 end both before \u0027from\u0027 date/time -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(predicate.test(new CalendarEventBuilder().withStart(dateString1).withEnd(dateString2).build()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start \u0026 end both after \u0027to\u0027 date/time -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(predicate.test(new CalendarEventBuilder().withStart(dateString5).withEnd(dateString6).build()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vig42"
        },
        "content": "        //predicate with only \u0027from\u0027 value (\u0027to\u0027 value null)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new DatePredicate(date3, null);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start \u0026 end before \u0027from\u0027 date/time -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(predicate.test(new CalendarEventBuilder().withStart(dateString1).withEnd(dateString2).build()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // predicate with only \u0027to\u0027 value (\u0027from\u0027 value null)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new DatePredicate(null, date4);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // event start \u0026 end after \u0027to\u0027 date/time -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(predicate.test(new CalendarEventBuilder().withStart(dateString5).withEnd(dateString6).build()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendarevent/DateTimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidYear \u003d -1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        int validMonth \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        int validDay \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        int validHour \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        int validMinute \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Assert.assertThrows(DateTimeException.class, () -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new DateTime(invalidYear, validMonth, validDay, validHour, validMinute));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new DateTime((String) null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // invalid DateTime"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(-1, 1, 1, 1, 1)); // negative"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(2018, 13, 1, 1, 1)); // invalid month"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(2018, 1, 32, 1, 1)); // invalid day"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(2018, 4, 31, 1, 1)); // invalid day (30-day)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(2018, 2, 29, 1, 1)); // non-leap year"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(2018, 1, 1, 25, 1)); // invalid hour"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(2018, 1, 1, 1, 61)); // invalid day"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // valid DateTime"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(2018, 1, 1, 1, 1)); // typical day"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(2020, 2, 29, 1, 1)); // leap year"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 36,
      "vig42": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendarevent/FuzzySearchComparatorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class FuzzySearchComparatorTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate firstPredicate \u003d new FuzzySearchFilterPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate secondPredicate \u003d new FuzzySearchFilterPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "                new FuzzySearchFilterPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different keyword list -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void test_compare() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent testEvent1 \u003d new CalendarEventBuilder().withTitle(\"CS2103 Tutorial\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .withVenue(\"COM2 02-10\").withDescription(\"App Demo\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent testEvent2 \u003d new CalendarEventBuilder().withTitle(\"CS2104 Lecture\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .withVenue(\"COM2 02-10\").withDescription(\"Monadic Parsers\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent testEvent3 \u003d new CalendarEventBuilder().withTitle(\"CS2020 Lecture\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .withVenue(\"LT19\").withDescription(\"Daydream\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent testEvent4 \u003d new CalendarEventBuilder().withTitle(\"Some Other Lecture\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .withVenue(\"LT17\").withDescription(\"Natural Language Parsing\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // No keywords -\u003e always equal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchComparator comparator \u003d new FuzzySearchComparator(Collections.emptyList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(comparator.compare(testEvent1, testEvent2) \u003d\u003d 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Keyword perfectly matching both events -\u003e equal"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "        comparator \u003d new FuzzySearchComparator(Arrays.asList(\"COM2\", \"02-10\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(comparator.compare(testEvent1, testEvent2) \u003d\u003d 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Keyword perfectly matching first event and not matching second event -\u003e 1st event smaller"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        comparator \u003d new FuzzySearchComparator(Collections.singletonList(\"Tutorial\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(comparator.compare(testEvent1, testEvent3) \u003c 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Keyword matching both events, but first event has a closer match -\u003e 1st event smaller"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "        comparator \u003d new FuzzySearchComparator(Collections.singletonList(\"parse\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(comparator.compare(testEvent2, testEvent4) \u003c 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendarevent/FuzzySearchFilterPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class FuzzySearchFilterPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate firstPredicate \u003d new FuzzySearchFilterPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate secondPredicate \u003d new FuzzySearchFilterPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new FuzzySearchFilterPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different keyword list -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Matching Title:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate predicate \u003d new FuzzySearchFilterPredicate(Collections.singletonList(\"Lecture\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withTitle(\"CS2103 Lecture\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Arrays.asList(\"CS2103\", \"Lecture\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withTitle(\"CS2103 Lecture\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Collections.singletonList(\"CS2103\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withVenue(\"CS2103 Lecture\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Arrays.asList(\"MA1101\", \"Lecture\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withTitle(\"CS2103 Lecture\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Arrays.asList(\"cs2103\", \"lECtuRe\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withTitle(\"CS2103 Lecture\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Matching Venue:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Collections.singletonList(\"COM2\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withVenue(\"COM2\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Arrays.asList(\"COM2\", \"02-10\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withVenue(\"COM2 02-10\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Collections.singletonList(\"COM2\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withVenue(\"COM2 02-10\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Arrays.asList(\"COM2\", \"10-05\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withVenue(\"COM2 02-10\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Arrays.asList(\"cOm2\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withVenue(\"cOm2 02-10\").build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Matching Description:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Collections.singletonList(\"Demo\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withDescription(\"Demo\").build()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Arrays.asList(\"App\", \"Demo\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withDescription(\"App Demo\").build()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Collections.singletonList(\"Demo\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withDescription(\"App Demo\").build()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Arrays.asList(\"Program\", \"Demo\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withDescription(\"App Demo\").build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Arrays.asList(\"aPp DEmO\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withDescription(\"App Demo\").build()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent testEvent \u003d new CalendarEventBuilder().withTitle(\"CS2103 Tutorial\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                        .withVenue(\"COM2 02-10\").withDescription(\"App Demo\").build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Matches Title, but not Venue or Description"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Arrays.asList(\"CS2103\", \"Tutorial\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(testEvent));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Matches Venue, but not Title or Description"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Arrays.asList(\"COM2\", \"02-10\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(testEvent));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Matches Description, but not Title or Venue"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Arrays.asList(\"App\", \"Demo\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(testEvent));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Zero keywords -\u003e always matches"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new FuzzySearchFilterPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(testEvent));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Keywords do not match title, venue or description"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FuzzySearchFilterPredicate predicate \u003d new FuzzySearchFilterPredicate(Arrays.asList(\"Random\", \"Keywords\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(predicate.test(new CalendarEventBuilder().withTitle(\"Lecture\").withDescription(\"Daydream\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withVenue(\"LT19\").build()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 1,
      "vig42": 87,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendarevent/TagsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class TagsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Set\u003cString\u003e firstTagsSet \u003d new HashSet\u003c\u003e(Arrays.asList(\"first\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Set\u003cString\u003e secondTagsSet \u003d new HashSet\u003c\u003e(Arrays.asList(\"first\", \"second\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "        TagsPredicate firstPredicate \u003d new TagsPredicate(firstTagsSet);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "        TagsPredicate secondPredicate \u003d new TagsPredicate(secondTagsSet);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "        TagsPredicate firstPredicateCopy \u003d new TagsPredicate(firstTagsSet);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different tag list -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void test_hasTags_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Single tag in list, matches event with only that tag"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        TagsPredicate predicate \u003d new TagsPredicate(new HashSet\u003c\u003e(Collections.singletonList(\"CS2103\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withTags(\"CS2103\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Multiple tags in list, matches event with all of the tags"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new TagsPredicate(new HashSet\u003c\u003e(Arrays.asList(\"CS2103\", \"Lecture\", \"Difficult\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withTags(\"CS2103\", \"Lecture\", \"Difficult\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Multiple tags in list, matches event with all of the tags in different order"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new TagsPredicate(new HashSet\u003c\u003e(Arrays.asList(\"CS2103\", \"Lecture\", \"Difficult\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withTags(\"Lecture\", \"CS2103\", \"Difficult\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Single tag in list, matches event which has multiple tags including the given tag"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new TagsPredicate(new HashSet\u003c\u003e(Arrays.asList(\"CS2103\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withTags(\"CS2103\", \"Lecture\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Multiple mixed-case tags in list, matches event with all of the tags in different case"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new TagsPredicate(new HashSet\u003c\u003e(Arrays.asList(\"cs2103\", \"leCTurE\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withTags(\"CS2103\", \"Lecture\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Zero tags in list -\u003e always matches all events"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new TagsPredicate(Collections.emptySet());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(predicate.test(new CalendarEventBuilder().withTags(\"CS2103\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void test_doesNotHaveTags_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Single tag in list, does not match event with only 1 different tag"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        TagsPredicate predicate \u003d new TagsPredicate(new HashSet\u003c\u003e(Collections.singletonList(\"CS2014\")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(predicate.test(new CalendarEventBuilder().withTags(\"CS2103\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // Multiple tags in list, does not match event which does not have 1 of the tags"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "        predicate \u003d new TagsPredicate(new HashSet\u003c\u003e(Arrays.asList(\"CS2014\", \"Lecture\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(predicate.test(new CalendarEventBuilder().withTags(\"CS2103\", \"Lecture\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendarevent/TextFieldTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class TextFieldTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TextField(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void constructor_invalidTextField_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String invalidTextField \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TextField(invalidTextField));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void isValidTextField() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // null textField"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e TextField.isValid(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // invalid textField"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(TextField.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(TextField.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(TextField.isValid(\" a\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        // valid textField"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(TextField.isValid(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(TextField.isValid(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(TextField.isValid(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(TextField.isValid(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(TextField.isValid(\"David Roger Jackson Ray Jr 2nd\")); // long textFields"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(TextField.isValid(\"\\\\^\")); // caret"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(TextField.isValid(\"\\\\*\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(TextField.isValid(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendarevent/UniqueCalendarEventListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.model.calendarevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2103_LECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.exceptions.CalendarEventNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.exceptions.DuplicateCalendarEventException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class UniqueCalendarEventListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private final UniqueCalendarEventList uniqueCalendarEventList \u003d new UniqueCalendarEventList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(uniqueCalendarEventList.contains(CS2103_LECTURE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.add(CS2103_LECTURE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(uniqueCalendarEventList.contains(CS2103_LECTURE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.add(CS2103_LECTURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent editedLecture \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new CalendarEventBuilder(CS2103_LECTURE).withTags(VALID_TAG_LECTURE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(uniqueCalendarEventList.contains(editedLecture));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.add(CS2103_LECTURE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(DuplicateCalendarEventException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.add(CS2103_LECTURE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.setCalendarEvent(null, CS2103_LECTURE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.setCalendarEvent(CS2103_LECTURE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(CalendarEventNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.setCalendarEvent(CS2103_LECTURE, CS2103_LECTURE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.add(CS2103_LECTURE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.setCalendarEvent(CS2103_LECTURE, CS2103_LECTURE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "        UniqueCalendarEventList expectedUniqueCalendarEventList \u003d new UniqueCalendarEventList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedUniqueCalendarEventList.add(CS2103_LECTURE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(expectedUniqueCalendarEventList, uniqueCalendarEventList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.add(CS2103_LECTURE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent editedAlice \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new CalendarEventBuilder(CS2103_LECTURE).withVenue(VALID_VENUE_TUTORIAL).withTags(VALID_TAG_LECTURE)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.setCalendarEvent(CS2103_LECTURE, editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": "        UniqueCalendarEventList expectedUniqueCalendarEventList \u003d new UniqueCalendarEventList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedUniqueCalendarEventList.add(editedAlice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(expectedUniqueCalendarEventList, uniqueCalendarEventList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.add(CS2103_LECTURE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.setCalendarEvent(CS2103_LECTURE, TUTORIAL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "        UniqueCalendarEventList expectedUniqueCalendarEventList \u003d new UniqueCalendarEventList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        expectedUniqueCalendarEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(expectedUniqueCalendarEventList, uniqueCalendarEventList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.add(CS2103_LECTURE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        uniqueCalendarEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(DuplicateCalendarEventException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.setCalendarEvent(CS2103_LECTURE, TUTORIAL);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.remove(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(CalendarEventNotFoundException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.remove(CS2103_LECTURE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.add(CS2103_LECTURE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.remove(CS2103_LECTURE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "        UniqueCalendarEventList expectedUniqueCalendarEventList \u003d new UniqueCalendarEventList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(expectedUniqueCalendarEventList, uniqueCalendarEventList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.setCalendarEvents((UniqueCalendarEventList) null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.add(CS2103_LECTURE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vig42"
        },
        "content": "        UniqueCalendarEventList expectedUniqueCalendarEventList \u003d new UniqueCalendarEventList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        expectedUniqueCalendarEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.setCalendarEvents(expectedUniqueCalendarEventList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(expectedUniqueCalendarEventList, uniqueCalendarEventList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.setCalendarEvents((List\u003cCalendarEvent\u003e) null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.add(CS2103_LECTURE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        List\u003cCalendarEvent\u003e calendarEventList \u003d Collections.singletonList(TUTORIAL);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.setCalendarEvents(calendarEventList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "vig42"
        },
        "content": "        UniqueCalendarEventList expectedUniqueCalendarEventList \u003d new UniqueCalendarEventList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        expectedUniqueCalendarEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(expectedUniqueCalendarEventList, uniqueCalendarEventList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cCalendarEvent\u003e listWithDuplicateCalendarEvents \u003d Arrays.asList(CS2103_LECTURE, CS2103_LECTURE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(DuplicateCalendarEventException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.setCalendarEvents(listWithDuplicateCalendarEvents);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uniqueCalendarEventList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 12,
      "vig42": 174
    }
  },
  {
    "path": "src/test/java/seedu/address/model/todolist/PriorityTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model.todolist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void constructor_invalidPriority_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String invalidPriority \u003d \"a\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // null priority"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Priority.isValid(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(Priority.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(Priority.isValid(\"abcde\")); // invalid string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(Priority.isValid(\"#$%\")); //include symbols"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(Priority.isValid(\"45678\")); // include numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // valid priority"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(Priority.isValid(\"H\")); // high priority"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(Priority.isValid(\"M\")); // medium priority"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(Priority.isValid(\"L\")); // low priority"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/todolist/TitleToDoContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model.todolist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.ToDoListEventBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class TitleToDoContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        TitleToDoContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new TitleToDoContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        TitleToDoContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new TitleToDoContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        TitleToDoContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new TitleToDoContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different todolist event -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void test_titleContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        TitleToDoContainsKeywordsPredicate predicate \u003d new TitleToDoContainsKeywordsPredicate(Collections.singletonList("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            \"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(predicate.test(new ToDoListEventBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        predicate \u003d new TitleToDoContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(predicate.test(new ToDoListEventBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        predicate \u003d new TitleToDoContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(predicate.test(new ToDoListEventBuilder().withTitle(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        predicate \u003d new TitleToDoContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(predicate.test(new ToDoListEventBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void test_titleDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        TitleToDoContainsKeywordsPredicate predicate \u003d new TitleToDoContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(predicate.test(new ToDoListEventBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        predicate \u003d new TitleToDoContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(predicate.test(new ToDoListEventBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // Keywords match description but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        predicate \u003d new TitleToDoContainsKeywordsPredicate(Arrays.asList(\"12345\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        System.out.printf(predicate.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(predicate.test(new ToDoListEventBuilder().withTitle(\"Alice\").withDescription(\"12345\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/todolist/ToDoListEventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model.todolist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.MIDTERM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.ToDoListEventBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ToDoListEventTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void isSameTodoListEvent() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(MIDTERM.isSameToDoListEvent(MIDTERM));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(MIDTERM.isSameToDoListEvent(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent editedMidterm \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEventBuilder(MIDTERM).withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(MIDTERM.isSameToDoListEvent(editedMidterm));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        editedMidterm \u003d new ToDoListEventBuilder(MIDTERM).withTitle(VALID_TITLE_TUTORIAL).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(MIDTERM.isSameToDoListEvent(editedMidterm));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same title, different description, different priority -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        editedMidterm \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEventBuilder(MIDTERM)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                .withPriority(VALID_PRIORITY_TUTORIAL)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(MIDTERM.isSameToDoListEvent(editedMidterm));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same title, same description, different priority -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        editedMidterm \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEventBuilder(MIDTERM).withPriority(VALID_PRIORITY_TUTORIAL).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(MIDTERM.isSameToDoListEvent(editedMidterm));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent midtermCopy \u003d new ToDoListEventBuilder(MIDTERM).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(MIDTERM.equals(midtermCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(MIDTERM.equals(MIDTERM));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(MIDTERM.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(MIDTERM.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different todoListEvents -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(MIDTERM.equals(TUTORIAL));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent editedMidterm \u003d new ToDoListEventBuilder(MIDTERM).withTitle(VALID_TITLE_TUTORIAL).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(MIDTERM.equals(editedMidterm));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        editedMidterm \u003d new ToDoListEventBuilder(MIDTERM).withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(MIDTERM.equals(editedMidterm));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        editedMidterm \u003d new ToDoListEventBuilder(MIDTERM).withPriority(VALID_PRIORITY_TUTORIAL).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(MIDTERM.equals(editedMidterm));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/model/todolist/UniqueToDoEventListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.model.todolist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MIDTERM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.MIDTERM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.exceptions.DuplicateToDoListEventException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.exceptions.ToDoListEventNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.ToDoListEventBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class UniqueToDoEventListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private final UniqueToDoEventList uniqueToDoEventList \u003d new UniqueToDoEventList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void contains_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.contains(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void contains_eventNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(uniqueToDoEventList.contains(MIDTERM));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void contains_eventInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.add(MIDTERM);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(uniqueToDoEventList.contains(MIDTERM));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void contains_eventWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.add(MIDTERM);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent editedMidterm \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEventBuilder(MIDTERM).withDescription(VALID_DESCRIPTION_MIDTERM)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(uniqueToDoEventList.contains(editedMidterm));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void add_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.add(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void add_duplicateEvent_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.add(MIDTERM);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(DuplicateToDoListEventException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.add(MIDTERM);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setEvent_nullTargetEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.setToDoListEvent(null, MIDTERM);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setEvent_nullEditedEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.setToDoListEvent(MIDTERM, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setEvent_targetEventNotInList_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(ToDoListEventNotFoundException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.setToDoListEvent(MIDTERM, MIDTERM);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.add(MIDTERM);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.setToDoListEvent(MIDTERM, MIDTERM);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        UniqueToDoEventList expectedUniqueToDoListEventList \u003d new UniqueToDoEventList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        expectedUniqueToDoListEventList.add(MIDTERM);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedUniqueToDoListEventList, uniqueToDoEventList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setEvent_editedEventHasSameIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.add(MIDTERM);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent editedMidterm \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEventBuilder(MIDTERM).withDescription(VALID_DESCRIPTION_MIDTERM).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.setToDoListEvent(MIDTERM, editedMidterm);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        UniqueToDoEventList expectedUniqueToDoListEventList \u003d new UniqueToDoEventList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        expectedUniqueToDoListEventList.add(editedMidterm);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedUniqueToDoListEventList, uniqueToDoEventList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setEvent_editedEventHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.add(MIDTERM);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.setToDoListEvent(MIDTERM, TUTORIAL);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        UniqueToDoEventList expectedUniqueToDoListEventList \u003d new UniqueToDoEventList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        expectedUniqueToDoListEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedUniqueToDoListEventList, uniqueToDoEventList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setEvent_editedEventHasNonUniqueIdentity_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.add(MIDTERM);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(DuplicateToDoListEventException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.setToDoListEvent(MIDTERM, TUTORIAL);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void remove_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.remove(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void remove_eventDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(ToDoListEventNotFoundException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.remove(MIDTERM);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.add(MIDTERM);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.remove(MIDTERM);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        UniqueToDoEventList expectedUniqueToDoListEventList \u003d new UniqueToDoEventList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedUniqueToDoListEventList, uniqueToDoEventList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.setToDoListEvents((UniqueToDoEventList) null);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setEvents_uniqueEventsList_replacesOwnListWithProvidedUniqueEventList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.add(MIDTERM);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        UniqueToDoEventList expectedUniqueToDoListEventList \u003d new UniqueToDoEventList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        expectedUniqueToDoListEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.setToDoListEvents(expectedUniqueToDoListEventList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedUniqueToDoListEventList, uniqueToDoEventList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setEvents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.setToDoListEvents((List\u003cToDoListEvent\u003e) null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setEvents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.add(MIDTERM);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        List\u003cToDoListEvent\u003e toDoListEventList \u003d Collections.singletonList(TUTORIAL);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.setToDoListEvents(toDoListEventList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        UniqueToDoEventList expectedUniqueToDoListEventList \u003d new UniqueToDoEventList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        expectedUniqueToDoListEventList.add(TUTORIAL);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedUniqueToDoListEventList, uniqueToDoEventList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void setEvents_listWithDuplicateEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        List\u003cToDoListEvent\u003e listWithDuplicateToDoListEvents \u003d Arrays.asList(MIDTERM, MIDTERM);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(DuplicateToDoListEventException.class);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.setToDoListEvents(listWithDuplicateToDoListEvents);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uniqueToDoEventList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 184
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "        userPrefs.setSchedulerFilePath(Paths.get(\"data\\\\scheduler.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 1,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.getTypicalToDoList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.model.SchedulerChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.events.model.ToDoListChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ReadOnlyToDoList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ToDoList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlSchedulerStorage addressBookStorage \u003d new XmlSchedulerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlToDoListStorage toDoListStorage \u003d new XmlToDoListStorage(getTempFilePath(\"tdl\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, toDoListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "         * {@link XmlSchedulerStorage} class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlSchedulerStorageTest} class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Scheduler original \u003d getTypicalScheduler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "        storageManager.saveScheduler(original);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ReadOnlyScheduler retrieved \u003d storageManager.readScheduler().get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(original, new Scheduler(retrieved));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void toDoListReadSave() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "         * {@link XmlToDoListStorage} class."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlToDoListStorageTest} class."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoList original \u003d getTypicalToDoList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        storageManager.saveToDoList(original);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ReadOnlyToDoList retrieved \u003d storageManager.readToDoList().get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(original, new ToDoList(retrieved));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertNotNull(storageManager.getSchedulerFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void getToDoListFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertNotNull(storageManager.getToDoListFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlSchedulerStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new XmlToDoListStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "        storage.handleSchedulerChangedEvent(new SchedulerChangedEvent(new Scheduler()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void handleToDoListChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlSchedulerStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new XmlToDoListStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        storage.handleToDoListChangedEvent(new ToDoListChangedEvent(new ToDoList()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "    class XmlSchedulerStorageExceptionThrowingStub extends XmlSchedulerStorage {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public XmlSchedulerStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vig42"
        },
        "content": "        public void saveScheduler(ReadOnlyScheduler addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    class XmlToDoListStorageExceptionThrowingStub extends XmlToDoListStorage {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public XmlToDoListStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        public void saveToDoList(ReadOnlyToDoList toDoList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "vig42": 16,
      "SleepySanjinLi": 42,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedCalendarEventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.storage.XmlAdaptedCalendarEvent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2104_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Venue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class XmlAdaptedCalendarEventTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String INVALID_TITLE \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String INVALID_START \u003d \"2018/10/16 13:45\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String INVALID_END \u003d \"20000-15-42 13:45\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String VALID_TITLE \u003d CS2104_TUTORIAL.getTitle().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d CS2104_TUTORIAL.getDescriptionObject().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String VALID_START \u003d CS2104_TUTORIAL.getStart().toInputFormat();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String VALID_END \u003d CS2104_TUTORIAL.getEnd().toInputFormat();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final String VALID_LOCATION \u003d CS2104_TUTORIAL.getVenue().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d CS2104_TUTORIAL.getTags().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlAdaptedCalendarEvent person \u003d new XmlAdaptedCalendarEvent(CS2104_TUTORIAL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(CS2104_TUTORIAL, person.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlAdaptedCalendarEvent person \u003d new XmlAdaptedCalendarEvent(INVALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "            VALID_START, VALID_END, VALID_LOCATION, VALID_TAGS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlAdaptedCalendarEvent person \u003d new XmlAdaptedCalendarEvent(null, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "            VALID_START, VALID_END, VALID_LOCATION, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlAdaptedCalendarEvent person \u003d new XmlAdaptedCalendarEvent(VALID_TITLE, INVALID_DESCRIPTION,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "            VALID_START, VALID_END, VALID_LOCATION, VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlAdaptedCalendarEvent person \u003d new XmlAdaptedCalendarEvent(VALID_TITLE, null,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "            VALID_START, VALID_END, VALID_LOCATION,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void toModelType_invalidStart_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlAdaptedCalendarEvent person \u003d new XmlAdaptedCalendarEvent(VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "            INVALID_START, VALID_END, VALID_LOCATION, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        String expectedMessage \u003d DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void toModelType_nullStart_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlAdaptedCalendarEvent person \u003d new XmlAdaptedCalendarEvent(VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "            null, VALID_END, VALID_LOCATION,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "            VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Start\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void toModelType_invalidEnd_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlAdaptedCalendarEvent person \u003d new XmlAdaptedCalendarEvent(VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "            VALID_START, INVALID_END, VALID_LOCATION, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        String expectedMessage \u003d DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void toModelType_nullEnd_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlAdaptedCalendarEvent person \u003d new XmlAdaptedCalendarEvent(VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "            VALID_START, null, VALID_LOCATION, VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"End\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void toModelType_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlAdaptedCalendarEvent person \u003d new XmlAdaptedCalendarEvent(VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "            VALID_START, VALID_END, INVALID_LOCATION, VALID_TAGS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String expectedMessage \u003d Venue.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public void toModelType_nullLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlAdaptedCalendarEvent person \u003d new XmlAdaptedCalendarEvent(VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "            VALID_START, VALID_END, null, VALID_TAGS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlAdaptedCalendarEvent calendarEvent \u003d new XmlAdaptedCalendarEvent(VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vig42"
        },
        "content": "            VALID_START, VALID_END, VALID_LOCATION, invalidTags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, calendarEvent::toModelType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 20,
      "vig42": 61,
      "pangjiahao": 2,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedToDoListEventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.storage.XmlAdaptedToDoListEvent.MISSING_TODOLIST_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.LECTURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class XmlAdaptedToDoListEventTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final String INVALID_TITLE \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final String VALID_TITLE \u003d LECTURE.getTitle().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d LECTURE.getDescription().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final String VALID_PRIORITY \u003d LECTURE.getPriority().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void toModelType_validToDoListEventDetails_returnsToDoListEvent() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlAdaptedToDoListEvent toDoListEvent \u003d new XmlAdaptedToDoListEvent(LECTURE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(LECTURE, toDoListEvent.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlAdaptedToDoListEvent toDoListEvent \u003d new XmlAdaptedToDoListEvent(INVALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            VALID_PRIORITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, toDoListEvent::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void toModelType_nullTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlAdaptedToDoListEvent doListEvent \u003d new XmlAdaptedToDoListEvent(null, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            VALID_PRIORITY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_TODOLIST_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, doListEvent::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlAdaptedToDoListEvent toDoListEvent \u003d new XmlAdaptedToDoListEvent(VALID_TITLE, INVALID_DESCRIPTION,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            VALID_PRIORITY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, toDoListEvent::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlAdaptedToDoListEvent toDoListEvent \u003d new XmlAdaptedToDoListEvent(VALID_TITLE, null,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            VALID_PRIORITY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            String.format(MISSING_TODOLIST_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, toDoListEvent::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void toModelType_invalidPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlAdaptedToDoListEvent toDoListEvent \u003d new XmlAdaptedToDoListEvent(VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            INVALID_PRIORITY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, toDoListEvent::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void toModelType_nullPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlAdaptedToDoListEvent toDoListEvent \u003d new XmlAdaptedToDoListEvent(VALID_TITLE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_TODOLIST_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, toDoListEvent::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSchedulerStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2103_LECTURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.GEQ1000_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.LUNCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalScheduler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class XmlSchedulerStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSchedulerStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void readScheduler_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        readScheduler(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private java.util.Optional\u003cReadOnlyScheduler\u003e readScheduler(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return new XmlSchedulerStorage(Paths.get(filePath)).readScheduler(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(readScheduler(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        readScheduler(\"NotXmlFormatScheduler.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void readScheduler_invalidPersonScheduler_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "        readScheduler(\"invalidCalendarEventScheduler.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void readScheduler_invalidAndValidPersonScheduler_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        readScheduler(\"invalidAndValidCalendarEvent\" + \"Scheduler.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempScheduler.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Scheduler original \u003d getTypicalScheduler();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlSchedulerStorage xmlSchedulerStorage \u003d new XmlSchedulerStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "        xmlSchedulerStorage.saveScheduler(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ReadOnlyScheduler readBack \u003d xmlSchedulerStorage.readScheduler(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(original, new Scheduler(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "        original.addCalendarEvent(GEQ1000_LECTURE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "        original.removeCalendarEvent(CS2103_LECTURE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "        xmlSchedulerStorage.saveScheduler(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "        readBack \u003d xmlSchedulerStorage.readScheduler(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(original, new Scheduler(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "        original.addCalendarEvent(LUNCH);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "        xmlSchedulerStorage.saveScheduler(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "        readBack \u003d xmlSchedulerStorage.readScheduler().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(original, new Scheduler(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void saveScheduler_nullScheduler_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "        saveScheduler(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Saves {@code scheduler} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void saveScheduler(ReadOnlyScheduler scheduler, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "            new XmlSchedulerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .saveScheduler(scheduler, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void saveScheduler_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "        saveScheduler(new Scheduler(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "vig42": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableSchedulerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.TypicalEvents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class XmlSerializableSchedulerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableSchedulerTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final Path TYPICAL_CALENDAR_EVENTS_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .resolve(\"typicalCalendarEventsScheduler\" + \".xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final Path INVALID_CALENDAR_EVENTS_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .resolve(\"invalidCalendarEventScheduler\" + \".xml\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final Path DUPLICATE_CALENDAR_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \"duplicateCalendarEventScheduler.xml\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlSerializableScheduler dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_CALENDAR_EVENTS_FILE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "            XmlSerializableScheduler.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Scheduler schedulerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Scheduler typicalEventsScheduler \u003d TypicalEvents.getTypicalScheduler();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(schedulerFromFile, typicalEventsScheduler);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlSerializableScheduler dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_CALENDAR_EVENTS_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "            XmlSerializableScheduler.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlSerializableScheduler dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_CALENDAR_EVENTS_FILE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "            XmlSerializableScheduler.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "        thrown.expectMessage(XmlSerializableScheduler.MESSAGE_DUPLICATE_CALENDAR_EVENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 9,
      "vig42": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableToDoListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ToDoList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.TypicalTodoListEvents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class XmlSerializableToDoListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableToDoListTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final Path TYPICAL_TODOLIST_EVENTS_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        .resolve(\"typicalToDoListEventsToDoList\" + \".xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final Path INVALID_TODOLIST_EVENTS_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        .resolve(\"invalidToDoListEventToDoList\" + \".xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final Path DUPLICATE_TODOLIST_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        \"duplicateToDoListEventToDoList.xml\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void toModelType_typicalToDoListEventsFile_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlSerializableToDoList dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_TODOLIST_EVENTS_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            XmlSerializableToDoList.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoList toDoListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoList typicalEventsToDoList \u003d TypicalTodoListEvents.getTypicalToDoList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(toDoListFromFile, typicalEventsToDoList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void toModelType_invalidToDoListEventFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlSerializableToDoList dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TODOLIST_EVENTS_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            XmlSerializableToDoList.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void toModelType_duplicateToDoListEvents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlSerializableToDoList dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_TODOLIST_EVENTS_FILE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            XmlSerializableToDoList.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expectMessage(XmlSerializableToDoList.MESSAGE_DUPLICATE_TODOLIST_EVENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlToDoListStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.CS2106LAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.CS3230WA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.MIDTERM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.getTypicalToDoList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ReadOnlyToDoList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ToDoList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class XmlToDoListStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlToDoListStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void readToDoList_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        readToDoList(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private java.util.Optional\u003cReadOnlyToDoList\u003e readToDoList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return new XmlToDoListStorage(Paths.get(filePath)).readToDoList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(readToDoList(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        readToDoList(\"NotXmlFormatToDoList.xml\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void readToDoList_invalidToDoList_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        readToDoList(\"invalidToDoListEventToDoList.xml\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void readToDoList_invalidAndValidToDoList_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        readToDoList(\"invalidAndValidToDoListEvent\" + \"ToDoList.xml\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void readAndSaveToDoList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempToDoList.xml\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoList original \u003d getTypicalToDoList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlToDoListStorage xmlToDoListStorage \u003d new XmlToDoListStorage(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        xmlToDoListStorage.saveToDoList(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ReadOnlyToDoList readBack \u003d xmlToDoListStorage.readToDoList(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(original, new ToDoList(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        original.addToDoListEvent(CS2106LAB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        original.removeToDoListEvent(MIDTERM);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        xmlToDoListStorage.saveToDoList(original, filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        readBack \u003d xmlToDoListStorage.readToDoList(filePath).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(original, new ToDoList(readBack));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        original.addToDoListEvent(CS3230WA);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        xmlToDoListStorage.saveToDoList(original); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        readBack \u003d xmlToDoListStorage.readToDoList().get(); //file path not specified"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(original, new ToDoList(readBack));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void saveToDoList_nullToDoList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        saveToDoList(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Saves {@code toDoList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void saveToDoList(ReadOnlyToDoList toDoList, String filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new XmlToDoListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                .saveToDoList(toDoList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void saveToDoList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        saveToDoList(new ToDoList(), null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CalendarEventBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTimeInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Venue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": " * A utility class to help with building CalendarEvent objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class CalendarEventBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"CS2103 Lecture\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Abstraction, IntelliJ, Gradle\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String DEFAULT_START_DATETIME \u003d \"2018-10-16 14:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String DEFAULT_END_DATETIME \u003d \"2018-10-16 16:00\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String DEFAULT_VENUE \u003d \"i3 Auditorium\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private DateTime start;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private DateTime end;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public CalendarEventBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "        start \u003d new DateTime(DEFAULT_START_DATETIME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        end \u003d new DateTime(DEFAULT_END_DATETIME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        venue \u003d new Venue(DEFAULT_VENUE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Initializes the CalendarEventBuilder with the data of {@code calendarEventToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public CalendarEventBuilder(CalendarEvent calendarEventToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        title \u003d calendarEventToCopy.getTitle();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        description \u003d calendarEventToCopy.getDescriptionObject();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        start \u003d calendarEventToCopy.getStart();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        end \u003d calendarEventToCopy.getEnd();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        venue \u003d calendarEventToCopy.getVenue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(calendarEventToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Sets the {@code Title} of the {@code CalendarEvent} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public CalendarEventBuilder withTitle(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        this.title \u003d new Title(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code CalendarEvent} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public CalendarEventBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Sets the {@code Venue} of the {@code CalendarEvent} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public CalendarEventBuilder withVenue(String venue) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        this.venue \u003d new Venue(venue);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Sets the start {@code DateTime} of the {@code CalendarEvent} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CalendarEventBuilder withStart(String start) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.start \u003d new DateTime(start);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Sets the end {@code DateTime} of the {@code CalendarEvent} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CalendarEventBuilder withEnd(String end) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.end \u003d new DateTime(end);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Sets the {@code Description} of the {@code CalendarEvent} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public CalendarEventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public CalendarEvent build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return new CalendarEvent(title, description, new DateTimeInfo(start, end), venue, tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 28,
      "vig42": 34,
      "pangjiahao": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CalendarEventUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": " * A utility class for CalendarEvent."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class CalendarEventUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns an add command string for adding the {@code calendarevent}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static String getAddCommand(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return AddEventCommand.COMMAND_WORD + \" \" + getCalendarEventDetails(calendarEvent);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns the part of command string for the given {@code calendarevent}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static String getCalendarEventDetails(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        sb.append(PREFIX_TITLE + calendarEvent.getTitle().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + calendarEvent.getDescriptionObject().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "        sb.append(PREFIX_START + calendarEvent.getStart().toInputFormat() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        sb.append(PREFIX_END + calendarEvent.getEnd().toInputFormat() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        sb.append(PREFIX_VENUE + calendarEvent.getVenue().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        calendarEvent.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns the part of command string for the given {@code EditCalendarEventDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static String getEditCalendarEventDescriptorDetails("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            EditEventCommand.EditCalendarEventDescriptor descriptor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptor.getTitle().ifPresent(name -\u003e sb.append(PREFIX_TITLE).append(name.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptor.getDescription().ifPresent(phone -\u003e sb.append(PREFIX_DESCRIPTION).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        descriptor.getStart().ifPresent(start -\u003e sb.append(PREFIX_START).append(start.toInputFormat()).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        descriptor.getEnd().ifPresent(end -\u003e sb.append(PREFIX_END).append(end.toInputFormat()).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptor.getVenue().ifPresent(address -\u003e sb.append(PREFIX_VENUE).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 10,
      "vig42": 13,
      "pangjiahao": 1,
      "SleepySanjinLi": 5,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditCalendarEventDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand.EditCalendarEventDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Venue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": " * A utility class to help with building EditCalendarEventDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class EditCalendarEventDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private EditCalendarEventDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public EditCalendarEventDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "        descriptor \u003d new EditCalendarEventDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public EditCalendarEventDescriptorBuilder(EditCalendarEventDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.descriptor \u003d new EditCalendarEventDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns an {@code EditCalendarEventDescriptor} with fields containing {@code calendarevent}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public EditCalendarEventDescriptorBuilder(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        descriptor \u003d new EditCalendarEventDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptor.setTitle(calendarEvent.getTitle());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        descriptor.setDescription(calendarEvent.getDescriptionObject());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        descriptor.setStart(calendarEvent.getStart());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "        descriptor.setEnd(calendarEvent.getEnd());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptor.setVenue(calendarEvent.getVenue());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "        descriptor.setTags(calendarEvent.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Sets the {@code Title} of the {@code EditCalendarEventDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public EditCalendarEventDescriptorBuilder withTitle(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptor.setTitle(new Title(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditCalendarEventDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public EditCalendarEventDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Sets the start {@code DateTime} of the {@code EditCalendarEventDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public EditCalendarEventDescriptorBuilder withStart(String start) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "        descriptor.setStart(new DateTime(start));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Sets the end {@code DateTime} of the {@code EditCalendarEventDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public EditCalendarEventDescriptorBuilder withEnd(String end) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "        descriptor.setEnd(new DateTime(end));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Sets the {@code Venue} of the {@code EditCalendarEventDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public EditCalendarEventDescriptorBuilder withVenue(String address) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        descriptor.setVenue(new Venue(address));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCalendarEventDescriptor}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public EditCalendarEventDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public EditCalendarEventDescriptor build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 21,
      "vig42": 28,
      "pangjiahao": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SchedulerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " * {@code Scheduler ab \u003d new SchedulerBuilder().withCalendarEvent(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class SchedulerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private Scheduler scheduler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public SchedulerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "        scheduler \u003d new Scheduler();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public SchedulerBuilder(Scheduler scheduler) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "        this.scheduler \u003d scheduler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Adds a new {@code CalendarEvent} to the {@code Scheduler} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public SchedulerBuilder withCalendarEvent(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        scheduler.addCalendarEvent(calendarEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public Scheduler build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return scheduler;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 5,
      "vig42": 9,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns the middle index of the calendarevent in the {@code model}\u0027s calendarevent list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAndSortedCalendarEventList().size() / 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns the last index of the calendarevent in the {@code model}\u0027s calendarevent list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAndSortedCalendarEventList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns the calendarevent in the {@code model}\u0027s calendarevent list at {@code index}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static CalendarEvent getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return model.getFilteredAndSortedCalendarEventList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns the todolistevent in the {@code modelToDo}\u0027s todolistevent list at {@code index}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static ToDoListEvent getTask(ModelToDo modelToDo, Index index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return modelToDo.getFilteredToDoListEventList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 8,
      "SleepySanjinLi": 8,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ToDoListBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ToDoList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * A utility class to help with building ToDoList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": " * {@code ToDoList ab \u003d new ToDoListBuilder().withCalendarEvent(\"TUTORIAL\", \"CS2103_LECTURE\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ToDoListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private ToDoList toDolist;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDolist \u003d new ToDoList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListBuilder(ToDoList toDolist) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.toDolist \u003d toDolist;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Adds a new {@code ToDoListEvent} to the {@code ToDoList} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListBuilder withEvent(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        toDolist.addToDoListEvent(toDoListEvent);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoList build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return toDolist;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 1,
      "SleepySanjinLi": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ToDoListEventBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.Priority;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * A utility class to help with building ToDoListEvent objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ToDoListEventBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"CS2103 Lecture\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Abstraction, IntelliJ, Gradle\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"H\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListEventBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Initializes the ToDoListEventBuilder with the data of {@code toDoListEventToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListEventBuilder(ToDoListEvent toDoListEventToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        title \u003d toDoListEventToCopy.getTitle();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        description \u003d toDoListEventToCopy.getDescription();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        priority \u003d toDoListEventToCopy.getPriority();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Sets the {@code Title} of the {@code ToDoListEvent} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListEventBuilder withTitle(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.title \u003d new Title(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Sets the {@code Description} of the {@code ToDoListEvent} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListEventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Sets the {@code Priority} of the {@code ToDoListEvent} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListEventBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public ToDoListEvent build() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return new ToDoListEvent(title, description, priority);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ToDoListEventUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.AddToDoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * A utility class for ToDoListEvent."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ToDoListEventUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns an add command string for adding the {@code calendarevent}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static String getAddToDoCommand(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return AddToDoCommand.COMMAND_WORD + \" \" + getToDoListEventDetails(toDoListEvent);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns the part of command string for the given {@code todolistevent}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static String getToDoListEventDetails(ToDoListEvent toDoListEvent) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        sb.append(PREFIX_TITLE + toDoListEvent.getTitle().value + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + toDoListEvent.getDescription().value + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        sb.append(PREFIX_PRIORITY + toDoListEvent.getPriority().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_LECTURE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATETIME_LECTURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATETIME_LECTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_LECTURE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TUTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_LECTURE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_TUTORIAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": " * A utility class containing a list of {@code CalendarEvent} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final CalendarEvent CS2103_LECTURE \u003d new CalendarEventBuilder().withTitle(\"CS2103 Lecture\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withStart(\"2018-11-15 16:00\").withEnd(\"2018-11-15 18:00\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withVenue(\"i3 Auditorium\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withDescription(\"Abstraction, Gradle, JUnit\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withTags(\"lecture\", \"CS2103\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final CalendarEvent CS2104_TUTORIAL \u003d new CalendarEventBuilder().withTitle(\"CS2104 Tutorial\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withStart(\"2018-11-13 14:00\").withEnd(\"2018-11-13 16:00\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withVenue(\"AS6 04-21\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withDescription(\"Monadic Parsers\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withTags(\"tutorial\", \"CS2104\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final CalendarEvent CS2040_LAB \u003d new CalendarEventBuilder().withTitle(\"CS2040 Lab\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withStart(\"2018-11-14 08:00\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withEnd(\"2018-11-14 10:00\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withDescription(\"Linked Lists\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withVenue(\"COM1 02-09\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final CalendarEvent FIN3101_SEMINAR \u003d new CalendarEventBuilder().withTitle(\"FIN3101 Seminar\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withStart(\"2018-11-16 10:00\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withEnd(\"2018-11-16 15:00\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withDescription(\"One-Fund Theorem\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withVenue(\"Marina Boulevard\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withTags(\"seminar\", \"FIN3101\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final CalendarEvent CHOIR_PRACTICE \u003d new CalendarEventBuilder().withTitle(\"Choir Practice\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withStart(\"2018-11-16 19:00\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withEnd(\"2018-11-16 22:00\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withDescription(\"Bring songbook\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withVenue(\"Little Tokyo\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final CalendarEvent CAREER_FAIR \u003d new CalendarEventBuilder().withTitle(\"Career Fair\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withStart(\"2018-11-17 09:00\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withEnd(\"2018-11-17 18:00\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withDescription(\"Bring resume\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withVenue(\"MPSH 1\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final CalendarEvent GOOGLE_INTERVIEW \u003d new CalendarEventBuilder().withTitle(\"Google Interview\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withStart(\"2018-11-14 14:00\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withEnd(\"2018-11-14 16:00\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withDescription(\"Bring water bottle\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "        .withTags(\"interview\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withVenue(\"Mountain View\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final CalendarEvent GEQ1000_LECTURE \u003d new CalendarEventBuilder().withTitle(\"GEQ1000 Lecture\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withDescription(\"Design Wallet\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withVenue(\"SRC 02-07\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final CalendarEvent LUNCH \u003d new CalendarEventBuilder().withTitle(\"Lunch At McDs\").withDescription("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        \"Bring girlfriend\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        .withVenue(\"Hanbaobao Avenue\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "    // Manually added - CalendarEvent\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final CalendarEvent LECTURE \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        new CalendarEventBuilder().withTitle(VALID_TITLE_LECTURE).withDescription(VALID_DESCRIPTION_LECTURE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withStart(VALID_START_DATETIME_LECTURE).withEnd(VALID_END_DATETIME_LECTURE)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withVenue(VALID_VENUE_LECTURE).withTags(VALID_TAG_TUTORIAL).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final CalendarEvent TUTORIAL \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        new CalendarEventBuilder().withTitle(VALID_TITLE_TUTORIAL).withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withStart(VALID_START_DATETIME_TUTORIAL).withEnd(VALID_END_DATETIME_TUTORIAL)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withVenue(VALID_VENUE_TUTORIAL).withTags(VALID_TAG_LECTURE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "                VALID_TAG_TUTORIAL)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static final String KEYWORD_MATCHING_LECTURE \u003d \"Lecture\"; // A keyword that matches LECTURE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static final String KEYWORD_MATCHING_EXACT_TUTORIAL \u003d \"JS1011 Tutorial\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private TypicalEvents() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns an {@code Scheduler} with all the typical persons."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static Scheduler getTypicalScheduler() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Scheduler ab \u003d new Scheduler();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "        for (CalendarEvent calendarEvent : getTypicalCalendarEvents()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "            ab.addCalendarEvent(calendarEvent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static List\u003cCalendarEvent\u003e getTypicalCalendarEvents() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103_LECTURE, CS2104_TUTORIAL, CS2040_LAB, FIN3101_SEMINAR,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                                    CHOIR_PRACTICE, CAREER_FAIR, GOOGLE_INTERVIEW));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 45,
      "vig42": 35,
      "pangjiahao": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final Index INDEX_FIRST_ELEMENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final Index INDEX_SECOND_ELEMENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static final Index INDEX_THIRD_ELEMENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTodoListEvents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_ASSIGNMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_LECTURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_ASSIGNMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_ASSIGNMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_LECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ToDoList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " * A utility class containing a list of {@code ToDoListEvent} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class TypicalTodoListEvents {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent CS1000 \u003d new ToDoListEventBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withTitle(\"CS1000\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"teach to friends\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"L\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent CS2000 \u003d new ToDoListEventBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withTitle(\"CS2000\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"teach to friends\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"M\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent CS3000 \u003d new ToDoListEventBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withTitle(\"CS3000\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"teach to friends\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"H\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent CS4000 \u003d new ToDoListEventBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withTitle(\"CS4000\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"seek help from prof\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"L\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent CS5000 \u003d new ToDoListEventBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withTitle(\"CS5000\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"seek help from prof\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"M\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent CS6000 \u003d new ToDoListEventBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withTitle(\"CS6000\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"seek help from prof\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"H\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent CS7000 \u003d new ToDoListEventBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withTitle(\"CS7000\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"extremely difficult\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"H\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent CS8000 \u003d new ToDoListEventBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withTitle(\"CS8000\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"extremely difficult\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"H\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent MIDTERM \u003d new ToDoListEventBuilder().withTitle(\"CS2103 Midterm\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"cover all materials from week 1 to week 7\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"H\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent TUTORIAL \u003d new ToDoListEventBuilder().withTitle(\"JS1011 Tutorial\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"Monadic parsers\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"L\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent WORKSHOP \u003d new ToDoListEventBuilder().withTitle(\"Interview workshop\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"will be helpful for interview\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"L\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent ENTERTAINMENT \u003d new ToDoListEventBuilder().withTitle(\"Daniel\u0027s birthday party\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"remember to buy gifts\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"M\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent CS2106LAB \u003d new ToDoListEventBuilder().withTitle(\"CS2106 LAB4\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"write mymalloc() and myfree()\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"H\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent CS3230WA \u003d new ToDoListEventBuilder().withTitle(\"CS3230 Written Assignment\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withDescription(\"proof questions\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            .withPriority(\"M\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    // Manually added - ToDoListEvent\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent LECTURE \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEventBuilder().withTitle(VALID_TITLE_LECTURE).withDescription(VALID_DESCRIPTION_LECTURE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                    .withPriority(VALID_PRIORITY_LECTURE).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static final ToDoListEvent ASSIGNMENT \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            new ToDoListEventBuilder().withTitle(VALID_TITLE_ASSIGNMENT).withDescription(VALID_DESCRIPTION_ASSIGNMENT)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                    .withPriority(VALID_PRIORITY_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private TypicalTodoListEvents() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns an {@code ToDoList} with all the typical persons."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static ToDoList getTypicalToDoList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoList toDoList \u003d new ToDoList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        for (ToDoListEvent todo : getTypicalToDoListEvents()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            toDoList.addToDoListEvent(todo);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return toDoList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static List\u003cToDoListEvent\u003e getTypicalToDoListEvents() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MIDTERM, TUTORIAL, WORKSHOP, ENTERTAINMENT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                CS1000, CS2000, CS3000, CS4000, CS5000, CS6000));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CalendarDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendarEvents;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import guitests.guihandles.CalendarDisplayHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.commons.events.ui.CalendarPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.commons.events.ui.JumpToDateTimeEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "public class CalendarDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final ObservableList\u003cCalendarEvent\u003e TYPICAL_CALENDAR_EVENTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        FXCollections.observableList(getTypicalCalendarEvents());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final JumpToDateTimeEvent JUMP_TO_DATE_TIME_EVENT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        new JumpToDateTimeEvent(LocalDateTime.now().plusWeeks(3));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private static final CalendarPanelSelectionChangedEvent SELECTION_CHANGED_EVENT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        new CalendarPanelSelectionChangedEvent(TYPICAL_CALENDAR_EVENTS.get(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private CalendarDisplayHandle calendarDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Test that {@code CalendarDisplay} is able to update when changes occur in its backing list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /* For some reason, agenda is not updating"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        ArrayList\u003cCalendarEvent\u003e backingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        initUi(FXCollections.observableList(backingList));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // add multiple events"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        backingList.addAll(getTypicalCalendarEvents());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertListMatchingIgnoreOrder(calendarDisplayHandle, backingList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // remove event from backing list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        CalendarEvent typicalCalendarEvent \u003d backingList.remove(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertListMatchingIgnoreOrder(calendarDisplayHandle, backingList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // add event to backing list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        backingList.add(typicalCalendarEvent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertListMatchingIgnoreOrder(calendarDisplayHandle, backingList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // set event"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        backingList.set(0, new CalendarEventBuilder(typicalCalendarEvent).withTitle(VALID_TITLE_TUTORIAL).build());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertListMatchingIgnoreOrder(calendarDisplayHandle, backingList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // remove multiple events"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        backingList.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertListMatchingIgnoreOrder(calendarDisplayHandle, backingList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Test navigation"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void calendarDisplay_displayNextAndPreviousWeek() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        initUi(TYPICAL_CALENDAR_EVENTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCalendarDisplaysWeeklyView(calendarDisplayHandle);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        LocalDateTime initialDisplayTime \u003d calendarDisplayHandle.getDisplayedLocalDateTime();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // go to next week"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        guiRobot.push(KeyCode.RIGHT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCalendarDisplaysAsExpected(calendarDisplayHandle, initialDisplayTime.plusWeeks(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // go to previous week"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        guiRobot.push(KeyCode.LEFT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCalendarDisplaysAsExpected(calendarDisplayHandle, initialDisplayTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // go to previous week again"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        guiRobot.push(KeyCode.LEFT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCalendarDisplaysAsExpected(calendarDisplayHandle, initialDisplayTime.minusWeeks(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void handleJumpToDateTimeEvent() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        initUi(TYPICAL_CALENDAR_EVENTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        postNow(JUMP_TO_DATE_TIME_EVENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCalendarDisplaysAsExpected(calendarDisplayHandle, JUMP_TO_DATE_TIME_EVENT.targetLocalDateTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void handleCalendarPanelSelectionChangedEvent() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        initUi(TYPICAL_CALENDAR_EVENTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        postNow(SELECTION_CHANGED_EVENT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCalendarDisplaysAsExpected(calendarDisplayHandle,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            SELECTION_CHANGED_EVENT.newSelection.getStartLocalDateTime());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void assertCalendarDisplaysWeeklyView(CalendarDisplayHandle calendarDisplayHandle) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertTrue(calendarDisplayHandle.isWeeklyView());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void assertCalendarDisplaysAsExpected(CalendarDisplayHandle calendarDisplayHandle,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                                                 LocalDateTime expectedTime) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertEquals(expectedTime, calendarDisplayHandle.getDisplayedLocalDateTime());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Initializes {@code calendarDisplayHandle} with a {@code CalendarDisplay} backed by {@code"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * backingList}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code CalendarDisplay}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void initUi(ObservableList\u003cCalendarEvent\u003e backingList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        CalendarDisplay calendarDisplay \u003d new CalendarDisplay(backingList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        calendarDisplay.setDisplayedDateTime(LocalDateTime.now().withNano(0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        uiPartRule.setUiPart(calendarDisplay);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        calendarDisplayHandle \u003d new CalendarDisplayHandle("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            getChildNode(calendarDisplay.getRoot(), CalendarDisplayHandle.CALENDAR_DISPLAY_BOX_ID));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CalendarEventCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import guitests.guihandles.CalendarEventCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class CalendarEventCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent calendarEventWithNoTags \u003d new CalendarEventBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEventCard calendarEventCard \u003d new CalendarEventCard(calendarEventWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uiPartRule.setUiPart(calendarEventCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCardDisplay(calendarEventCard, calendarEventWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent calendarEventWithTags \u003d new CalendarEventBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "        calendarEventCard \u003d new CalendarEventCard(calendarEventWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        uiPartRule.setUiPart(calendarEventCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCardDisplay(calendarEventCard, calendarEventWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent calendarEvent \u003d new CalendarEventBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEventCard calendarEventCard \u003d new CalendarEventCard(calendarEvent, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // same calendarevent, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEventCard copy \u003d new CalendarEventCard(calendarEvent, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(calendarEventCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(calendarEventCard.equals(calendarEventCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(calendarEventCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(calendarEventCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // different calendarevent, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent differentCalendarEvent \u003d new CalendarEventBuilder().withTitle(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(calendarEventCard.equals(new CalendarEventCard(differentCalendarEvent, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // same calendarevent, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(calendarEventCard.equals(new CalendarEventCard(calendarEvent, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Asserts that {@code calendarEventCard} displays the details of {@code expectedCalendarEvent} correctly and"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * matches"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private void assertCardDisplay(CalendarEventCard calendarEventCard, CalendarEvent expectedCalendarEvent,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                                   int expectedId) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEventCardHandle calendarEventCardHandle \u003d new CalendarEventCardHandle(calendarEventCard.getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", calendarEventCardHandle.getId());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "        // verify calendarevent details are displayed correctly"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCardDisplaysPerson(expectedCalendarEvent, calendarEventCardHandle);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 9,
      "vig42": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CalendarEventDialogTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertDialogDisplaysCalendarEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import guitests.guihandles.CalendarEventDialogHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "public class CalendarEventDialogTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        CalendarEvent calendarEventWithNoTags \u003d new CalendarEventBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        CalendarEventDialog calendarEventDialog \u003d new CalendarEventDialog(calendarEventWithNoTags);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        uiPartRule.setUiPart(calendarEventDialog);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCardDisplay(calendarEventDialog, calendarEventWithNoTags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        CalendarEvent calendarEventWithTags \u003d new CalendarEventBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        calendarEventDialog \u003d new CalendarEventDialog(calendarEventWithTags);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        uiPartRule.setUiPart(calendarEventDialog);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCardDisplay(calendarEventDialog, calendarEventWithTags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        CalendarEvent calendarEvent \u003d new CalendarEventBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        CalendarEventDialog calendarEventDialog \u003d new CalendarEventDialog(calendarEvent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // same calendar event -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        CalendarEventDialog copy \u003d new CalendarEventDialog(calendarEvent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertTrue(calendarEventDialog.equals(copy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertTrue(calendarEventDialog.equals(calendarEventDialog));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertFalse(calendarEventDialog.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertFalse(calendarEventDialog.equals(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Asserts that {@code calendarEventDialog} displays the details of {@code expectedCalendarEvent} correctly and"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * matches"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void assertCardDisplay(CalendarEventDialog calendarEventDialog, CalendarEvent expectedCalendarEvent) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        CalendarEventDialogHandle calendarEventDialogHandle \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            new CalendarEventDialogHandle(calendarEventDialog.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertDialogDisplaysCalendarEvent(expectedCalendarEvent, calendarEventDialogHandle);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CalendarPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vig42"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalCalendarEvents;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCalendarEventCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import guitests.guihandles.CalendarEventCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import guitests.guihandles.CalendarPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.storage.XmlSerializableScheduler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class CalendarPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final ObservableList\u003cCalendarEvent\u003e TYPICAL_CALENDAR_EVENTS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FXCollections.observableList(getTypicalCalendarEvents());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_ELEMENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private CalendarPanelHandle calendarPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vig42"
        },
        "content": "        initUi(TYPICAL_CALENDAR_EVENTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_CALENDAR_EVENTS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            calendarPanelHandle.navigateToCard(TYPICAL_CALENDAR_EVENTS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "            CalendarEvent expectedCalendarEvent \u003d TYPICAL_CALENDAR_EVENTS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            CalendarEventCardHandle actualCard \u003d calendarPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "            assertCardDisplaysPerson(expectedCalendarEvent, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vig42"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        initUi(TYPICAL_CALENDAR_EVENTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vig42"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEventCardHandle expectedPerson \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            calendarPanelHandle.getPersonCardHandle(INDEX_SECOND_ELEMENT.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEventCardHandle selectedPerson \u003d calendarPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCalendarEventCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Verifies that creating and deleting large number of calendar events in {@code CalendarPanel} requires"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * lesser than"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ObservableList\u003cCalendarEvent\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vig42"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }, \"Creation and deletion of event cards exceeded time limit\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Returns a list of calendar events containing {@code calendarEventCount} calendar events that is used to"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * populate the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * {@code CalendarPanel}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private ObservableList\u003cCalendarEvent\u003e createBackingList(int calendarEventCount) throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithCalendarEvents(calendarEventCount);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "        XmlSerializableScheduler xmlScheduler \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "            XmlUtil.getDataFromFile(xmlFile, XmlSerializableScheduler.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return FXCollections.observableArrayList(xmlScheduler.toModelType().getCalendarEventList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Returns a .xml file containing {@code calendarEventCount} calendar events. This file will be deleted when the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * JVM terminates."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private Path createXmlFileWithCalendarEvents(int calendarEventCount) throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "        builder.append(\"\u003cscheduler\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarEventCount; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            builder.append(\"\u003ccalendarEvent\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            builder.append(\"\u003ctitle\u003e\").append(i).append(\"a\u003c/title\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            builder.append(\"\u003cdescription\u003e000\u003c/description\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            builder.append(\"\u003cvenue\u003ea\u003c/venue\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            builder.append(\"\u003c/calendarEvent\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "        builder.append(\"\u003c/scheduler\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Path manyCalendarEventsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyCalendarEvents.xml\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FileUtil.createFile(manyCalendarEventsFile);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "        FileUtil.writeToFile(manyCalendarEventsFile, builder.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": "        manyCalendarEventsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return manyCalendarEventsFile;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Initializes {@code calendarPanelHandle} with a {@code CalendarPanel} backed by {@code"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * backingList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code CalendarPanel}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void initUi(ObservableList\u003cCalendarEvent\u003e backingList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarPanel calendarPanel \u003d new CalendarPanel(backingList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        uiPartRule.setUiPart(calendarPanel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        calendarPanelHandle \u003d new CalendarPanelHandle(getChildNode(calendarPanel.getRoot(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            CalendarPanelHandle.CALENDAR_VIEW_ID));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vig42"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 31,
      "vig42": 94,
      "SleepySanjinLi": 3,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.ListEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelManagerToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListEventCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelToDo modelToDo \u003d new ModelManagerToDo();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Logic logic \u003d new LogicManager(model, modelToDo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String thirdCommand \u003d \"list event\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String thirdCommand \u003d \"list event\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "vig42": 2,
      "SleepySanjinLi": 4,
      "-": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/DescriptionDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertDescriptionDisplayDisplaysToDoListEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import guitests.guihandles.DescriptionDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.testutil.ToDoListEventBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "public class DescriptionDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        ToDoListEvent toDoListEvent \u003d new ToDoListEventBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // id equals 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        DescriptionDisplay descriptionDisplay \u003d new DescriptionDisplay(toDoListEvent, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        uiPartRule.setUiPart(descriptionDisplay);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertDescriptionDisplayDisplays(descriptionDisplay, toDoListEvent, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // id equals 2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        descriptionDisplay \u003d new DescriptionDisplay(toDoListEvent, 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        uiPartRule.setUiPart(descriptionDisplay);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertDescriptionDisplayDisplays(descriptionDisplay, toDoListEvent, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        ToDoListEvent toDoListEvent \u003d new ToDoListEventBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        DescriptionDisplay descriptionDisplay \u003d new DescriptionDisplay(toDoListEvent, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // same toDoListEvent, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        DescriptionDisplay copy \u003d new DescriptionDisplay(toDoListEvent, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertTrue(descriptionDisplay.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertTrue(descriptionDisplay.equals(descriptionDisplay));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertFalse(descriptionDisplay.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertFalse(descriptionDisplay.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // different toDoListEvent, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        ToDoListEvent differentToDoListEvent \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            new ToDoListEventBuilder().withDescription(\"differentDescription\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertFalse(descriptionDisplay.equals(new DescriptionDisplay(differentToDoListEvent, 0)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        // same toDoListEvent, different index -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertFalse(descriptionDisplay.equals(new DescriptionDisplay(toDoListEvent, 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Asserts that {@code descriptionDisplay} displays the details of {@code expectedToDoListEvent} correctly and"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * matches"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private void assertDescriptionDisplayDisplays(DescriptionDisplay descriptionDisplay,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                                                  ToDoListEvent expectedToDoListEvent,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                                                  int expectedId) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        DescriptionDisplayHandle descriptionDisplayHandle \u003d new DescriptionDisplayHandle(descriptionDisplay.getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", descriptionDisplayHandle.getId());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertDescriptionDisplayDisplaysToDoListEvent(expectedToDoListEvent, descriptionDisplayHandle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": " * A GUI unit test class for Scheduler."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelManagerToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                new LogicManager(new ModelManager(), new ModelManagerToDo()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * just for passing checkStyle"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    // @Test Bryan: I removed the exit menu bar since it\u0027s redundant"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 1,
      "SleepySanjinLi": 6,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.commons.events.model.SchedulerChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final SchedulerChangedEvent EVENT_STUB \u003d new SchedulerChangedEvent(new Scheduler());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 3,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TaskListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalTodoListEvents.getTypicalToDoListEvents;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import guitests.guihandles.ToDoListEventCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.storage.XmlSerializableToDoList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class TaskListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final ObservableList\u003cToDoListEvent\u003e TYPICAL_TODOLIST_EVENTS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        FXCollections.observableList(getTypicalToDoListEvents());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private TaskListPanelHandle taskListPanelHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        initUi(TYPICAL_TODOLIST_EVENTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_TODOLIST_EVENTS.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            taskListPanelHandle.navigateToCard(TYPICAL_TODOLIST_EVENTS.get(i));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            ToDoListEvent expectedToDoListEvent \u003d TYPICAL_TODOLIST_EVENTS.get(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            ToDoListEventCardHandle actualCard \u003d taskListPanelHandle.getToDoListCardHandle(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertCardDisplaysToDo(expectedToDoListEvent, actualCard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Verifies that creating and deleting large number of todolist events in {@code TaskListPanel} requires"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * lesser than"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ObservableList\u003cToDoListEvent\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }, \"Creation and deletion of event cards exceeded time limit\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns a list of calendar events containing {@code toDoListEventCount} calendar events that is used to"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * populate the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code TaskListPanel}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private ObservableList\u003cToDoListEvent\u003e createBackingList(int toDoListEventCount) throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithToDoListEvents(toDoListEventCount);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        XmlSerializableToDoList xmlScheduler \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            XmlUtil.getDataFromFile(xmlFile, XmlSerializableToDoList.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return FXCollections.observableArrayList(xmlScheduler.toModelType().getToDoList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns a .xml file containing {@code toDoListEventCount} todolist events. This file will be deleted when the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * JVM terminates."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private Path createXmlFileWithToDoListEvents(int toDoListEventCount) throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        builder.append(\"\u003ctoDoList\u003e\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        for (int i \u003d 0; i \u003c toDoListEventCount; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            builder.append(\"\u003ctoDoListEvent\u003e\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            builder.append(\"\u003ctitle\u003e\").append(i).append(\"a\u003c/title\u003e\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            builder.append(\"\u003cdescription\u003eaaa\u003c/description\u003e\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            builder.append(\"\u003cpriority\u003eH\u003c/priority\u003e\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            builder.append(\"\u003c/toDoListEvent\u003e\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        builder.append(\"\u003c/toDoList\u003e\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        Path manyToDoListEventsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyToDoListEvents.xml\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        FileUtil.createFile(manyToDoListEventsFile);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        FileUtil.writeToFile(manyToDoListEventsFile, builder.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        manyToDoListEventsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return manyToDoListEventsFile;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Initializes {@code taskListPanelHandle} with a {@code TaskListPanel} backed by {@code"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * backingList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code TaskListPanel}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void initUi(ObservableList\u003cToDoListEvent\u003e backingList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        TaskListPanel taskListPanel \u003d new TaskListPanel(backingList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uiPartRule.setUiPart(taskListPanel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        taskListPanelHandle \u003d new TaskListPanelHandle(getChildNode(taskListPanel.getRoot(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            TaskListPanelHandle.TODOLIST_VIEW_ID));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ToDoListEventCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import guitests.guihandles.ToDoListEventCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.ToDoListEventBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class ToDoListEventCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent toDoListEvent \u003d new ToDoListEventBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEventCard toDoListEventCard \u003d new ToDoListEventCard(toDoListEvent, 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        uiPartRule.setUiPart(toDoListEventCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCardDisplay(toDoListEventCard, toDoListEvent, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent toDoListEvent \u003d new ToDoListEventBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEventCard toDoListEventCard \u003d new ToDoListEventCard(toDoListEvent, 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same todolist event, same index -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEventCard copy \u003d new ToDoListEventCard(toDoListEvent, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(toDoListEventCard.equals(copy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(toDoListEventCard.equals(toDoListEventCard));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(toDoListEventCard.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(toDoListEventCard.equals(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // different todolist event, same index -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent differentToDoListEvent \u003d new ToDoListEventBuilder().withTitle(\"differentName\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(toDoListEventCard.equals(new ToDoListEventCard(differentToDoListEvent, 0)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // same todolist event, different index -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertFalse(toDoListEventCard.equals(new ToDoListEventCard(toDoListEvent, 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Asserts that {@code toDoListEventCard} displays the details of {@code expectedToDoListEvent} correctly and"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * matches"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertCardDisplay(ToDoListEventCard toDoListEventCard, ToDoListEvent expectedToDoListEvent,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                                   int expectedId) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEventCardHandle toDoListEventCardHandle \u003d new ToDoListEventCardHandle(toDoListEventCard.getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", toDoListEventCardHandle.getId());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        // verify calendarevent details are displayed correctly"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCardDisplaysToDo(expectedToDoListEvent, toDoListEventCardHandle);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SleepySanjinLi": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import guitests.guihandles.CalendarDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import guitests.guihandles.CalendarEventCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import guitests.guihandles.CalendarEventDialogHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import guitests.guihandles.CalendarPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import guitests.guihandles.DescriptionDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import guitests.guihandles.ToDoListEventCardHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static void assertCalendarEventCardEquals(CalendarEventCardHandle expectedCard,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                                                     CalendarEventCardHandle actualCard) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedCard.getVenue(), actualCard.getVenue());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedCard.getTitle(), actualCard.getTitle());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedCard.getDescription(), actualCard.getDescription());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static void assertCardEqualsToDo(ToDoListEventCardHandle expectedCard, ToDoListEventCardHandle actualCard) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedCard.getPriority(), actualCard.getPriority());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedCard.getTitle(), actualCard.getTitle());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedCalendarEvent}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public static void assertCardDisplaysPerson(CalendarEvent expectedCalendarEvent,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                                                CalendarEventCardHandle actualCard) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedCalendarEvent.getTitle().value, actualCard.getTitle());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertEquals(expectedCalendarEvent.getDescriptionObject().value, actualCard.getDescription());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedCalendarEvent.getVenue().value, actualCard.getVenue());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(expectedCalendarEvent.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            actualCard.getTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Asserts that {@code actualDialog} displays the details of {@code expectedCalendarEvent}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static void assertDialogDisplaysCalendarEvent(CalendarEvent expectedCalendarEvent,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                                                         CalendarEventDialogHandle actualDialog) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertEquals(expectedCalendarEvent.getTitle().value, actualDialog.getTitle());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertEquals(expectedCalendarEvent.getDescriptionObject().value, actualDialog.getDescription());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertEquals(expectedCalendarEvent.getVenue().value, actualDialog.getVenue());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertEquals(expectedCalendarEvent.getStartLocalDateTime().toString(), actualDialog.getDateTimeString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Asserts that {@code descriptionDisplayHandle} displays the details of {@code toDoListEvent}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public static void assertDescriptionDisplayDisplaysToDoListEvent(ToDoListEvent expectedToDoListEvent,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                                                         DescriptionDisplayHandle descriptionDisplayHandle) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertEquals(expectedToDoListEvent.getDescription().value, descriptionDisplayHandle.getDescription());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedToDoListEvent}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static void assertCardDisplaysToDo(ToDoListEvent expectedToDoListEvent,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                                              ToDoListEventCardHandle actualCard) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedToDoListEvent.getTitle().value, actualCard.getTitle());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedToDoListEvent.getPriority().value, actualCard.getPriority());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Asserts that the list in {@code calendarPanelHandle} displays the details of {@code calendarEvents}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * correctly and"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static void assertCalendarEventListMatching(CalendarPanelHandle calendarPanelHandle,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                                                       CalendarEvent... calendarEvents) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarEvents.length; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            calendarPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            assertCardDisplaysPerson(calendarEvents[i], calendarPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Asserts that the list in {@code calendarPanelHandle} displays the details of {@code calendarEvents}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * correctly and"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static void assertCalendarEventListMatching(CalendarPanelHandle calendarPanelHandle,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                                                       List\u003cCalendarEvent\u003e calendarEvents) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCalendarEventListMatching(calendarPanelHandle, calendarEvents.toArray(new CalendarEvent[0]));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Asserts that the list in {@code calendarDisplayHandle} displays the details of {@code calendarEvents} correctly."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static void assertCalendarListMatchingIgnoreOrder(CalendarDisplayHandle calendarDisplayHandle,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                                                             List\u003cCalendarEvent\u003e calendarEvents) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertEquals(calendarDisplayHandle.getDisplayedCalendarEvents().size(), calendarEvents.size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertTrue(calendarDisplayHandle.getDisplayedCalendarEvents().containsAll(calendarEvents));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Asserts the size of the list in {@code calendarPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static void assertCalendarListSize(CalendarPanelHandle calendarPanelHandle, int size) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        int numberOfPeople \u003d calendarPanelHandle.getListSize();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code toDoListEvents}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * correctly and"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static void assertToDoListMatching(TaskListPanelHandle taskListPanelHandle,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                                                  ToDoListEvent... toDoListEvents) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        for (int i \u003d 0; i \u003c toDoListEvents.length; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            taskListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            assertCardDisplaysToDo(toDoListEvents[i], taskListPanelHandle.getToDoListCardHandle(i));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code toDoListEvents}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * correctly and"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static void assertToDoListMatching(TaskListPanelHandle taskListPanelHandle,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                                              List\u003cToDoListEvent\u003e toDoListEvents) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertToDoListMatching(taskListPanelHandle, toDoListEvents.toArray(new ToDoListEvent[0]));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Asserts that the list in {@code calendarDisplayHandle} displays the details of {@code calendarEvents}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * correctly and"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static void assertToDoListMatchingIgnoreOrder(CalendarDisplayHandle calendarDisplayHandle,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                                                             List\u003cToDoListEvent\u003e toDoListEvents) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(calendarDisplayHandle.getDisplayedCalendarEvents().size(), toDoListEvents.size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertTrue(calendarDisplayHandle.getDisplayedCalendarEvents().containsAll(toDoListEvents));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Asserts the size of the list in {@code taskListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public static void assertToDoListSize(TaskListPanelHandle taskListPanelHandle, int size) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        int numberOfTask \u003d taskListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(size, numberOfTask);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 18,
      "vig42": 5,
      "pangjiahao": 31,
      "SleepySanjinLi": 63,
      "-": 58
    }
  },
  {
    "path": "src/test/java/systemtests/AddEventCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_LECTURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DESC_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VENUE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DESC_LECTURE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_LECTURE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TUTORIAL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VENUE_DESC_LECTURE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VENUE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2040_LAB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2103_LECTURE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.GEQ1000_LECTURE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.KEYWORD_MATCHING_LECTURE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.LECTURE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.LUNCH;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.TUTORIAL;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Venue;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.CalendarEventUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class AddEventCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: add a calendar event without tags to a non-empty scheduler, command with leading spaces and trailing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "         spaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent toAdd \u003d LECTURE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String command \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \"   \" + AddEventCommand.COMMAND_WORD + \"  \" + TITLE_DESC_LECTURE + \"  \" + DESCRIPTION_DESC_LECTURE + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "                + START_DESC_LECTURE + \" \" + END_DESC_LECTURE + \" \" + VENUE_DESC_LECTURE + \"   \" + TAG_DESC_TUTORIAL"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                + \" \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.addCalendarEvent(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: add a calendar event with all fields same as another calendar event in the scheduler except name -\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        added */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vig42"
        },
        "content": "        toAdd \u003d new CalendarEventBuilder(LECTURE).withTitle(VALID_TITLE_TUTORIAL).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d AddEventCommand.COMMAND_WORD + TITLE_DESC_TUTORIAL + DESCRIPTION_DESC_LECTURE + START_DESC_LECTURE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + END_DESC_LECTURE + VENUE_DESC_LECTURE + TAG_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: add a calendar event with all fields same as another calendar event in the scheduler except"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "         * start and end date/time -\u003e added"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vig42"
        },
        "content": "        toAdd \u003d new CalendarEventBuilder(LECTURE).withStart(VALID_START_DATETIME_TUTORIAL)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vig42"
        },
        "content": "            .withEnd(VALID_END_DATETIME_TUTORIAL).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d CalendarEventUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleteAllCalendarEvents();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(CS2103_LECTURE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: add a calendarevent with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        toAdd \u003d TUTORIAL;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "            AddEventCommand.COMMAND_WORD + TITLE_DESC_TUTORIAL + TAG_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "                + START_DESC_TUTORIAL + END_DESC_TUTORIAL + VENUE_DESC_TUTORIAL + TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: add a calendarevent, missing tags -\u003e added */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(GEQ1000_LECTURE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: filters the calendarevent list before adding -\u003e added */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventsWithTitle(KEYWORD_MATCHING_LECTURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(LUNCH);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* ------------------------ Perform add operation while a calendarevent card is selected"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        --------------------------- */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: selects first card in the calendarevent list, add a calendarevent -\u003e added, card selection remains"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        unchanged */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        selectCalendarEvent(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(CS2040_LAB);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: add a duplicate calendarevent -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d CalendarEventUtil.getAddCommand(GEQ1000_LECTURE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(command, AddEventCommand.MESSAGE_DUPLICATE_CALENDAR_EVENT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: add a duplicate calendarevent except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d CalendarEventUtil.getAddCommand(GEQ1000_LECTURE) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(command, AddEventCommand.MESSAGE_DUPLICATE_CALENDAR_EVENT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d AddEventCommand.COMMAND_WORD + DESCRIPTION_DESC_LECTURE + VENUE_DESC_LECTURE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_LECTURE + END_DESC_LECTURE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: missing description -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d AddEventCommand.COMMAND_WORD + TITLE_DESC_LECTURE + VENUE_DESC_LECTURE"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_LECTURE + END_DESC_LECTURE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: missing start -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d AddEventCommand.COMMAND_WORD + TITLE_DESC_LECTURE + DESCRIPTION_DESC_LECTURE + VENUE_DESC_LECTURE"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + END_DESC_LECTURE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: missing end -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d AddEventCommand.COMMAND_WORD + TITLE_DESC_LECTURE + DESCRIPTION_DESC_LECTURE + VENUE_DESC_LECTURE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_LECTURE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: missing venue -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d AddEventCommand.COMMAND_WORD + TITLE_DESC_LECTURE + DESCRIPTION_DESC_LECTURE"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_LECTURE + END_DESC_LECTURE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d \"adds \" + CalendarEventUtil.getCalendarEventDetails(toAdd);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d AddEventCommand.COMMAND_WORD + INVALID_TITLE_DESC + DESCRIPTION_DESC_LECTURE + VENUE_DESC_LECTURE"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_LECTURE + END_DESC_LECTURE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(command, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: invalid description -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d AddEventCommand.COMMAND_WORD + TITLE_DESC_LECTURE + INVALID_DESCRIPTION_DESC + VENUE_DESC_LECTURE"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_LECTURE + END_DESC_LECTURE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(command, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: invalid start -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d AddEventCommand.COMMAND_WORD + TITLE_DESC_LECTURE + DESCRIPTION_DESC_LECTURE + VENUE_DESC_LECTURE"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + INVALID_START_DESC + END_DESC_LECTURE;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCommandFailure(command, DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: invalid end -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d AddEventCommand.COMMAND_WORD + TITLE_DESC_LECTURE + DESCRIPTION_DESC_LECTURE + VENUE_DESC_LECTURE"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_LECTURE + INVALID_END_DESC;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCommandFailure(command, DateTime.MESSAGE_DATETIME_INPUT_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: invalid venue -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d AddEventCommand.COMMAND_WORD + TITLE_DESC_LECTURE + DESCRIPTION_DESC_LECTURE + INVALID_VENUE_DESC"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_LECTURE + END_DESC_LECTURE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(command, Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d AddEventCommand.COMMAND_WORD + TITLE_DESC_LECTURE + DESCRIPTION_DESC_LECTURE + VENUE_DESC_LECTURE"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + START_DESC_LECTURE + END_DESC_LECTURE + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Executes the {@code AddEventCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddEventCommand} with the details of"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * 4. {@code Storage} and {@code CalendarEventListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void assertCommandSuccess(CalendarEvent toAdd) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandSuccess(CalendarEventUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(CalendarEvent)}. Executes {@code command}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @see AddEventCommandSystemTest#assertCommandSuccess(CalendarEvent)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void assertCommandSuccess(String command, CalendarEvent toAdd) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel.addCalendarEvent(toAdd);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddEventCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, CalendarEvent)} except asserts that"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * 2. {@code Storage} and {@code CalendarEventListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @see AddEventCommandSystemTest#assertCommandSuccess(String, CalendarEvent)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * 4. {@code Storage} and {@code CalendarEventListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 66,
      "vig42": 75,
      "pangjiahao": 2,
      "SleepySanjinLi": 6,
      "-": 114
    }
  },
  {
    "path": "src/test/java/systemtests/AddToDoCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_1_WITH_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_2_WITH_PREFIX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_3_WITH_PREFIX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TODO_COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_1_WITH_PREFIX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_3_WITH_PREFIX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_LECTURE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_1_WITH_PREFIX;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_2_WITH_PREFIX;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_3;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_3_WITH_PREFIX;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_LECTURE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.AddToDoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.Priority;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.ToDoListEventBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.ToDoListEventUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class AddToDoCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        /* Case: add a ToDoListEvent to a non-empty toDoList, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        -\u003e added */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        ToDoListEvent toAdd \u003d new ToDoListEventBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            .withTitle(TITLE_1)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            .withDescription(DESCRIPTION_1)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            .withPriority(PRIORITY_1).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        String command \u003d \"   \" + AddToDoCommand.COMMAND_WORD + \"  \" + TITLE_1_WITH_PREFIX + \"  \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            + DESCRIPTION_1_WITH_PREFIX + \" \" + PRIORITY_1_WITH_PREFIX + \" \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        /* Case: add a ToDoListEvent with all fields same as another ToDoListEvent in the toDoList except title"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        -\u003e added */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        toAdd \u003d new ToDoListEventBuilder(toAdd).withTitle(TITLE_2).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        command \u003d \"   \" + AddToDoCommand.COMMAND_WORD + \"  \" + TITLE_2_WITH_PREFIX + \"  \" + DESCRIPTION_1_WITH_PREFIX"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                + \" \" + PRIORITY_1_WITH_PREFIX + \" \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        /* Case: add a ToDoListEvent with all fields same as another ToDoListEvent in the toDoList except description"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        -\u003e added */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        toAdd \u003d new ToDoListEventBuilder(toAdd).withDescription(DESCRIPTION_2).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        command \u003d AddToDoCommand.COMMAND_WORD + \"     \" + TITLE_2_WITH_PREFIX + \"  \" + DESCRIPTION_2_WITH_PREFIX"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            + \" \" + PRIORITY_1_WITH_PREFIX + \"    \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        /* Case: add a ToDoListEvent, command having parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        toAdd \u003d new ToDoListEventBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            .withTitle(TITLE_3)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            .withDescription(DESCRIPTION_3)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            .withPriority(PRIORITY_3).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        command \u003d \"   \" + AddToDoCommand.COMMAND_WORD + \"  \" + DESCRIPTION_3_WITH_PREFIX"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                + \" \" + PRIORITY_3_WITH_PREFIX + \"          \" + TITLE_3_WITH_PREFIX;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        /* Case: add a duplicate ToDoListEvent -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        command \u003d ToDoListEventUtil.getAddToDoCommand(toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(command, AddToDoCommand.MESSAGE_DUPLICATE_TODO_EVENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        /* Case: command missing name -\u003e rejected */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d AddToDoCommand.COMMAND_WORD + DESCRIPTION_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToDoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        /* Case: command missing description -\u003e rejected */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d AddToDoCommand.COMMAND_WORD + TITLE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToDoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        /* Case: command missing priority -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d AddToDoCommand.COMMAND_WORD + TITLE_DESC_ASSIGNMENT + DESCRIPTION_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToDoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        command \u003d INVALID_TODO_COMMAND_WORD + ToDoListEventUtil.getToDoListEventDetails(toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d AddToDoCommand.COMMAND_WORD + INVALID_TITLE_DESC + DESCRIPTION_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                + PRIORITY_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(command, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /* Case: invalid description -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d AddToDoCommand.COMMAND_WORD + TITLE_DESC_LECTURE + INVALID_DESCRIPTION_DESC + PRIORITY_DESC_LECTURE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(command, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /* Case: invalid priority -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d AddToDoCommand.COMMAND_WORD + TITLE_DESC_ASSIGNMENT + DESCRIPTION_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                + INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(command, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Executes the {@code AddToDoCommand} that adds {@code toAdd} to the modelToDo and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddToDoCommand} with the details of"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 4. {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationToDoDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationToDoDisplaysExpected(String, String, ModelToDo)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertCommandSuccess(ToDoListEvent toAdd) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandSuccess(ToDoListEventUtil.getAddToDoCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(ToDoListEvent)}. Executes {@code command}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see AddToDoCommandSystemTest#assertCommandSuccess(ToDoListEvent)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertCommandSuccess(String command, ToDoListEvent toAdd) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelToDo expectedModel \u003d getModelToDo();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        expectedModel.addToDoListEvent(toAdd);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddToDoCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, ToDoListEvent)} except asserts that"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 2. {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see AddToDoCommandSystemTest#assertCommandSuccess(String, ToDoListEvent)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertCommandSuccess(String command, ModelToDo expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertApplicationToDoDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 4. {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationToDoDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationToDoDisplaysExpected(String, String, ModelToDo)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelToDo expectedModel \u003d getModelToDo();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertApplicationToDoDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 53,
      "SleepySanjinLi": 127
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCalendarCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.KEYWORD_MATCHING_LECTURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.ClearCalendarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class ClearCalendarCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCalendarCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: selects first card in calendarevent list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        selectCalendarEvent(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(ClearCalendarCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: filters the calendarevent list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventsWithTitle(KEYWORD_MATCHING_LECTURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(ClearCalendarCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(ClearCalendarCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * box displays {@code ClearCalendarCommand#MESSAGE_SUCCESS} and the model related components equal"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * to an empty model."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(command, ClearCalendarCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @see ClearCalendarCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 14,
      "vig42": 8,
      "-": 80
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 2,
      "-": 56
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteEventCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.DeleteEventCommand.MESSAGE_DELETE_CALENDAR_EVENT_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class DeleteEventCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: delete the first calendarevent in the list, command with leading spaces and trailing spaces -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String command \u003d \"     \" + DeleteEventCommand.COMMAND_WORD + \"      \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            + INDEX_FIRST_ELEMENT.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        CalendarEvent deletedCalendarEvent \u003d removePerson(expectedModel, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CALENDAR_EVENT_SUCCESS, deletedCalendarEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: delete the last calendarevent in the list -\u003e deleted */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: undo deleting the last calendarevent in the list -\u003e last calendarevent restored */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: redo deleting the last calendarevent in the list -\u003e last calendarevent deleted again */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: delete the middle calendarevent in the list -\u003e deleted */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: filtered calendarevent list, delete index within bounds of address book and calendarevent list -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleted */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "        showCalendarEventsWithTitle(\"Choir\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Index index \u003d INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredAndSortedCalendarEventList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: filtered calendarevent list, delete index within bounds of address book but out of bounds of"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        calendarevent list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "        showCalendarEventsWithTitle(\"Choir\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vig42"
        },
        "content": "        int invalidIndex \u003d getModel().getScheduler().getCalendarEventList().size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d DeleteEventCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* --------------------- Performing delete operation while a calendarevent card is selected"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        ------------------------ */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: delete the selected calendarevent -\u003e calendarevent list panel selects the calendarevent before the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleted calendarevent */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showAllCalendarEvents();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        selectCalendarEvent(selectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d DeleteEventCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vig42"
        },
        "content": "        deletedCalendarEvent \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_CALENDAR_EVENT_SUCCESS, deletedCalendarEvent);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d DeleteEventCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d DeleteEventCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "            getModel().getScheduler().getCalendarEventList().size() + 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d DeleteEventCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(DeleteEventCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(DeleteEventCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Removes the {@code CalendarEvent} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @return the removed calendarevent"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private CalendarEvent removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent targetCalendarEvent \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.deleteCalendarEvent(targetCalendarEvent);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": "        return targetCalendarEvent;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Deletes the calendarevent at {@code toDelete} by creating a default {@code DeleteEventCommand} using {@code"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * toDelete} and"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @see DeleteEventCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent deletedCalendarEvent \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CALENDAR_EVENT_SUCCESS, deletedCalendarEvent);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            DeleteEventCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @see DeleteEventCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 34,
      "vig42": 29,
      "SleepySanjinLi": 6,
      "-": 134
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteToDoCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TODOLIST_EVENTS_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.logic.commands.DeleteToDoCommand.MESSAGE_DELETE_TODOLIST_EVENT_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TestUtil.getTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.logic.commands.DeleteToDoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.todolist.ToDoListEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "public class DeleteToDoCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteToDoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        /* Case: delete the first ToDoListEvent in the list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "         -\u003e deleted */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelToDo expectedModel \u003d getModelToDo();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String command \u003d \"     \" + DeleteToDoCommand.COMMAND_WORD + \"      \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                + INDEX_FIRST_ELEMENT.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        ToDoListEvent deletedToDoListEvent \u003d removeToDoListEvent(expectedModel, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TODOLIST_EVENT_SUCCESS, deletedToDoListEvent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        /* Case: delete the second ToDoListEvent in the list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "         -\u003e deleted */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        expectedModel \u003d getModelToDo();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        command \u003d \"  \" + DeleteToDoCommand.COMMAND_WORD + \"   \" + INDEX_SECOND_ELEMENT.getOneBased() + \"           \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        deletedToDoListEvent \u003d removeToDoListEvent(expectedModel, INDEX_SECOND_ELEMENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_TODOLIST_EVENT_SUCCESS, deletedToDoListEvent);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d DeleteToDoCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d DeleteToDoCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromZeroBased(getModelToDo().getToDoList().getToDoList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d DeleteToDoCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_TODOLIST_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(DeleteToDoCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(DeleteToDoCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Removes the {@code ToDoListEvent} at the specified {@code index} in {@code model}\u0027s toDoList."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * @return the removed ToDoListEvent."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    private ToDoListEvent removeToDoListEvent(ModelToDo modelToDo, Index index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ToDoListEvent targetToDoListEvent \u003d getTask(modelToDo, index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        modelToDo.deleteToDoListEvent(targetToDoListEvent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return targetToDoListEvent;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * Deletes the ToDoListEvent at {@code toDelete} by creating a default {@code DeleteToDoCommand} using"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * {@code toDelete} and performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see DeleteToDoCommandSystemTest#assertCommandSuccess(String, ModelToDo, String)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelToDo expectedModel \u003d getModelToDo();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        ToDoListEvent deletedToDoListEvent \u003d removeToDoListEvent(expectedModel, toDelete);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TODOLIST_EVENT_SUCCESS, deletedToDoListEvent);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCommandSuccess(DeleteToDoCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "            expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, ModelToDo)}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationToDoDisplaysExpected(String, String, ModelToDo)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertCommandSuccess(String command, ModelToDo expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, ModelToDo, String)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see DeleteToDoCommandSystemTest#assertCommandSuccess(String, ModelToDo, String)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see SchedulerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertCommandSuccess(String command, ModelToDo expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertApplicationToDoDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * 3. Asserts that the selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationToDoDisplaysExpected(String, String, ModelToDo)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationToDoDisplaysExpected(String, String, ModelToDo)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        ModelToDo expectedModel \u003d getModelToDo();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertApplicationToDoDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangjiahao": 26,
      "SleepySanjinLi": 113
    }
  },
  {
    "path": "src/test/java/systemtests/EditEventCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_LECTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DESC_LECTURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DESC_LECTURE_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VENUE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DESC_LECTURE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DESC_LECTURE_2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_EMPTY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_LECTURE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATETIME_LECTURE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATETIME_LECTURE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LECTURE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_LECTURE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_SEMINAR;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VENUE_DESC_LECTURE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VENUE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2103_LECTURE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.TUTORIAL;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.EditEventCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.DateTimeInfo;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Title;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.calendarevent.Venue;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.CalendarEventBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.CalendarEventUtil;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class EditEventCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Index index \u003d INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "        String command \u003d \" \" + EditEventCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + TITLE_DESC_TUTORIAL + \"  \" + DESCRIPTION_DESC_TUTORIAL + \" \" + START_DESC_TUTORIAL + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + END_DESC_TUTORIAL + \" \" + VENUE_DESC_TUTORIAL + \" \" + TAG_DESC_LECTURE + \" \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent editedCalendarEvent \u003d new CalendarEventBuilder(TUTORIAL).withTags(VALID_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, index, editedCalendarEvent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: undo editing the last calendar event in the list -\u003e last calendar event restored */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: redo editing the last calendar event in the list -\u003e last calendar event edited again */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.updateCalendarEvent(getModel().getFilteredAndSortedCalendarEventList()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                            .get(INDEX_FIRST_ELEMENT.getZeroBased()), editedCalendarEvent);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: edit a calendar event with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d EditEventCommand.COMMAND_WORD + \" \" + index.getOneBased() + TITLE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + DESCRIPTION_DESC_TUTORIAL + START_DESC_TUTORIAL + END_DESC_TUTORIAL + VENUE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + TAG_DESC_TUTORIAL + TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(command, index, TUTORIAL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: edit a calendar event with new values same as another calendar event\u0027s values but with different title"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        -\u003e edited */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertTrue(getModel().getScheduler().getCalendarEventList().contains(TUTORIAL));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        index \u003d INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertNotEquals(getModel().getFilteredAndSortedCalendarEventList().get(index.getZeroBased()), TUTORIAL);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d EditEventCommand.COMMAND_WORD + \" \" + index.getOneBased() + TITLE_DESC_LECTURE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + DESCRIPTION_DESC_TUTORIAL + START_DESC_TUTORIAL + END_DESC_TUTORIAL + VENUE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + TAG_DESC_TUTORIAL + TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        editedCalendarEvent \u003d new CalendarEventBuilder(TUTORIAL).withTitle(VALID_TITLE_LECTURE).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, index, editedCalendarEvent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: edit a calendar event with new values same as another calendar event\u0027s values but with different"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "        start and end date/time"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        index \u003d INDEX_SECOND_ELEMENT;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d EditEventCommand.COMMAND_WORD + \" \" + index.getOneBased() + TITLE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + DESCRIPTION_DESC_TUTORIAL + START_DESC_LECTURE + END_DESC_LECTURE + VENUE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + TAG_DESC_TUTORIAL + TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        editedCalendarEvent \u003d new CalendarEventBuilder(TUTORIAL).withStart(VALID_START_DATETIME_LECTURE)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "                .withEnd(VALID_END_DATETIME_LECTURE).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, index, editedCalendarEvent);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        index \u003d INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        command \u003d EditEventCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + TAG_EMPTY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent calendarEventToEdit \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vig42"
        },
        "content": "                getModel().getFilteredAndSortedCalendarEventList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        editedCalendarEvent \u003d new CalendarEventBuilder(calendarEventToEdit).withTags().build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, index, editedCalendarEvent);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: filtered calendar event list, edit index within bounds of address book and calendar event list -\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        edited */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        showCalendarEventsWithTitle(VALID_TITLE_SEMINAR);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        index \u003d INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredAndSortedCalendarEventList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d EditEventCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + TITLE_DESC_LECTURE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "vig42"
        },
        "content": "        calendarEventToEdit \u003d getModel().getFilteredAndSortedCalendarEventList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": "        editedCalendarEvent \u003d new CalendarEventBuilder(calendarEventToEdit).withTitle(VALID_TITLE_LECTURE).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, index, editedCalendarEvent);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: filtered calendar event list, edit index within bounds of address book but out of bounds of"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        calendar event list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        showCalendarEventsWithTitle(VALID_TITLE_SEMINAR);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "        int invalidIndex \u003d getModel().getScheduler().getCalendarEventList().size();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(EditEventCommand.COMMAND_WORD + \" \" + invalidIndex + TITLE_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vig42"
        },
        "content": "            Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        /* --------------------- Performing edit operation while a calendar event card is selected ----------------- */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: selects first card in the calendar event list, edit a calendar event -\u003e edited, card selection remains"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "         unchanged */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showAllCalendarEvents();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        index \u003d INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        selectCalendarEvent(index);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d EditEventCommand.COMMAND_WORD + \" \" + index.getOneBased() + TITLE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + DESCRIPTION_DESC_TUTORIAL + START_DESC_TUTORIAL + END_DESC_TUTORIAL"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + VENUE_DESC_TUTORIAL + TAG_DESC_LECTURE + TAG_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, index, TUTORIAL, index);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(EditEventCommand.COMMAND_WORD + \" 0\" + TITLE_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(EditEventCommand.COMMAND_WORD + \" -1\" + TITLE_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vig42"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredAndSortedCalendarEventList().size() + 1;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(EditEventCommand.COMMAND_WORD + \" \" + invalidIndex + TITLE_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vig42"
        },
        "content": "            Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(EditEventCommand.COMMAND_WORD + TITLE_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(EditEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ELEMENT.getOneBased(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            EditEventCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: invalid title -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                EditEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ELEMENT.getOneBased() + INVALID_TITLE_DESC,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: invalid description -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                EditEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ELEMENT.getOneBased() + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                EditEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ELEMENT.getOneBased() + INVALID_VENUE_DESC,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "                Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                EditEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ELEMENT.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: edit a calendar event with new values same as another calendar event\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        executeCommand(CalendarEventUtil.getAddCommand(CS2103_LECTURE));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(getModel().getScheduler().getCalendarEventList().contains(CS2103_LECTURE));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        index \u003d INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(getModel().getFilteredAndSortedCalendarEventList().get(index.getZeroBased())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                            .equals(CS2103_LECTURE));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d EditEventCommand.COMMAND_WORD + \" \" + index.getOneBased() + TITLE_DESC_LECTURE"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + DESCRIPTION_DESC_LECTURE + START_DESC_LECTURE_2 + END_DESC_LECTURE_2"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + VENUE_DESC_LECTURE + TAG_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(command, EditEventCommand.MESSAGE_DUPLICATE_CALENDAR_EVENT);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: edit a calendar event with new values same as another calendar event\u0027s values but with different tags"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        -\u003e rejected */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d EditEventCommand.COMMAND_WORD + \" \" + index.getOneBased() + TITLE_DESC_LECTURE"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + DESCRIPTION_DESC_LECTURE + START_DESC_LECTURE_2 + END_DESC_LECTURE_2"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + VENUE_DESC_LECTURE + TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(command, EditEventCommand.MESSAGE_DUPLICATE_CALENDAR_EVENT);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: edit a calendar event with new values same as another calendar event\u0027s values but with different"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        description -\u003e rejected */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        command \u003d EditEventCommand.COMMAND_WORD + \" \" + index.getOneBased() + TITLE_DESC_LECTURE"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + DESCRIPTION_DESC_TUTORIAL + START_DESC_LECTURE_2 + END_DESC_LECTURE_2"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "vig42"
        },
        "content": "            + VENUE_DESC_LECTURE + TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(command, EditEventCommand.MESSAGE_DUPLICATE_CALENDAR_EVENT);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: edit a calendar event with new start date/time after the new end date/time -\u003e rejected */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d EditEventCommand.COMMAND_WORD + \" \" + index.getOneBased() + START_DESC_TUTORIAL + END_DESC_LECTURE;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandFailure(command, DateTimeInfo.MESSAGE_DATETIMEINFO_CONSTRAINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, CalendarEvent, Index)} except that"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * the selected card remain unchanged."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @see EditEventCommandSystemTest#assertCommandSuccess(String, Index, CalendarEvent, Index)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, CalendarEvent editedCalendarEvent) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedCalendarEvent, null);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditEventCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the calendar event at index {@code toEdit}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * being updated to values specified {@code editedCalendarEvent}.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @see EditEventCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, CalendarEvent editedCalendarEvent,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        expectedModel.updateCalendarEvent("
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "vig42"
        },
        "content": "            expectedModel.getFilteredAndSortedCalendarEventList().get(toEdit.getZeroBased()), editedCalendarEvent);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            String.format(EditEventCommand.MESSAGE_EDIT_CALENDAR_EVENT_SUCCESS, editedCalendarEvent),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * selected card remains unchanged."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @see EditEventCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * 3. Asserts that the selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * 4. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * 5. Asserts that the calendar events displayed match the calendar events list"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * 3. Asserts that the selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 75,
      "vig42": 77,
      "pangjiahao": 32,
      "SleepySanjinLi": 6,
      "-": 125
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class ErrorDialogGuiTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/systemtests/FindEventCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CALENDAR_EVENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CAREER_FAIR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CHOIR_PRACTICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2040_LAB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2103_LECTURE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CS2104_TUTORIAL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.FIN3101_SEMINAR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.GOOGLE_INTERVIEW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.KEYWORD_MATCHING_LECTURE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.FindEventCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class FindEventCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find calendar event in scheduler, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "         * -\u003e 1 calendar events found"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String command \u003d \"   \" + FindEventCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_LECTURE + \"   \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, CS2103_LECTURE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: repeat previous find command where calendar event list is displaying the calendar event we are finding"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "         * -\u003e 1 calendar event found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_LECTURE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find calendar event where calendar event list is not displaying the calendar event we are finding"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vig42"
        },
        "content": "         * -\u003e 1 calendar event found"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vig42"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" Lab\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, CS2040_LAB);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find multiple calendar events  in scheduler, 2 keywords -\u003e 2 calendar events found */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" Tutorial Seminar\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, CS2104_TUTORIAL, FIN3101_SEMINAR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find multiple calendar events in scheduler, 2 keywords in reversed order"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vig42"
        },
        "content": "         * -\u003e same 2 calendar events found"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vig42"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" Seminar Tutorial\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find multiple calendar events in scheduler, 2 keywords with 1 repeat -\u003e 2 calendar events found */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" Tutorial Seminar Tutorial\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find multiple calendar events in scheduler, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vig42"
        },
        "content": "         * -\u003e 2 calendar events found"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" Tutorial Seminar NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find calendar event in scheduler, keyword is same as title but has different case"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vig42"
        },
        "content": "         * -\u003e 1 calendar event found"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vig42"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" gOoGlE InTErVieW\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, GOOGLE_INTERVIEW);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find calendar event in scheduler, keyword is substring of title -\u003e 1 calendar event found */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" Inter\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, GOOGLE_INTERVIEW);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find calendar event in scheduler, name is substring of keyword -\u003e 3 calendar events found */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" Bring\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, GOOGLE_INTERVIEW, CHOIR_PRACTICE, CAREER_FAIR);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find calendar event not in scheduler -\u003e 0 calendar events found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" EventNotInCalendar\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find description of calendar event in scheduler -\u003e 1 calendar event found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" \" + FIN3101_SEMINAR.getDescriptionObject().value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, FIN3101_SEMINAR);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find venue of calendar event in scheduler -\u003e 1 calendar event found */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" \" + FIN3101_SEMINAR.getVenue().value;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: filter calendar event in scheduler by tag -\u003e 1 calendar event found */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vig42"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(FIN3101_SEMINAR.getTags());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" \" + PREFIX_TAG.getPrefix() + tags.get(0).tagName;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: filter calendar events in scheduler from date/time -\u003e 2 calendar event found */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" \" + PREFIX_FROM.getPrefix() + \" from/16 nov 2018 5pm\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, CHOIR_PRACTICE, CAREER_FAIR);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: filter calendar events in scheduler before date/time -\u003e 3 calendar events found */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" \" + PREFIX_TO.getPrefix() + \"before/15 nov 2018 3pm\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, CS2104_TUTORIAL, CS2040_LAB, GOOGLE_INTERVIEW);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: filter calendar events in scheduler between 2 date/times -\u003e 3 calendar events found */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" \" + PREFIX_FROM.getPrefix() + \"15 nov 2018 8am \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vig42"
        },
        "content": "                + PREFIX_TO.getPrefix() + \" 16 nov 2018 8pm\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, CS2103_LECTURE, FIN3101_SEMINAR, CHOIR_PRACTICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: search keywords and filter calendar events in scheduler before date/time -\u003e 2 calendar event found */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" lecture tutorial lab \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "vig42"
        },
        "content": "                + PREFIX_TO.getPrefix() + \"14 nov 2018 5pm\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, CS2104_TUTORIAL, CS2040_LAB);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "vig42"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find same calendar events in scheduler after deleting 1 of them -\u003e 1 calendar event found */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vig42"
        },
        "content": "        executeCommand(DeleteEventCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(getModel().getScheduler().getCalendarEventList().contains(CS2104_TUTORIAL));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" \" + \"Tutorial Seminar\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "vig42"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, FIN3101_SEMINAR);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find while a calendar event is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showAllCalendarEvents();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        selectCalendarEvent(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertFalse(getCalendarEventListPanel().getHandleToSelectedCard().getTitle()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                            .equals(FIN3101_SEMINAR.getTitle().value));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" One-Fund Theorem\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, FIN3101_SEMINAR);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: find calendar event in empty scheduler -\u003e 0 persons found */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleteAllCalendarEvents();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d FindEventCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_LECTURE;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "vig42"
        },
        "content": "        ModelHelper.setFilteredAndSortedList(expectedModel, FIN3101_SEMINAR);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "vig42"
        },
        "content": "        command \u003d \"FiNd EvENt proJECt\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * box displays {@code Messages#MESSAGE_CALENDAR_EVENTS_LISTED_OVERVIEW} with the number of people in the"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * filtered list,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "vig42"
        },
        "content": "            MESSAGE_CALENDAR_EVENTS_LISTED_OVERVIEW, expectedModel.getFilteredAndSortedCalendarEventList().size());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 14,
      "vig42": 106,
      "-": 113
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCalendarEventListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.SelectEventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class HelpCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        executeCommand(SelectEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ELEMENT.getOneBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCalendarEventListMatching(getCalendarEventListPanel(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                        getModel().getFilteredAndSortedCalendarEventList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        executeCommand(DeleteEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ELEMENT.getOneBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 5,
      "vig42": 3,
      "SleepySanjinLi": 1,
      "-": 68
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static final Predicate\u003cCalendarEvent\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static void setFilteredAndSortedList(Model model, List\u003cCalendarEvent\u003e toDisplay) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vig42"
        },
        "content": "        Optional\u003cPredicate\u003cCalendarEvent\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.updateFilteredCalendarEventList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vig42"
        },
        "content": "        model.sortFilteredCalendarEventList(Comparator.comparing(toDisplay::indexOf));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see ModelHelper#setFilteredAndSortedList(Model, List)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vig42"
        },
        "content": "    public static void setFilteredAndSortedList(Model model, CalendarEvent... toDisplay) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vig42"
        },
        "content": "        setFilteredAndSortedList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code CalendarEvent} equals to {@code other}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vig42"
        },
        "content": "    private static Predicate\u003cCalendarEvent\u003e getPredicateMatching(CalendarEvent other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 12,
      "-": 29
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCalendarEventListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.calendarevent.CalendarEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vig42"
        },
        "content": "public class SampleDataTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vig42"
        },
        "content": "    protected Scheduler getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        CalendarEvent[] expectedList \u003d SampleDataUtil.getSampleCalendarEvents();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCalendarEventListMatching(getCalendarEventListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 5,
      "SleepySanjinLi": 2,
      "-": 44
    }
  },
  {
    "path": "src/test/java/systemtests/SchedulerSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCalendarEventListMatching;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCalendarListMatchingIgnoreOrder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertToDoListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import guitests.guihandles.CalendarDisplayHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import guitests.guihandles.CalendarPanelHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.ClearCalendarCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.FindEventCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.ListEventCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.SelectEventCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ModelToDo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.model.Scheduler;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.model.ToDoList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.testutil.TypicalEvents;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "import seedu.address.testutil.TypicalTodoListEvents;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vig42"
        },
        "content": " * A system test class for Scheduler, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vig42"
        },
        "content": "public abstract class SchedulerSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        testApp \u003d setupHelper.setupApplication("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            this::getInitialData, this::getInitialDataToDo, getDataFileLocation(), getDataFileLocationToDo());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vig42"
        },
        "content": "    protected Scheduler getInitialData() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return TypicalEvents.getTypicalScheduler();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    protected ToDoList getInitialDataToDo() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return TypicalTodoListEvents.getTypicalToDoList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    protected Path getDataFileLocationToDo() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING_TODO;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    public CalendarPanelHandle getCalendarEventListPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        return mainWindowHandle.getCalendarPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    public TaskListPanelHandle getTaskListPanel() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return mainWindowHandle.getToDoListPanel();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public CalendarDisplayHandle getCalendarDisplay() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        return mainWindowHandle.getCalendarDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Displays all calendar events in the scheduler."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    protected void showAllCalendarEvents() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        executeCommand(ListEventCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(getModel().getScheduler().getCalendarEventList().size(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vig42"
        },
        "content": "            getModel().getFilteredAndSortedCalendarEventList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Displays all calendar events with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    protected void showCalendarEventsWithTitle(String keyword) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        executeCommand(FindEventCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(getModel().getFilteredAndSortedCalendarEventList().size()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            \u003c getModel().getScheduler().getCalendarEventList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Selects the calendarevent at {@code index} of the displayed list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    protected void selectCalendarEvent(Index index) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        executeCommand(SelectEventCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(index.getZeroBased(), getCalendarEventListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Deletes all calendar events in the scheduler."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "    protected void deleteAllCalendarEvents() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        executeCommand(ClearCalendarCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertEquals(0, getModel().getScheduler().getCalendarEventList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same calendarevent objects as {@code expectedModel},"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * the calendar event list panel displays the calendar events in the model correctly, and the calendar display"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "     * displays the calendar events in the model correctly."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(new Scheduler(expectedModel.getScheduler()), testApp.readStorageScheduler());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCalendarEventListMatching(getCalendarEventListPanel(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                        expectedModel.getFilteredAndSortedCalendarEventList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertCalendarListMatchingIgnoreOrder(getCalendarDisplay(), expectedModel.getFullCalendarEventList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same todolistevent objects as {@code expectedModel},"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * the todolist event list panel displays the todolist events in the model correctly."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    protected void assertApplicationToDoDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "                                                     ModelToDo expectedModel) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertEquals(new ToDoList(expectedModel.getToDoList()), testApp.readStorageToDoList());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        assertToDoListMatching(getTaskListPanel(), expectedModel.getFilteredToDoListEventList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Calls {@code CalendarPanelHandle} and {@code StatusBarFooterHandle} to"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * remember"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        getCalendarEventListPanel().rememberSelectedCalendarEventCard();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * of the previously selected calendarevent."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(getCalendarEventListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the calendarevent in the calendarevent"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * list panel at"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @see CalendarPanelHandle#isSelectedCalendarEventCardChanged()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        getCalendarEventListPanel().navigateToCard(getCalendarEventListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String selectedCardName \u003d getCalendarEventListPanel().getHandleToSelectedCard().getTitle();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getCalendarEventListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the calendarevent list panel remain unchanged."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * @see CalendarPanelHandle#isSelectedCalendarEventCardChanged()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertFalse(getCalendarEventListPanel().isSelectedCalendarEventCardChanged());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertCalendarEventListMatching(getCalendarEventListPanel(),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "vig42"
        },
        "content": "                                        getModel().getFilteredAndSortedCalendarEventList());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "        assertToDoListMatching(getTaskListPanel(), getModelToDo().getFilteredToDoListEventList());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     * Returns a defensive copy of the current modelToDo."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    protected ModelToDo getModelToDo() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "        return testApp.getModelToDo();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SleepySanjinLi"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 40,
      "vig42": 14,
      "pangjiahao": 20,
      "SleepySanjinLi": 34,
      "-": 172
    }
  },
  {
    "path": "src/test/java/systemtests/SelectEventCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vig42"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.logic.commands.SelectEventCommand.MESSAGE_SELECT_CALENDAR_EVENT_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.KEYWORD_MATCHING_LECTURE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ELEMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "import seedu.address.logic.commands.SelectEventCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "public class SelectEventCommandSystemTest extends SchedulerSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: select the first card in the calendar event list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        String command \u003d \"   \" + SelectEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ELEMENT.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_ELEMENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: select the last card in the calendar event list -\u003e selected */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        Index calendarEventCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d SelectEventCommand.COMMAND_WORD + \" \" + calendarEventCount.getOneBased();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandSuccess(command, calendarEventCount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vig42"
        },
        "content": "        /* Case: select the middle card in the calendar event list -\u003e selected */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d SelectEventCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: filtered calendar event list, select index within bounds of scheduler but out of bounds of"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        calendar event list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        showCalendarEventsWithTitle(KEYWORD_MATCHING_LECTURE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vig42"
        },
        "content": "        int invalidIndex \u003d getModel().getScheduler().getCalendarEventList().size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(SelectEventCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        /* Case: filtered calendar event list, select index within bounds of scheduler and calendar event list -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        selected */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vig42"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredAndSortedCalendarEventList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        command \u003d SelectEventCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(SelectEventCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(SelectEventCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vig42"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredAndSortedCalendarEventList().size() + 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(SelectEventCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(SelectEventCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(SelectEventCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(\"SeLeCt eVeNt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        deleteAllCalendarEvents();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        assertCommandFailure(SelectEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ELEMENT.getOneBased(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vig42"
        },
        "content": "            MESSAGE_INVALID_CALENDAR_EVENTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected calendarevent.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * 4. {@code Storage} and {@code CalendarPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * Verifications 1, 3 and 4 are perfo"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * mTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vig42"
        },
        "content": "            MESSAGE_SELECT_CALENDAR_EVENT_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getCalendarEventListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     * 4. {@code Storage} and {@code CalendarPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * {@code SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "vig42"
        },
        "content": "     * @see SchedulerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 43,
      "vig42": 13,
      "-": 104
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vig42"
        },
        "content": "import seedu.address.model.ReadOnlyScheduler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "import seedu.address.model.ReadOnlyToDoList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyScheduler\u003e addressBook,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                                    Supplier\u003cReadOnlyToDoList\u003e toDoList,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                                    Path saveFileLocationCalendarEvent,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                                    Path saveFileLocationToDo) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangjiahao"
        },
        "content": "                new TestApp(addressBook, toDoList, saveFileLocationCalendarEvent, saveFileLocationToDo));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vig42": 1,
      "pangjiahao": 7,
      "-": 71
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"seedu.address.ui.TestFxmlObject\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bryanwongweiheng"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bryanwongweiheng": 3,
      "-": 4
    }
  }
]
