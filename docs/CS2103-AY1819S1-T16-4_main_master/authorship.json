[
  {
    "path": "src/main/java/seedu/planner/commons/events/ui/ModulePanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents a selection change in the Module List Panel."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModulePanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final Module newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModulePanelSelectionChangedEvent(Module newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public Module getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 21,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/planner/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ALL_LETTERS_REGEX \u003d \"[a-zA-Z]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if the String contains only alphabets."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param s The String"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if the String contains only alphabets"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static boolean containsOnlyLetters(String s) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return s.matches(ALL_LETTERS_REGEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 12,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //TODO: confirm if the list is filtered or sorted or both"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of taken modules */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredTakenModuleList(int semesterIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //TODO: confirm if the list is filtered or sorted or both"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of available modules */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredAvailableModuleList(int semesterIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 11,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredTakenModuleList(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return model.getFilteredTakenModuleList(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredAvailableModuleList(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return model.getFilteredAvailableModuleList(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 13,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/ModuleManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of modules."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModuleManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //TODO"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Changes the module type of the module."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param module The module to be changed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param newModuleType The new {@code ModuleType} that the {@code module} should be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void updateModuleType(Module module, ModuleType newModuleType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 14,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/AddModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "//@@author RomaRomama"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " * Add a module to the module planner"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addModule\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \": Add current/future modules to the module planner. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_YEAR + \"YEAR \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_YEAR + \"2 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_SEMESTER + \"2 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            + PREFIX_CODE + \"CS3244 \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added Module(s): %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the module planner\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private final int semesterIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private final List\u003cModule\u003e modulesToAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Add module method"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public AddModuleCommand(List\u003cModule\u003e modules, int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        requireAllNonNull(modules, index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        semesterIndex \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        modulesToAdd \u003d modules;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    //TODO"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModule\u003e invalidModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (Module m : modulesToAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            if (model.hasModule(m)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                invalidModules.add(m);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (!invalidModules.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            for (Module m : invalidModules) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                sb.append(m.toString() + \" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            throw new CommandException(String.format("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                    Messages.MESSAGE_INVALID_MODULES, sb.toString().trim()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        for (Module m : modulesToAdd) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            sb.append(m.toString() + \" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        model.addModules(modulesToAdd, semesterIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, sb.toString().trim()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 64,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/DeleteModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Deletes a module identified using it\u0027s module code from the module planner."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteModule\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \": Deletes the module identified using it\u0027s module code.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + PREFIX_CODE + \"CS2103T \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULES_SUCCESS \u003d \"Deleted Module(s): %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final List\u003cModule\u003e modulesToDelete;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public DeleteModuleCommand(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.modulesToDelete \u003d modules;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e invalidModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Module m : modulesToDelete) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (!model.hasModule(m)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                invalidModules.add(m);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!invalidModules.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            for (Module m : invalidModules) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                sb.append(m.toString() + \" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new CommandException(String.format("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    Messages.MESSAGE_INVALID_MODULES, sb.toString().trim()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (Module m : modulesToDelete) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            sb.append(m.toString() + \" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        model.deleteModules(modulesToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULES_SUCCESS, sb.toString().trim()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 52,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/GoToCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.TabSwitchEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A class representing the {@code goto} command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Goes from one tab to another.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Parameters: TABNAME\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"y1s1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String SHOWING_GOTO_MESSAGE \u003d \"Go to %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final int tabIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final String tabName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Constructs a {@code GoToCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The {@code tabName} refers to the name seen on the tab in the ui. For e.g. Y1S2."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * The {@code tabIndex} refers to the zero-based index of the tab in the ui."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * For e.g. the leftmost tab, which name is Y1S1, has an index of 0."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param tabName The name of the tab"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param tabIndex The index of the tab"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public GoToCommand(String tabName, int tabIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.tabName \u003d tabName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.tabIndex \u003d tabIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        EventsCenter.getInstance().post(new TabSwitchEvent(tabIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return new CommandResult(String.format(SHOWING_GOTO_MESSAGE, tabName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 38,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/ListModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Placeholder for ListModuleCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Lists all modules the user has taken or is available to take."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ListModuleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listModule\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List modules taken or suggested for a semester. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_YEAR + \"YEAR \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_YEAR + \"1 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_SEMESTER + \"1 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all modules taken\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Creates a ListModuleCommand to list modules for specified semester."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ListModuleCommand(int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //TODO"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model.getFilteredTakenModuleList(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "Hilda-Ang": 37
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/commands/SuggestModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Shows all modules that the user is available to take for a particular semester."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class SuggestModuleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"suggestCommand\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Show modules the user is available to take. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_YEAR + \"YEAR \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_YEAR + \"1 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            + PREFIX_SEMESTER + \"1 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showed all available modules.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public SuggestModuleCommand(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        model.getFilteredAvailableModuleList(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "Hilda-Ang": 32
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/AddModuleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.util.IndexUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "//@@author RomaRomama"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " * Parses input arguments and creates a new AddModuleCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * and temporarily return a String (Module code) object  for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_YEAR, PREFIX_SEMESTER, PREFIX_CODE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_YEAR, PREFIX_SEMESTER, PREFIX_CODE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        int semester \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        List\u003cModule\u003e codes \u003d ParserUtil.parseModuleCodes(argMultimap.getValue(PREFIX_CODE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return new AddModuleCommand(codes, IndexUtil.convertYearAndSemesterToIndex(year, semester));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 36,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/DeleteModuleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A parser that parse an input argument and creates a DeleteModuleCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class DeleteModuleCommandParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModuleCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * and returns a DeleteModuleCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException If the user input does not conform to the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            List\u003cModule\u003e validModules \u003d ParserUtil.parseModuleCodes(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return new DeleteModuleCommand(validModules);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 24,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ListModuleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.ListModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.util.IndexUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Parses input arguments and creates a new ListModuleCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ListModuleCommandParser implements Parser\u003cListModuleCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListModuleCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * and returns a ListModuleCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ListModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_YEAR, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_YEAR, PREFIX_SEMESTER) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int semester \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return new ListModuleCommand(IndexUtil.convertYearAndSemesterToIndex(year, semester));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Hilda-Ang": 36
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.module.ModuleInfo.MESSAGE_MODULE_CODE_CONSTRAINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.tab.Tab.MESSAGE_TAB_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.tab.Tab.TAB_NAME_REGEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.util.IndexUtil.convertYearAndSemesterToIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.util.IndexUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.util.ModuleUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_YEAR \u003d \"Year is not between 1 to 4.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_SEMESTER \u003d \"Semester is not between 1 to 2.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses the unverified {@code codes} into a valid List of {@code codes}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException if the given {@code codes} are invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static List\u003cModule\u003e parseModuleCodes(String codes) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        codes \u003d codes.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (codes.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(MESSAGE_MODULE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String[] splitCodes \u003d codes.split(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        List\u003cModule\u003e validModuleCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (String code : splitCodes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (!ModuleUtil.hasValidCodeFormat(code)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                throw new ParseException(MESSAGE_MODULE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            validModuleCodes.add(new Module(code));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return validModuleCodes;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Parses the tab name into its respective index."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param tabName The tab name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return The index if the tab name is valid"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @throws ParseException if the tab name is invalid"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static int parseTabName(String tabName) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        tabName \u003d tabName.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!tabName.matches(TAB_NAME_REGEX)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new ParseException(MESSAGE_TAB_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        String[] characters \u003d tabName.split(\"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int year \u003d Integer.parseInt(characters[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        int semester \u003d Integer.parseInt(characters[3]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return convertYearAndSemesterToIndex(year, semester);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author Hilda-Ang"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Parses the unverified year into a valid year index."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @throws ParseException if the given year is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static int parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int yearIndex \u003d Integer.parseInt(year.trim());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!IndexUtil.hasValidYear(yearIndex)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return yearIndex;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Parses the unverified semester into a valid semester index."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @throws ParseException if the given semester is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static int parseSemester(String semester) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int semesterIndex \u003d Integer.parseInt(semester.trim());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!IndexUtil.hasValidYear(semesterIndex)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return semesterIndex;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String planner} into an {@code Address}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code planner} is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 50,
      "-": 137,
      "Hilda-Ang": 33
    }
  },
  {
    "path": "src/main/java/seedu/planner/logic/parser/SuggestModuleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.SuggestModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.util.IndexUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Parses input arguments and creates a new SuggestModuleCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class SuggestModuleCommandParser implements Parser\u003cSuggestModuleCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SuggestModuleCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * and returns a ListModuleCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public SuggestModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_YEAR, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_YEAR, PREFIX_SEMESTER) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SuggestModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        int semester \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return new SuggestModuleCommand(IndexUtil.convertYearAndSemesterToIndex(year, semester));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Hilda-Ang": 36
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: can have a predicate to filter taken and available modules"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the planner book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the planner book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the planner book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the planner book."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the planner book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the module exists."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param module The module"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if the module with {@code moduleCode} exists, false if not"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the modules."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param modules The modules"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteModules(List\u003cModule\u003e modules);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    //@@author RomaRomama"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * Add list of modules into the specified semester"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param modules List of modules"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     * @param index Index of the semester"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    void addModules(List\u003cModule\u003e modules, int index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author rongjiecomputer"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns an immutable list of {@code ModuleInfo}s."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Note: return type might change to ImmutableList\u003cModuleInfo\u003e in the future."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    ModuleInfo[] getModuleInfo();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //TODO: confirm filtered or sorted or both"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredTakenModuleList(int index);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //TODO: confirm filtered or sorted or both"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredAvailableModuleList(int index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous planner book states to restore."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone planner book states to restore."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s planner book to its previous state."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s planner book to its previously undone state."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current planner book state for undo/redo."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 11,
      "GabrielYik": 11,
      "rongjiecomputer": 9,
      "-": 103
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.model.ModulePlannerChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.util.SampleModulePlannerUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the planner book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: Delete this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ModuleInfo[] moduleInfo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedModulePlanner versionedModulePlanner;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: Delete this"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this(addressBook, new ModuleInfo[] {}, userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ModuleInfo[] moduleInfo, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with planner book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.moduleInfo \u003d moduleInfo;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedModulePlanner \u003d new VersionedModulePlanner("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                SampleModulePlannerUtil.genModulePlanner(new ModulePlanner()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author Hilda-Ang"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Initializes a ModelManager with the given modulePlanner and userPrefs."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModelManager(ReadOnlyModulePlanner modulePlanner, ModuleInfo[] moduleInfo, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireAllNonNull(modulePlanner, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        logger.fine(\"Initializing with planner: \" + modulePlanner + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        versionedModulePlanner \u003d new VersionedModulePlanner(modulePlanner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.moduleInfo \u003d moduleInfo;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        //TODO: Delete this"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.versionedAddressBook \u003d new VersionedAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this(new ModulePlanner(), new ModuleInfo[]{}, new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateModulePlannerChanged() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ModulePlannerChangedEvent(versionedModulePlanner));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedModulePlanner.hasModule(module);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteModules(List\u003cModule\u003e moduleCodes) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedModulePlanner.deleteModules(moduleCodes);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModulePlannerChanged();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    //@@author RomaRomama"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    public void addModules(List\u003cModule\u003e modules, int index) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "        versionedModulePlanner.addModules(modules, index);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RomaRomama"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author rongjiecomputer"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ModuleInfo[] getModuleInfo() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return moduleInfo;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredTakenModuleList(int index) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                versionedModulePlanner.listModulesTaken(index));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredAvailableModuleList(int index) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                versionedModulePlanner.listModulesAvailable(index));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RomaRomama": 8,
      "GabrielYik": 15,
      "rongjiecomputer": 5,
      "-": 190,
      "Hilda-Ang": 24
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ModulePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.semester.Semester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang //@@author GabrielYik"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Wraps all data at the module planner level."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class ModulePlanner implements ReadOnlyModulePlanner {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int MAX_NUMBER_SEMESTERS \u003d 8;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int MAX_SEMESTERS_PER_YEAR \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * The number of {@code Module} groups that is shown to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Currently, there are two groups: one for modules taken and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * one for modules available. A {@code Module} group is different"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * from a {@code ModuleType}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int NUMBER_MODULE_GROUPS \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final List\u003cSemester\u003e semesters;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Constructs a {@code ModulePlanner} and initializes an array of 8 {@code Semester}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * to store details of each {@code Semester}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModulePlanner() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        semesters \u003d new ArrayList\u003c\u003e(MAX_NUMBER_SEMESTERS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d MAX_NUMBER_SEMESTERS / MAX_SEMESTERS_PER_YEAR; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d MAX_SEMESTERS_PER_YEAR; j++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                semesters.add(new Semester(i, j, false));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Creates a {@code ModulePlanner} using the {@code Module}s in the {@code toBeCopied}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModulePlanner(ReadOnlyModulePlanner toBeCopied) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Add one or more module(s) to list of modules taken for the specified semester."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modules A list of valid modules to be added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index A valid semester"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void addModules(List\u003cModule\u003e modules, int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        semesters.get(index - 1).addModules(modules);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Delete one or more module(s) from list of modules taken for the specified semester."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modules A list of valid modules to be deleted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void deleteModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (Semester semester : semesters) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            semester.deleteModules(modules);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks if the {@code Module} exists in the module planner."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param module The module to check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if the module exists, false if not"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (Semester semester : semesters) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            result \u003d result \u0026\u0026 semester.containsModule(module);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns all {@code Semester}s wrapped in an {@code ObservableList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return An {@code ObservableList} containing all the {@code Semester}s"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ObservableList\u003cSemester\u003e getSemesters() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                FXCollections.observableList(semesters));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns all {@code Module}s taken in the {@code Semester} wrapped in an"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index A valid index."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return A list of modules taken in the semester."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ObservableList\u003cModule\u003e listModulesTaken(int index) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cModule\u003e modules \u003d semesters.get(index).getModulesTaken();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                FXCollections.observableList(modules));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //TODO: available modules might not be placed by year"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns all {@code Module}s available in the {@code Semester} wrapped in an"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * {@code ObservableList}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index The nominal {@code Semester} index the {@code Module}s"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *                      are stored at"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return An {@code ObservableList} containing all the {@code Module}s"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ObservableList\u003cModule\u003e listModulesAvailable(int index) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        List\u003cModule\u003e modules \u003d semesters.get(index).getModulesAvailable();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                FXCollections.observableList(modules));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Resets the existing data of this {@code ModulePlanner} with {@code newData}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void resetData(ReadOnlyModulePlanner newData) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        setSemesters(newData.getSemesters());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //TODO: change to private once SampleModuleUtil is not needed, and remove the toRemove boolean"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void setSemesters(List\u003cSemester\u003e semesters) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        boolean toRemove \u003d false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (this.semesters.size() !\u003d 0) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            toRemove \u003d true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_NUMBER_SEMESTERS; i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            if (toRemove) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "                this.semesters.remove(i);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            this.semesters.add(i, semesters.get(i));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Hilda-Ang": 142
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/ReadOnlyModulePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.semester.Semester;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents an unmodifiable view of a {@code ModulePlanner}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public interface ReadOnlyModulePlanner {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns an unmodifiable view of the {@code Semester}s."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return An {@code ObservableList} of the {@code Semester}s"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cSemester\u003e getSemesters();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns an unmodifiable view of the {@code Module}s taken."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param index The nominal semester index the {@code Module}s are stored at"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return An {@code ObservableList} of the {@code Module}s"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e listModulesTaken(int index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Returns an unmodifiable view of the {@code Module}s available."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param index The nominal semester index the {@code Module}s are stored at"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return An {@code ObservableList} of the {@code Module}s"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ObservableList\u003cModule\u003e listModulesAvailable(int index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 30,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/enumeration/FocusArea.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.enumeration;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents the focus areas of computer science students."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * These focus areas are applicable only to new cohorts from AY2015-16 onwards."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public enum FocusArea {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ALGORITHMS_AND_THEORY(\"Algorithms and Theory\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ARTIFICIAL_INTELLIGENCE(\"Artificial Intelligence\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    COMPUTER_GRAPHICS_AND_GAMES(\"Computer Graphics and Games\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    COMPUTER_SECURITY(\"Computer Security\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    DATABASE_SYSTEMS(\"Database Systems\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    MULTIMEDIA_INFORMATION_RETRIEVAL(\"Multimedia Information Retrieval\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    NETWORKING_AND_DISTRIBUTED_SYSTEMS(\"Networking and Distributed Systems\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PARALLEL_COMPUTING(\"Parallel Computing\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PROGRAMMING_LANGUAGES(\"Programming Languages\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    SOFTWARE_ENGINEERING(\"Software Engineering\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    FocusArea(String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 29,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/enumeration/Major.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.enumeration;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents the majors of students."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Currently, there is only one field present since our target audience"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * is Computer Science students."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public enum Major {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    COMPUTER_SCIENCE(\"Computer Science\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    COMPUTER_ENGINEERING(\"Computer Engineering\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    Major(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 22,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/Module.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang //@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "import com.google.common.collect.ImmutableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Temporary {@code Module} class placeholder."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private ModuleType type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private ModuleInfo information;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Creates a new {@code Module}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * This {@code Module} does not have all its"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * attributes initialised and is meant to be used"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * as a lightweight and convenient object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param code The {@code Module} code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public Module(String code) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        information \u003d new ModuleInfo(code);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    //TODO: verify if ModuleInfo contains ModuleType"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Creates a {@code Module}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param type The {@code ModuleType}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param information The {@code ModuleInfo}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public Module(ModuleType type, ModuleInfo information) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.information \u003d information;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the {@code Module} code."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code Module} code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return information.getCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the {@code Module} name."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code Module} name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return information.getName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the {@code ModuleType}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code ModuleType}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModuleType getType() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the possible {@code ModuleType}s."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The possible {@code ModuleType}s"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ModuleType[] getPossibleTypes() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return information.getPossibleTypes();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the {@code Module} credit count."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code Module} credit count"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public float getCreditCount() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return information.getCreditCount();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the {@code Module} preclusions."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code Module} preclusions"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ImmutableList\u003cModuleInfo\u003e getPreclusions() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return information.getPreclusions();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Gets the {@code Module} prerequisites."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The {@code Module} prerequisites"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public ImmutableList\u003cModuleInfo\u003e getPrerequisites() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return information.getPrerequisites();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        Module module \u003d (Module) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return this.information.getCode().equals(module.getCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return getCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "Hilda-Ang": 120
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/ModuleInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik @@author rongjiecomputer"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import com.google.common.base.Preconditions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import com.google.common.collect.ImmutableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "import com.google.common.collect.ImmutableMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents an immutable {@code ModuleInfo} class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * REQUIRES: Module code is globally unique, no two ModuleInfo object has the same module code."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleInfo {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static final String MESSAGE_MODULE_CODE_CONSTRAINTS \u003d \"Module codes should be of the format WX(Y)1234(Z), \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"where WX(Y) refers to a prefix like CS or CEG that describes the type of the module, \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"1234 refers to a sequence of positive numbers, \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            + \"and (Z) refers to an optional postfix.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ModuleType[] possibleTypes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Module credit. We set the type to be float because some modules have 0.5 MC."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private float creditCount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @JsonProperty(\"preclusions\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String[] preclusions;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @JsonProperty(\"prerequisites\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private String[] prerequisites;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ImmutableList\u003cModuleInfo\u003e precluModuleInfo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ImmutableList\u003cModuleInfo\u003e prereqModuleInfo;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private boolean finalized \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Default constructor required by JSON parser."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleInfo() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Creates a new {@code ModuleInfo}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * This {@code ModuleInfo} does not have all its"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * attributes initialised and is meant to be used"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * as a lightweight and convenient object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param code The {@code Module} code"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleInfo(String code) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Creates a new {@code ModuleInfo}. For testing only."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param code          The {@code Module} code"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param name          The {@code Module} name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param possibleTypes The possible {@code ModuleType}s"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param creditCount   The credit count"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param preclusions   An array of preclusion module code strings"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @param prerequisites An array of prerequisite module code strings"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleInfo(String code, String name, ModuleType[] possibleTypes,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                      float creditCount, String[] preclusions, String[] prerequisites) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.possibleTypes \u003d possibleTypes;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.creditCount \u003d creditCount;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.preclusions \u003d preclusions;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.prerequisites \u003d prerequisites;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleType[] getPossibleTypes() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return possibleTypes;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public float getCreditCount() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return creditCount;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author rongjiecomputer"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ImmutableList\u003cModuleInfo\u003e getPrerequisites() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Preconditions.checkState(finalized);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return prereqModuleInfo;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ImmutableList\u003cModuleInfo\u003e getPreclusions() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Preconditions.checkState(finalized);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return precluModuleInfo;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Initialize internal lists of prerequisite and preclusion {@code ModuleInfo}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param map An immutable map that maps module code to {@code ModuleInfo}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void finalize(ImmutableMap\u003cString, ModuleInfo\u003e map) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Preconditions.checkState(!finalized);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        prereqModuleInfo \u003d Arrays.stream(prerequisites)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .map(code -\u003e map.get(code))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .filter(mInfo -\u003e mInfo !\u003d null)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .collect(ImmutableList.toImmutableList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        precluModuleInfo \u003d Arrays.stream(preclusions)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .map(code -\u003e map.get(code))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .filter(mInfo -\u003e mInfo !\u003d null)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                .collect(ImmutableList.toImmutableList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        finalized \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Takes in a list of {@code ModuleInfo}s deserialzied by JSON parser and"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * finalize {@code ModuleInfo}s\u0027 internal structure."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param moduleInfo List of {@code ModuleInfo}s deserialized by JSON parser."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static ModuleInfo[] finalizeModuleInfo(ModuleInfo[] moduleInfo) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ImmutableMap.Builder\u003cString, ModuleInfo\u003e builder \u003d ImmutableMap.builder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (ModuleInfo mInfo : moduleInfo) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            builder.put(mInfo.getCode(), mInfo);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // TODO(rongjiecomputer) This code-\u003emoduleInfo map is useful for other class too."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // Figure out a place to expose this to other classes."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ImmutableMap\u003cString, ModuleInfo\u003e map \u003d builder.build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (ModuleInfo mInfo : moduleInfo) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            mInfo.finalize(map);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return moduleInfo;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return code.hashCode();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (!(other instanceof ModuleInfo)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo otherModuleInfo \u003d (ModuleInfo) other;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return code.equals(otherModuleInfo.code);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        String str \u003d \"ModuleInfo(\" + code + \") {\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (prereqModuleInfo.size() \u003e 0) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            str +\u003d \" prereq:\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            for (ModuleInfo prereq : prereqModuleInfo) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                str +\u003d \" \" + prereq.code;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        if (precluModuleInfo.size() \u003e 0) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            str +\u003d \" preclu:\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            for (ModuleInfo preclu : precluModuleInfo) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                str +\u003d \" \" + preclu.code;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return str + \" }\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 100,
      "rongjiecomputer": 94,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/module/ModuleType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Represents the degree requirements of a Computer Science programme."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public enum ModuleType {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    UNIVERSITY_LEVEL_REQUIREMENTS(\"University Level Requirements\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    UNRESTRICTED_ELECTIVES(\"Unrestricted Electives\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PROGRAMME_REQUIREMENTS(\"Programme Requirements\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_FOUNDATION(\"PR Foundation\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_BREADTH_AND_DEPTH(\"PR Breadth and Depth\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_INDUSTRIAL_EXPERIENCE(\"PR Industrial Experience\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_IT_PROFESSIONALISM(\"PR IT Professionalism\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    PR_MATHEMATICS_AND_SCIENCE(\"PR Mathematics and Science\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    ModuleType(String name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 26,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/semester/Semester.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.semester;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Represents a Semester in the module planner."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Holds the list of modules taken and the list of modules available for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * that semester."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * A semester can be characterised by the year it is in, and whether it is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * the first or second semester in that year."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /** Constant for the first index. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int FIRST \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /** Constant for the second index. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int SECOND \u003d 2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // Basic information"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // Indicator of whether user has passed the index"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private boolean hasBeenTaken;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    // Modules lists"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private List\u003cModule\u003e modulesTaken \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    private List\u003cModule\u003e modulesAvailable \u003d new ArrayList\u003cModule\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Constructs a {@code Semester}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param year A valid year"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param index A valid index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param hasBeenTaken Whether the semester has been taken"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public Semester(int year, int index, boolean hasBeenTaken) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.hasBeenTaken \u003d hasBeenTaken;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Adds one or more module(s) to the list of modules taken."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modules A non-empty list of modules to be added"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void addModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulesTaken.addAll(modules);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Adds one or more modules(s) to the list of modules available."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modules A non-empty list of modules to be added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void addAvailableModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        modulesAvailable.addAll(modules);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Deletes one or more module(s) from list of modules taken if present."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param modules A non-empty list of modules to be deleted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void deleteModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        for (Module m : modules) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "            modulesTaken.remove(m);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks if the module with is taken or planned to take in the semester."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param module The module"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if the module exists, false if not"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public boolean containsModule(Module module) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return modulesTaken.stream().anyMatch(module::equals);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Changes the {@code Semester}\u0027s status from currently being taken"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * to taken."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public void archive() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        this.hasBeenTaken \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns the list of modules taken in this semester."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return A list of modules taken"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public List\u003cModule\u003e getModulesTaken() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return modulesTaken;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Returns a list of modules that the user is available to take"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * in this semester."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return A list of available modules"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public List\u003cModule\u003e getModulesAvailable() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return modulesAvailable;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "Hilda-Ang": 109
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/util/IndexUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "//@@author Hilda-Ang"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " * Contains utility methods for handling year, semester, and indexing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "public class IndexUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static final int NUM_OF_SEMESTER_IN_YEAR \u003d 2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks that the given year is valid, i.e. is between 1 to 4."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param year Year to be checked."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if the given year is valid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static boolean hasValidYear(int year) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return year \u003e 0 \u0026\u0026 year \u003c 5;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Checks that the given semester is valid, i.e. is either 1 or 2."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param semester Semester to be checked."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return True if the given semester is valid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static boolean hasValidSemester(int semester) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return semester \u003d\u003d 1 || semester \u003d\u003d 2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Converts the given year and semester to an index between 0 and 7,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * e.g. year 1 semester 1 will be converted to index 0,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * year 1 semester 2 will be converted to index 1,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * and year 2 semester 1 will be converted to index 2."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param year An integer between 1 to 4."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param semester An integer between 1 to 2."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The resulting index between 0 to 7."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static int convertYearAndSemesterToIndex(int year, int semester) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return year * NUM_OF_SEMESTER_IN_YEAR - NUM_OF_SEMESTER_IN_YEAR + semester - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * Converts a one-based number to zero-based."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * This method verify if the one-based number is indeed one based"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * since that is impossible to do so."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @param oneBased The one-based number"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     * @return The zero-based number; the one-based number decremented by one"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    public static int convertToZeroBased(int oneBased) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "        return oneBased;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hilda-Ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "Hilda-Ang": 54
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/util/ModuleUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MODULE_CODE_REGEX \u003d \"^[A-Z]{2,3}\\\\d{4}[A-Z]{0,2}$\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Checks if the module code format is valid."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * @return True if the module code format valid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public static boolean hasValidCodeFormat(String code) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return code.matches(MODULE_CODE_REGEX);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 12,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/planner/model/util/SampleModulesUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a temporary class to generate sample {@code Module}s."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleModulesUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    // @@author rongjiecomputer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns an {@code ObservableList\u003cModule\u003e} with modules from {@code start} to {@code end}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * The possible modules are stored in a {@code List} internally."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param start The start index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param end   The end index"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @return An {@code ObservableList} with modules from {@code start} to {@code end}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public static ObservableList\u003cModule\u003e genModules(int start, int end) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleType[] pt1 \u003d new ModuleType[]{ModuleType.PR_FOUNDATION, ModuleType.UNRESTRICTED_ELECTIVES};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleType[] pt2 \u003d new ModuleType[]{ModuleType.PR_BREADTH_AND_DEPTH, ModuleType.UNRESTRICTED_ELECTIVES};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleType[] pt3 \u003d new ModuleType[]{ModuleType.PR_IT_PROFESSIONALISM, ModuleType.UNRESTRICTED_ELECTIVES};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleType[] pt4 \u003d new ModuleType[]{ModuleType.UNRESTRICTED_ELECTIVES};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleType[] pt5 \u003d new ModuleType[]{ModuleType.UNRESTRICTED_ELECTIVES};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleType[] pt6 \u003d new ModuleType[]{ModuleType.PR_INDUSTRIAL_EXPERIENCE};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs1010 \u003d new ModuleInfo(\"CS1010\", \"Programming Methodology I\", pt1,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                4, new String[]{}, new String[]{});"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs1231 \u003d new ModuleInfo(\"CS1231\", \"Discrete structure\", pt2,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                4, new String[]{}, new String[]{});"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs2030 \u003d new ModuleInfo(\"CS2030\", \"Programming Methodology II\", pt3,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                4, new String[]{}, new String[]{\"CS1010\"});"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs2040 \u003d new ModuleInfo(\"CS2040\", \"Data Structure\", pt1,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                4, new String[]{\"CS2040C\"}, new String[]{\"CS1010\", \"CS1231\"});"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs2040c \u003d new ModuleInfo(\"CS2040C\", \"Data Structure\", pt1,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                4, new String[]{\"CS2040\"}, new String[]{\"CS1010\", \"CS1231\"});"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs1234 \u003d new ModuleInfo(\"CS1234\", \"Sleep Science\", pt4,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                100, new String[]{\"CS2030\"}, new String[]{\"CS2040\"});"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs5678 \u003d new ModuleInfo(\"CS5678\", \"Eat more gum\", pt5,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                6, new String[]{}, new String[]{\"CS1010\"});"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo cs9101 \u003d new ModuleInfo(\"CS9101\", \"Beef Heef\", pt6,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                5, new String[]{}, new String[]{});"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo.finalizeModuleInfo("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                new ModuleInfo[]{cs1010, cs1231, cs2030, cs2040, cs2040c, cs1234, cs5678, cs9101});"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m1 \u003d new Module(ModuleType.PR_FOUNDATION, cs1010);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m2 \u003d new Module(ModuleType.PR_BREADTH_AND_DEPTH, cs1231);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m3 \u003d new Module(ModuleType.PR_IT_PROFESSIONALISM, cs2030);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m4 \u003d new Module(ModuleType.PR_FOUNDATION, cs2040);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m5 \u003d new Module(ModuleType.PR_FOUNDATION, cs2040c);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m6 \u003d new Module(ModuleType.UNRESTRICTED_ELECTIVES, cs5678);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Module m7 \u003d new Module(ModuleType.PR_INDUSTRIAL_EXPERIENCE, cs9101);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        List\u003cModule\u003e modules \u003d List.of(m1, m2, m3, m4, m5, m6, m7);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return FXCollections.observableList(modules.subList(start, end));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 58,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/JsonModuleInfoStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "//@@author rongjiecomputer"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * A class to access {@link seedu.planner.model.module.ModuleInfo} stored in the hard disk as a json file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class JsonModuleInfoStorage implements ModuleInfoStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public JsonModuleInfoStorage(Path filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Path getModuleInfoFilePath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public Optional\u003cModuleInfo[]\u003e readModuleInfo() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Optional\u003cModuleInfo[]\u003e optionalModuleInfo \u003d JsonUtil.readJsonFile(filePath, ModuleInfo[].class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return optionalModuleInfo.map(ModuleInfo::finalizeModuleInfo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns {@code ModuleInfo} of a certain {@code ModuleType} that {@code ModuleInfoStorage} stores."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param moduleType Type of {@code module}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @return A list of {@code ModuleInfo} of {@code moduleType}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public List\u003cModuleInfo\u003e getModuleInfo(ModuleType moduleType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // TODO(rongjiecomputer) Implement filter"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 35,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/planner/storage/ModuleInfoStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "//@@author rongjiecomputer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " * Represents a storage for {@link seedu.planner.model.module.ModuleInfo}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public interface ModuleInfoStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns the file path of the ModuleInfo data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    Path getModuleInfoFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws DataConversionException If the data in storage is not in the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @throws IOException If there was any problem when reading from the storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    Optional\u003cModuleInfo[]\u003e readModuleInfo() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * Returns {@code ModuleInfo} of a certain {@code ModuleType} that {@code ModuleInfoStorage} stores."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @param moduleType Type of module"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     * @return A list of {@code ModuleInfo} of {@code moduleType}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    List\u003cModuleInfo\u003e getModuleInfo(ModuleType moduleType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 28,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.ModulePlanner.MAX_NUMBER_SEMESTERS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.planner.model.ModulePlanner.NUMBER_MODULE_GROUPS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.Config;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.Logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModuleListPanel[] takenModulesListPanels;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModuleListPanel[] availableModulesListPanels;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private TabPane semestersTabPane;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        //@@author GabrielYik"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (FXML.equals(\"MainWindow_Test.fxml\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            takenModulesListPanels \u003d new ModuleListPanel[MAX_NUMBER_SEMESTERS];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            availableModulesListPanels \u003d new ModuleListPanel[MAX_NUMBER_SEMESTERS];"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            for (int semesterIndex \u003d 0; semesterIndex \u003c MAX_NUMBER_SEMESTERS; semesterIndex++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                takenModulesListPanels[semesterIndex] \u003d new ModuleListPanel("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                        logic.getFilteredTakenModuleList(semesterIndex));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                availableModulesListPanels[semesterIndex] \u003d new ModuleListPanel("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                        logic.getFilteredAvailableModuleList(semesterIndex));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            ObservableList\u003cTab\u003e semesterTabs \u003d semestersTabPane.getTabs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            for (int semesterIndex \u003d 0; semesterIndex \u003c semesterTabs.size(); semesterIndex++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                SplitPane splitPane \u003d (SplitPane) semesterTabs.get(semesterIndex).getContent();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                ObservableList\u003cNode\u003e nodes \u003d splitPane.getItems();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                for (int i \u003d 0; i \u003c NUMBER_MODULE_GROUPS; i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    VBox vBox \u003d (VBox) nodes.get(i);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    StackPane stackPane \u003d (StackPane) vBox.getChildren().get(0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    Node n \u003d (i \u003d\u003d 0)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                            ? takenModulesListPanels[semesterIndex].getRoot()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                            : availableModulesListPanels[semesterIndex].getRoot();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    stackPane.getChildren().add(n);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 31,
      "-": 220
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/ModuleListCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * A UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label moduleName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label moduleType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label creditCount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label preclusion;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private FlowPane preclusions;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private Label prerequisite;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private FlowPane prerequisites;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleListCard(Module module) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleCode.setText(module.getCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleName.setText(module.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleType.setText(\"Fulfils: \" + module.getType().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        creditCount.setText(\"Modular Credits: \" + Float.toString(module.getCreditCount()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (ModuleInfo m : module.getPreclusions()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            preclusions.getChildren().add(new Label(m.getCode()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        switch(module.getPreclusions().size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            preclusion.setText(\"Preclusion: none\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            preclusion.setText(\"Preclusion: \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            preclusion.setText(\"Preclusions: \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        for (ModuleInfo m : module.getPrerequisites()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            prerequisites.getChildren().add(new Label(m.getCode()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        switch(module.getPrerequisites().size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            prerequisite.setText(\"Prerequisite: none\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            prerequisite.setText(\"Prerequisite: \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            prerequisite.setText(\"Prerequisites: \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        if (!(other instanceof ModuleListCard)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        ModuleListCard card \u003d (ModuleListCard) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        return moduleCode.equals(card.moduleCode);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 95,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/planner/ui/ModuleListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.events.ui.ModulePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " * Panel containing a list of modules."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setConnections(moduleList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void setConnections(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListPanel.ModuleListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        moduleListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                        raise(new ModulePanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            moduleListView.scrollTo(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            moduleListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleListCard}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "                setGraphic(new ModuleListCard(module).getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 68,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/ModuleManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//TODO"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleManagerTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 6,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // @@author rongjiecomputer"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        public ModuleInfo[] getModuleInfo() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        // @@author"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        //@@author GabrielYik"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredTakenModuleList(int index) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredAvailableModuleList(int index) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        //TODO: implement"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        public void deleteModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        public void addModules(List\u003cModule\u003e modules, int index) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 28,
      "rongjiecomputer": 6,
      "-": 209
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/commands/DeleteModuleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//TODO"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class DeleteModuleCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 7,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/planner/logic/parser/DeleteModuleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//TODO"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class DeleteModuleCommandParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 6,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/module/ModuleInformationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//TODO"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleInformationTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 7,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/planner/model/util/ModuleUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModuleUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author GabrielYik"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void hasValidCodeFormat_validFormat_returnsTrue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CS1010\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CS1010J\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CS1010CS\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CEG1010\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertTrue(ModuleUtil.hasValidCodeFormat(\"CEG1010J\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    public void hasValidCodeFormat_invalidFormat_returnsFalse() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(ModuleUtil.hasValidCodeFormat(\"CS10101\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(ModuleUtil.hasValidCodeFormat(\"CSCS1010\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(ModuleUtil.hasValidCodeFormat(\"CSCS10101\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "        assertFalse(ModuleUtil.hasValidCodeFormat(\"CSCS10101JJJ\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 20,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/planner/storage/JsonModuleInfoStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.planner.model.module.ModuleInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "//@@author rongjiecomputer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "public class JsonModuleInfoStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonModuleInfoStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        readModuleInfo(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private Optional\u003cModuleInfo[]\u003e readModuleInfo(String moduleInfoFileInTestDataFolder)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Path moduleInfoFilePath \u003d addToTestDataPathIfNotNull(moduleInfoFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return new JsonModuleInfoStorage(moduleInfoFilePath).readModuleInfo();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void readModuleInfo_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertFalse(readModuleInfo(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void readModuleInfo_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        readModuleInfo(\"NotJsonFormatModuleInfo.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String moduleInfoFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        return moduleInfoFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(moduleInfoFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    public void sanityCheck() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        JsonModuleInfoStorage storage \u003d new JsonModuleInfoStorage(Paths.get(\"data\", \"moduleInfo.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        Optional\u003cModuleInfo[]\u003e optionalModuleInfo \u003d storage.readModuleInfo();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        assertTrue(optionalModuleInfo.isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        ModuleInfo[] moduleInfo \u003d optionalModuleInfo.get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        System.out.println(moduleInfo.length);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        for (int i \u003d 0; i \u003c Math.min(10, moduleInfo.length); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "            System.out.println(moduleInfo[i]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rongjiecomputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rongjiecomputer": 57,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/planner/storage/ModuleInformationStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.planner.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//@@author GabrielYik"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "//TODO"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "public class ModuleInformationStorageTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GabrielYik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GabrielYik": 7,
      "-": 2
    }
  }
]
